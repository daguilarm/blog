<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:media="http://search.yahoo.com/mrss/">
    <channel>
        <title>Blog de Damián Aguilar</title>
        <link>https://daguilar.dev</link>
        <description><![CDATA[Blog sobre programación de Damián Aguilar, en el vas a encontrar artículos y recursos sobre: php, javascript, vuejs, phyton, java, livewire, alpinejs, laravel, seo... y mucho más. Además, encontrarás noticias sobre desarrollo web, lenguajes de programación, software y marketing]]></description>
        <atom:link href="https://daguilar.dev/blog/rss.xml" rel="self" type="application/rss+xml" />
        <language>es</language>
        <lastBuildDate>Sun, 10 Jul 2022 00:00:00 +0000</lastBuildDate>

                    <item>
                <title><![CDATA[Nuevos proyectos Laravel con Vite, la alternativa a Webpack]]></title>
                <link>https://daguilar.dev/blog/laravel_empezando-nuevo-proyecto-con-laravel-vite</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_empezando-nuevo-proyecto-con-laravel-vite</guid>
                <description><![CDATA[Laravel vite ha llegado para sustituir a Webpack, el sistema de gestión de assets para el front-end. Laravel vite es más rápido y moderno que su predecesor Webpack. Evan You el creador de VueJS ha desarrollado esta nueva herramienta que puede llegar a ser 100 veces más rápida que Webpack.]]></description>
                <content:encoded><![CDATA[<p>Hoy he empezado dos proyectos nuevos... la verdad es que a veces pienso que tengo que ir con mas calma. El caso es que he utilizado <strong>la última versión de <em>Laravel</em>, e incluye la nueva librería Vite, en sustitución de WebPack</strong>.</p>

<p><strong>Webpack</strong> ha sido el gestor del <em>font-end</em> de <strong>Laravel</strong> desde hace años a través de <strong>Laravel Mix</strong>. Ahora ha sido sustituido por <strong>Vite</strong>, una alternativa más rápida y eficiente, desarrollada con un enfoque más moderno.</p>

<blockquote>
  <p><strong>Evan You</strong>, creador VueJS es el desarrollador de <a href="https://vitejs.dev/" class="link-out">Vite</a>.</p>
</blockquote>

<p><strong>Laravel en su versión 9.19.0 ha integrado de forma nativa Vite</strong>. Ya lo he probado, y tengo que admitir que efectivamente compila a una velocidad asombrosa, realmente es muy eficaz. Este cambio va a suponer dejar de lado <strong>WebPack</strong> y cambiar un poco la filosofía de funcionamiento del <strong>framework</strong>.</p>

<p><strong>Lo primero que me he encontrado ha sido un error en el certificado generado por Laravel Valet</strong>. Personalmente utilizo <strong>Valet</strong> en mis proyectos, y en cuanto he ejecutado en el terminal <code>valet secure miProyecto</code>, y he ido la url <code>https://miproyecto.test</code> me han saltado varios errores con el certificado que ha generado <strong>Valet</strong>.</p>

<p>La configuración del fichero <code>vite.config.js</code> (en vez del fichero de WebPack), viene por defecto así:</p>

<pre><code class="language-javascript">import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel([
            'resources/css/app.css',
            'resources/js/app.js',
        ]),
    ],
});
</code></pre>

<p>Desde la documentación oficial de <strong>Laravel</strong> proponen una solución para los errores del certificado generado por <strong>Valet</strong>:</p>

<pre><code class="language-javascript">import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel([
            'resources/css/app.css',
            'resources/js/app.js',
        ]),
    ],
    server: { 
        https: true, 
        host: 'localhost', 
    }, 
});
</code></pre>

<p>Pero en la práctica no es una buena solución, ya que te salta un aviso de que no tienes certificado de seguridad y que tienes que aceptar el aviso del navegador de que estás accediendo a una web sin certificado. <a href="https://freek.dev/2276-making-vite-and-valet-play-nice-together" class="link-out">Freek Van der Herten</a> en su blog propone una solución mas elegante y sencilla:</p>

<pre><code class="language-php">function detectServerConfig(host) {
    let keyPath = resolve(homedir(), `.config/valet/Certificates/${host}.key`)
    let certificatePath = resolve(homedir(), `.config/valet/Certificates/${host}.crt`)

    if (!fs.existsSync(keyPath)) {
        return {}
    }

    if (!fs.existsSync(certificatePath)) {
        return {}
    }

    return {
        hmr: {host},
        host,
        https: {
            key: fs.readFileSync(keyPath),
            cert: fs.readFileSync(certificatePath),
        },
    }
}
</code></pre>

<p>Es un método que verifica la existencia de los certificados generados por <strong>Valet</strong>, es decir, hace el trabajo sucio por ti, y el código final que he puesto en mi proyecto ha sido el siguiente:</p>

<pre><code class="language-php">import fs from 'fs';
import laravel from 'laravel-vite-plugin'
import {defineConfig} from 'vite'
import {homedir} from 'os'
import {resolve} from 'path'

let host = 'miproyecto.test'

export default defineConfig({
    plugins: [
        laravel([
            'resources/css/app.css',
            'resources/js/app.js',
        ]),
    ],
    server: detectServerConfig(host),
});

function detectServerConfig(host) {
    let keyPath = resolve(homedir(), `.config/valet/Certificates/${host}.key`)
    let certificatePath = resolve(homedir(), `.config/valet/Certificates/${host}.crt`)

    if (!fs.existsSync(keyPath)) {
        return {}
    }

    if (!fs.existsSync(certificatePath)) {
        return {}
    }

    return {
        hmr: {host},
        host,
        https: {
            key: fs.readFileSync(keyPath),
            cert: fs.readFileSync(certificatePath),
        },
    }
}
</code></pre>

<p>Tengo que admitir que no estaba al tanto de esta situación, <strong>y que he tenido que buscar en Google la solución</strong>, y resulta que uno de los mas famosos programadores y divulgadores de <strong>Laravel</strong>, había posteado la solución al proglema en su blog.</p>

<p>Por otro lado, si no quieres perder mucho tiempo con esto, la gente de <a href="https://laravelshift.com/convert-laravel-mix-to-vite" class="link-out">Laravelshift.com</a> ha creado <strong>un convertidor gratuito</strong> para pasar un proyecto de <strong>Laravel Mix(Webpack)</strong> a <strong>Vite</strong>.</p>

<p><strong>Laravel Vite también permite añadir funcionalidades nuevas</strong>. En otro post diferente <a href="https://freek.dev/2277-using-laravel-vite-to-automatically-refresh-your-browser-when-changing-a-blade-file" class="link-out">Freek Van der Herten</a> propone un método para que las plantillas de <strong>Blade</strong> se refresquen automáticamente cuando se actualicen el código. Lo mismo que sucede con los <em>assets</em> cuando se actualiza algo y estas en modo <code>npm run watch</code>.</p>

<p>Para hacer esto, propone añadir el siguiente <em>plugin</em> al código:</p>

<pre><code class="language-php">{
    name: 'blade',
    handleHotUpdate({ file, server }) {
        if (file.endsWith('.blade.php')) {
            server.ws.send({
                type: 'full-reload',
                path: '*',
            });
        }
    },
}
</code></pre>

<p>Ahora el archivo que he creado para mis proyectos, queda así:</p>

<pre><code class="language-php">import fs from 'fs';
import laravel from 'laravel-vite-plugin'
import {defineConfig} from 'vite'
import {homedir} from 'os'
import {resolve} from 'path'

let host = 'miproyecto.test'

export default defineConfig({
    plugins: [
        laravel([
            'resources/css/app.css',
            'resources/js/app.js',
        ]),
        {
            name: 'blade',
            handleHotUpdate({ file, server }) {
                if (file.endsWith('.blade.php')) {
                    server.ws.send({
                        type: 'full-reload',
                        path: '*',
                    });
                }
            },
        }
    ],
    server: detectServerConfig(host),
});

function detectServerConfig(host) {
    let keyPath = resolve(homedir(), `.config/valet/Certificates/${host}.key`)
    let certificatePath = resolve(homedir(), `.config/valet/Certificates/${host}.crt`)

    if (!fs.existsSync(keyPath)) {
        return {}
    }

    if (!fs.existsSync(certificatePath)) {
        return {}
    }

    return {
        hmr: {host},
        host,
        https: {
            key: fs.readFileSync(keyPath),
            cert: fs.readFileSync(certificatePath),
        },
    }
}
</code></pre>

<p>Como apunte final, si en vez de utilizar <a href="https://tailwindcss.com/" class="link-out">TailwindCss</a> en tu proyecto, usas <a href="https://getbootstrap.com/" class="link-out">Bootstrap</a>, aquí tienes una guía de migración (en inglés):</p>

<ul>
<li><a href="https://creagia.com/blog/using-laravel-vite-with-bootstrap-and-sass" class="link-out">https://creagia.com/blog/using-laravel-vite-with-bootstrap-and-sass</a></li>
</ul>

<p>En general es todo una gran mejora, pero sobre todo me ha gustado el plugin de <a href="https://freek.dev/2277-using-laravel-vite-to-automatically-refresh-your-browser-when-changing-a-blade-file" class="link-out">Freek Van der Herten</a> para actualizar en tiempo real los cambios en los archivos <code>.blade.php</code>, es espectacular ir modificando el código en una pantalla y ver el resultado en tiempo real en la otra. Una maravilla.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Guía definitiva para aumentar las visitas de tu página web]]></title>
                <link>https://daguilar.dev/blog/seo_como-aumentar-las-visitas-de-tu-pagina-web-guia-definitiva</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/seo_como-aumentar-las-visitas-de-tu-pagina-web-guia-definitiva</guid>
                <description><![CDATA[En este artículo se muestra una guía definitiva para conseguir visitas de forma rápida y sencilla para tu página web, blog o negocio.]]></description>
                <content:encoded><![CDATA[<p><strong>¿Tienes un blog o una web que no consiguen tráfico suficiente?</strong> Las visitas no aumentan cada vez que miras las estadísticas. No te preocupes, es nomal, al principio todos los webs son así: <strong>sin visitas</strong>. En este artículo voy a explicarte <strong>las mejores formas de cambiar esta situación, y conseguir aumentar las visitas</strong> de tu web o blog.</p>

<p>Quizas lo primero es aclarar que no soy ningún experto en <strong>Marketing</strong> ni <strong>SEO</strong>, pero si que es cierto que llevo muchos años en esto, y que me he tomado la molestía de perder mucho tiempo leyendo y recopilando información sobre el tema. Básicamente lo que voy a plasmar aquí es <strong>un resumen de las mejores técnicas o decisiones que se pueden tomar a la hora de promocionar tu página web o blog</strong>.</p>

<p>Algunas de estas técnicas las he aprendido a lo largo de mi vida a través de la experiencia, pero otras las he aprendido de gente que sabe del tema, por lo tanto, <strong>al final del post podrás encontrar una pequeña bibliografía con todas las fuentes que he consultado</strong>.</p>

<p>También quiero resaltar que este artículo es una especie de experimento personal en el que voy a intentar aplicar todos los consejos que se plasman aquí. También es importante recordar, que hay que tener en cuenta que <strong>el posicionamiento en buscadores es un proceso lento</strong> y que puede llevar bastante tiempo, por lo tanto, hay que ser paciente y perseverar.</p>

<blockquote>
  <p>El posicionamiento en buscadores, es un compendio de técnicas y herramientas enfocadas en mejorar la posición de un sitio web respecto a los resultados de los buscadores.</p>
</blockquote>

<h2>1) Principios básicos.</h2>

<p>La gran mayoría de las webs sobre <strong>SEO</strong> y <strong>Marketing online</strong>, coinciden en que hay <strong>dos aspectos clave para conseguir aumentar el trafico de tu web o blog</strong>. Realmente son aspectos que se dan por sentado, y que toda web que aspire a conseguir un buen posicionamiento debe de tener. Es decir, <strong>es algo previo a las técnicas y métodos para conseguir visitas o mejorar nuestro posicionamiento</strong>. Toda web debe implementar de los siguientes principios antes de empezar con el posicionamiento en motores de búsqueda:</p>

<ul>
<li>Un contenido de calidad.</li>
<li>Experiencia de usuario decente.</li>
</ul>

<h3>1.1) Crear contenido de calidad</h3>

<p>Internet está lleno de contenidos muy variados, y eso implica que <strong>cada vez es más facil encontrar contenidos gran calidad</strong>, por lo que si el tuyo no está a la altura del resto rápidamente dejará de ser interesante y eso lo volverá irrelevante. <strong>Nuestro objetivo es el contrario: ser relevantes.</strong></p>

<p>Existen varias claves a tener en cuenta a la hora de generar contenido de calidad:</p>

<ul>
<li>Algunos web consideran que <strong>es importante que nuestros artículos o contenido tenga una extensión importante</strong>, en otras palabras, deben de ser largos. También es cierto que otros afirman que esto era antes, y que actualmente ya no es tan importante,... Personalmente creo que si que es importante que el contenido sea extenso.</li>
<li>El contenido del web <strong>debe de ser novedoso o estar de actualidad</strong>, o por lo menos, tener un enfoque diferente al resto (a nuestra competencia).</li>
<li>Intenta actualizar los contenidos de tu web o blog con frecuencia. Parece ser que a <strong>Google</strong> le gusta las webs que generan <strong>contenidos frecuentes</strong>.</li>
<li>El contenido debe de ser claro y directo, buscando una <strong>narración simple y didáctica, y por supuesto, con una buena estructura</strong>. Es importante revisar varias veces el contenido para asegurarse que sigue estos principios.</li>
<li>Tal vez tu web de empresa no sea el lugar adecuado para generar contenidos de calidad, en este caso, <strong>lo normal es crear un blog corporativo</strong> que genere estos contenidos, eso si, siempre vinculado a la web de la empresa.</li>
</ul>

<p>A modo de resumen, generar contenido de calidad <strong>consiste en generar un texto mucho mejor que el que podríamos encontrar en nuestra competencia</strong>. Se que no es fácil, pero tampoco es imposible.</p>

<h3>1.2) Experiencia de usuario.</h3>

<blockquote>
  <p><em>¿Qué es la experiencia de usuario?</em> La user experience (UX), podemos resumirla en lo fácil o complejo que es moverse por una página web, y que principalmente se basa en:</p>
</blockquote>

<ul>
<li>¿Cómo está estructurado el blog o web?. Ordenar el contenido es importante.</li>
<li>¿Cómo de sencilla o compleja es la navegación por ella?. <strong>Lo ideal sería que un visitante nuevo fuera capaz de moverse por todo el web sin demasiados problemas</strong>.</li>
<li>El diseño: ¿Es un diseño moderno?, o tal vez ¿es atractivo?. <strong>La primera impresión de un web es importante</strong>, por lo tanto hay que cuidar el logotipo, el diseño y la imagen que desprende nuestro web en general.</li>
<li>Cuidar la tipografía y los colores. A veces nos encontramos con colores de letra o fondos, que hace casi imposible entender que estamos viendo... ojo con esto.</li>
<li>¿Es el web responsive?. <strong>Es importante que el web se pueda visualizar correctamente desde cualquier dispositivo</strong>.</li>
<li><strong>La velocidad de carga del web</strong>. Otro aspecto muy importante y que puede hacernos perder visitantes. <strong>Es importante disponer de un web que cargue rápido</strong>, ya que la velocidad del web va a influir tanto en la experiencia de usuario como en el posicionamiento web. El propio <strong>Google</strong> se ha tomado la molestia de desarrollar su propia herramienta <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk?hl=es" class="link-out">Lighthouse</a> para que mejoremos la velocidad de carga de nuestro proyecto, esto ya es opinión personal, pero estoy convencido que <strong>la velocidad de carga de un web es un factor que Google tiene en cuenta para el posicionamiento</strong>.</li>
</ul>

<h2>2 Formas de conseguir tráfico web.</h2>

<p>Esto ya es como la jungla, <strong>hay miles de opiniones y propuestas para aumentar el tráfico de nuestro web</strong>. Voy a centrarme en las más sensatas, y las que más se repiten entre los expertos en la materia, y por supuesto, en base a mi propia experiencia:</p>

<h3>2.1 Buscadores</h3>

<p>Los primero que me parece lógico decir, es que he descartado todo aquello relacionado con empresas, blogs, etc que ofrecian servicios de alta en buscadores y directorios... como digo, no soy un experto, pero esto parecen técnicas del siglo pasado, por lo que directamente lo he obviado.</p>

<p><strong>Google es la principal fuente de tráfico web del mundo</strong>, por lo que si tu web le gusta al buscador vas a tener muchas visitas. Es cierto que existen otros buscadores, pero para que vamos a engañarnos... creo que básicamente todo se reduce a <strong>Google</strong> y tal vez a <strong>Bing</strong>.</p>

<p>Antes de empezar debemos configurar el archivo <code>robots.txt</code>. Este archivo va a indicar a los buscadores las partes del web deben rastrear e indexar y las partes que no. A continuación, un ejemplo básico del contenido del archivo <code>robots.txt</code>:</p>

<pre><code class="language-bash">User-agent: *
Allow: /

Sitemap: https://daguilar.dev/blog/rss.xml
Sitemap: https://daguilar.dev/sitemap.xml
</code></pre>

<p>Indicamos que indexe todo el contenido (sin excepciones), y le indicamos la ubicación del archivo <code>sitemap</code>, si es que lo tenemos (que ya te digo yo que tienes que tenerlo). Como puedes ver, en mi caso he añadido dos <code>sitemap</code>... en principio puedes añadir tantos como tengas en tu web.</p>

<h4>2.1.1 ¿Cómo dar de alta nuestra web o blog en buscadores?</h4>

<p><strong>La forma de dar de alta tu web en google</strong>, es mediante <a href="https://search.google.com/search-console" class="link-out">Search Console</a>. Antes se podía añadir las webs de forma directa desde un formulario, pero eso ya es cosa del pasado.</p>

<p>Con el buscador <strong>Bing</strong> tenemos la misma situación <a href="https://www.bing.com/webmasters/about" class="link-out">Alta en Bing</a>.</p>

<p>Si queremos añadir nuestro web a <strong>Yahoo Search</strong>, debemos utilizar la aplicación de alta de <strong>Bing</strong>.</p>

<p>Otros buscadores como <a href="https://duckduckgo.com/" class="link-out">DuckDuckGo</a> realizan el proceso de indexación de forma autónoma utilizando otras fuentes. <strong>En resumen, basta con añadir las webs a Google y a Bing.</strong></p>

<h3>2.2 SEO (Search Engine Optimization)</h3>

<blockquote>
  <p>El SEO son un conjunto de técnicas enfocadas a mejorar la posición y la visibilidad de una página web respecto a los motores de búsqueda.</p>
</blockquote>

<p>Los motores de búsqueda (como <strong>Google</strong>) indexan el contenido de internet, lo clasifican y lo catalogan. Despues de esto, y con la ayuda de los algoritmos que ha desarrollado cada buscador, se ordenarán los resultados y se mostrarán al usuario que ha realizado la búsqueda.</p>

<p>La idea, por tanto, <strong>es conseguir entender el funcionamiento de estos algoritmos, y que aspectos o condiciones de un web, son las que hacen que suban o bajen en los resultados.</strong> El problema es que los algoritmo son secretos, y la única forma de conseguir información de como funcionan, es mediante la experiencia, de aquí que existan demasiadas teorias sobre como posicionar una página web.</p>

<p>Existen dos tipos de posicionamiento <strong>SEO</strong>: el <strong>SEO on-page</strong> y el <strong>SEO off-page</strong>.</p>

<h4>2.2.1 SEO on-page</h4>

<blockquote>
  <p>El SEO on-page son el conjunto de técnicas enfocadas en adaptar el contenido de la página web, conforme a las expectativas de un buscador. Es decir, son las técnicas SEO que se realizan en la propia página.</p>
</blockquote>

<p>Aqui es donde uno puede llegar a perderse con la cantidad de consejos sobre <strong>cómo optimizar la página web para buscadores</strong>. He intentado hacer una buena selección, y creo que hay consenso:</p>

<h5>Titulo</h5>

<p>Es importante que el web tenga una etiqueta <code>&lt;title&gt;</code>. Y sobre todo, <strong>el título debe de ser claro, directo y que explique de que va nuestra página web</strong>. Otra cosa en la que parecen estar deacuerdo las diversas fuentes, es que es importante que no sea excesivamente largo (entre 50 y 70 caracteres) e intentar añadir alguna palabra clave al principio del mismo.</p>

<p><strong>El título, también tiene que ser atractivo y captar la atención del visitante</strong>, y por supuesto, cada página debe de tener un título propio y descriptivo, no vale ponerle a todas las páginas el mismo título.</p>

<pre><code>```html
&lt;title&gt;El blog de programación de Damián Aguilar&lt;/title&gt;
```
</code></pre>

<blockquote>
  <p>Recuerda: es un error ponerle a todas las páginas el mismo título.</p>
</blockquote>

<h5>MetaTags</h5>

<p>Los buscadores <strong>buscan en las metaetiquetas contenido para entender mejor de que va la web</strong>, y también información de como actuar en determinadas situaciones: que partes del web indexar, que partes no, si el contenido es apto para dispositivos móviles, si hay contenido para adultos, etc.</p>

<p>En la web <a href="https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=es" class="link-out">https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=es</a> puedes encontrar la lista completa de las metaetiquetas que <strong>Google</strong> es capaz de comprender.</p>

<ul>
<li><p><strong>Descripción</strong>: Parece ser que no es importante para el posicionamiento, pero <strong>Google</strong> la utiliza a la hora de mostrar los resultados, por lo que es importante añadirla. Lo normal es que no exceda de los 250 caracteres, aunque parece que se puede llegar hasta los 300. <strong>Es importante tener en cuenta que en los resultados de búsqueda, el título y la descripción, es lo que va a llamar la atención del visitante potencial</strong>, por lo que hay que esforzarse un poco en hacerlo bien.</p>

<pre><code class="language-html">&lt;meta name="description" content="Descripcion..."&gt;
</code></pre></li>
<li><p><strong>Palabras clave</strong>: Pues muchos sitios te dicen que son importantes, pero el propio <strong>Google</strong> (en el enlace anterior en el que habla de las meta-tags) ni las menciona.</p></li>
<li><p><strong>Viewport</strong>: Se utiliza para dar soporte a dispositivos móviles. <strong>Google</strong> la utiliza para saber si el web es <em>responsive</em>.</p>

<pre><code class="language-html">&lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;
</code></pre></li>
<li><p><strong>Validación de buscadores</strong>: Los propios buscadores utilizan metaetiquetas para verificar la autoría de un web. Es la técnica que utilizan para demostrar que el web es tuyo. <strong>Google</strong> y <strong>Bing</strong> tienen las suyas:</p>

<pre><code class="language-html">&lt;!-- Bing --&gt;
&lt;meta name="msvalidate.01" content="7EBAF0830896AD1D4A27E93C37552EDA" /&gt;

&lt;!-- Google --&gt;
&lt;meta name="google-site-verification" content="+nxGUDJ4QpAZ5l9Bsjdi102tLVC21AIh5d1Nl23908vVuFHs34="/&gt;
</code></pre></li>
</ul>

<p>Desde las aplicaciones de alta de cada buscador, podemos realizar la gestión.</p>

<h5> URL amigables</h5>

<p><strong>Las URLs de nuestra página web deben de ser amigables</strong>, y tienen que estar compuestas por palabras clave separadas por guiones. El objetivo es que estas URL sean entendibles de forma sencilla, tanto por los buscadores como por los usuarios del web.</p>

<p>Esto sería un ejemplo de URL no amigable:</p>

<blockquote>
  <p>https:///www.daguilar.dev/?post=2934</p>
</blockquote>

<p>Un ejemplo de URL amigable:</p>

<blockquote>
  <p>https:///www.daguilar.dev/posts/aprender-programacion-php</p>
</blockquote>

<p>Este tipo de URL son semánticas y aportan beneficios tanto al usuario (a través de la experiencia de usuario) como al posicionamiento web, mediante el SEO.</p>

<blockquote>
  <p>Lo recomendable es usar guiones para separar las palabras, y nunca guiones bajos u otro símbolo.</p>
</blockquote>

<p>Yo mismo rompo este consejo en este blog: utilizo guiones bajos en el título... pero es por una cuestión técnica, y no tengo más remedio que hacerlo.</p>

<h5>Etiquetas de encabezado</h5>

<p>Es importante utilizar una correcta estructura mediante etiquetas: <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>,...Esta estructuración tiene dos finalidades: ayudar al lector a seguir mejor el texto y la más importante desde el punto de vista <strong>SEO</strong>, posicionar adecuadamente la web.</p>

<p><strong>Estas etiquetas suelen captar la atención de los buscadores</strong>, ya que suelen ser la primera parte que suelen capturar, y a partir de ella, suelen hacerse una idea sobre el contenido del web.</p>

<p>La etiqueta <code>&lt;h1&gt;</code> debe resumir el contenido de la página web de forma similar a como hacía la etiqueta <code>&lt;title&gt;</code>, pero lo ideal es que sea diferente. También <strong>es importante que cada página sólo tenga una etiqueta <code>&lt;h1&gt;</code></strong>, o podrían penalizarnos.</p>

<blockquote>
  <p>Es muy importante añadir las palabras clave que definan nuestro contenido en la etiqueta <code>&lt;h1&gt;</code>.</p>
</blockquote>

<p>Es lógico pensar que la etiqueta <code>&lt;h1&gt;</code> debe de aparecer antes que el resto de etiquetas, por lo tanto, es primordial que aparezca al principio del documento (a modo de título). Otro aspecto importante es que el título sea corto para que las palabras clave resalten más entre el texto.</p>

<blockquote>
  <p>Es importante no utilizar imágenes como titulares, tal y como hacen algunas webs.</p>
</blockquote>

<p>Lo siguiente sería ir añadiendo etiquetas desde <code>&lt;h2&gt;</code> hasta <code>&lt;h6&gt;</code> (siempre que sea necesario). Es aquí donde vamos a ir <strong>indicando a los buscadores las diferentes subsecciones de nuestro web, generando así una gerarquía de contenidos</strong>.</p>

<p>A diferencia de la etiqueta <code>&lt;h1&gt;</code> el resto de etiquetas si que pueden repetirse (tantas veces como sea necesario).</p>

<p>En estas etiquetas es <strong>importante ir añadiendo palabras clave que tengan relación con el texto que vamos a desarrollar</strong>. No olvidemos que estos encabezados son como títulos que anuncian el contenido que vamos a desarrollar a continuación, deben de describir el texto que estamos a punto de encontrarnos.</p>

<p>Parece haber bastante consenso en que <strong>las etiquetas que realmente pueden influir en el posicionamiento son: <code>&lt;h1&gt;</code> y <code>&lt;h2&gt;</code></strong>, y que el resto tienen un peso menor, en cualquier caso, yo personalmente sigo utilizándolas para dar cierta estructura a los contenido, ademas, tengo el convencimiento de que siempre aportarán algo.</p>

<h5>Contenido del web</h5>

<p>Es muy importante que las primeras 10 o 15 palabras de tu web describan con claridad el contenido que el usuario se va a encontrar, porque parece claro que <strong>estas primeras palabras van a ser las que nos consigan visitas</strong>. Es una cuestión de atención, si el usuario no es capatado desde el principio no vas a conseguir que se quede en el web y siga consumiendo tus contenidos.</p>

<p>Existe cierto convencimiento de que <strong>el texto normal de la página web es uno de los factores principales para promocionar un web</strong>, ya que es lo que aporta la calidad del contenido que al principio se comentaba, a parte de esto, <strong>un buen contenido siempre va a atraer enlaces naturales</strong>, que van a mejorar el posicionamiento (hablaremos de esto más adelante).</p>

<p><strong>Si utilizamos imágenes, es recomendado utilizar el atributo <code>alt</code> para añadir información sobre ella</strong>, e intenta que esta información sea relevante. También es importante que el tamaño de la imagen y el formato, sean los adecuados (recordemos que la velocidad de un web es importante).</p>

<p><strong>No hay que olvidar, que también existe un posicionamiento para imágenes</strong>, y que a partir de la búsqueda de una imagen se puede terminar llegando a una página web, por lo que es importante cuidar este aspecto a la hora de definir el texto que acompaña a la imagen.</p>

<p>Utiliza enlaces internos dentro de tu propio web utilizando palabras clave de forma que podamos vincular artículos entre sí, además de añadir semántica a los enlaces mediante palabras clave (sin obsesionarse, ya que igual no funciona demasiado bien...).</p>

<p>Otra técnica bastante comentada, es la de <strong>enlazar a contenidos de calidad desde tu web</strong>, eso sí, siempre y cuando sean relevantes respeccto tu contenido propio, por ejemplo, si estás hablando de posicionamiento web, podrías destacar o recomendar un web que te parece interesante.</p>

<h5>Palabras clave</h5>

<p>Ya vimos que las palabras clave en las metaetiquetas ya no son relevantes, pero si que lo son en el contenido del web y en los enlaces a nuestro contenido, por tanto, es importante pararse un poco en este punto.</p>

<p><strong>Las palabras clave se han utilizado tradicionalmente como elementos de una búsqueda</strong>, es decir, se generaba el siguiente proceso:</p>

<ol>
<li>El usuario introduce en el buscador un texto.</li>
<li>El motor del buscador obtiene palabras clave del texto introducido en el formulario.</li>
<li>Busca resultados en función de las palabras clave.</li>
<li>Ordena los resultados en función de un algoritmo.</li>
</ol>

<p>El problema es que actualmente <strong>ya no se utilizan las palabras claves por si mismas</strong>, sino que se ha introducido el concepto de <em>"intención de búsqueda"</em>. **¿Qué es la <em>intención de búsqueda</em>?
**</p>

<blockquote>
  <p>Las palabras clave de una búsqueda ya no son un factor tan importante, el verdadero valor se encuentra en lo que el usuario ha querido buscar y su contexto, y no las palabras en sí.</p>
</blockquote>

<p>Por ejemplo, <strong>Google</strong> ahora es capaz de entender que <em>"hacer deporte frecuentemente"</em> o <em>"salir a correr a diario"</em> es lo mismo, ambas busquedas reflejan una situación similar. Esto puede llevar a situaciones complejas en las que un mismo web compite entre sí usando palabras clave diferentes, pero que significan los mismo.</p>

<p>Si hacemos esto (dos páginas del blog compitiendo entre sí con dos palabras clave que significan lo mismo), ambas páginas perderán el posicionamiento y estaremos cayendo en <strong>canibalización de palabras clave en el SEO</strong>, otro concepto interesante:</p>

<blockquote>
  <p>La canibalización de palabras clave sucede cuando varias páginas de un mismo sitio web, compiten por la misma intención de búsqueda.</p>
</blockquote>

<p>Para planificar las palabras clave de nuestro web, lo normal es utilizar un planificador de palabras clave o una herramienta SEO:</p>

<ul>
<li><a href="https://ads.google.com/intl/es_es/home/tools/keyword-planner/" class="link-out">https://ads.google.com/intl/es_es/home/tools/keyword-planner/</a></li>
<li><a href="https://trends.google.com/trends/?geo=ES" class="link-out">https://trends.google.com/trends/?geo=ES</a></li>
<li><a href="https://answerthepublic.com/" class="link-out">https://answerthepublic.com/</a></li>
<li><a href="https://www.keywordtooldominator.com/" class="link-out">https://www.keywordtooldominator.com/</a></li>
</ul>

<p>Y por supuesto, <strong>es mejor centrarse en palabras con menor volumen de visitas</strong>, pero que su <strong>intención de búsqueda</strong> sea similar a las palabras clave de mayor volumen en las búsquedas.</p>

<p>Y como siempre volvemos a lo mismo, intenta que las palabras clave que integran tu contenido sean más específicas (y por tanto menos genéricas) y que marquen la diferencia con tus competidores.</p>

<h4>2.2.1 SEO off-page</h4>

<blockquote>
  <p>El SEO off-page, son todas las técnicas para el posicionamiento en buscadores que se ejecutan fuera de nuestra web</p>
</blockquote>

<p>Por ejemplo:</p>

<pre><code>- Email marketing.
- Gestión de redes sociales.
- Guest blogging
- Obtención de enlaces externos (backlinks).
</code></pre>

<p>Estas técnicas están enfocadas a aumentar la autoridad de tu sitio, es decir, la autoridad que <strong>Google</strong> otorga a los sitios en base a diversos factores.</p>

<blockquote>
  <p><strong>La atoridad de dominio</strong>, esta es la importancia que da <strong>Google</strong> a tu dominio en relación al resto de dominios de internet.</p>
</blockquote>

<h5>2.2.1.1 Email marketing</h5>

<blockquote>
  <p>El email marketing</p>
</blockquote>

<p><strong>La utilización de boletines por correo electrónico es una buena técnica para conseguir aumentar el tráfico</strong>. El boletín debe de tener un diseño atractivo, contener información interesante, y sobre todo, que llame la atención del destinatario.</p>

<p>Existen numerosas plantillas con formato para hacer esto (muchas de ellas optimizadas para SEO): ¡usalas!, no reinventes la rueda. Adaptalas a tus necesidades y empieza tu propio boletín de noticias. Importante: <strong>intenta que el contenido de tu boletín interactue con tu página web</strong>.</p>

<p>Ofrece contenidos extra para suscriptores, por ejemplo, <strong>ofrece un ebook sobre un tema interesante al suscribirte al boletín</strong>.</p>

<p><strong>Recuerda que tus suscriptores han aceptado recibir un boletín informativo por tu parte, lo que significa que ya está interesado en tus contenidos... no los pierdas.</strong></p>

<h5>2.2.1.2 Gestión de redes sociales y foros</h5>

<p><strong>Se activo en redes sociales, y comparte contenido interesante en ellas</strong>. Por ejemplo, es recomendable compartir contenido novedoso sobre el sector en el que te mueves. Por ejemplo, en mi caso suelo estar compartiendo información sobre las nuevas versiones y novedades de <strong>PHP</strong> y <strong>Laravel</strong>...</p>

<p><strong>No olvides Youtube</strong>, es una plataforma con millones de usuarios y donde puedes interactuar con muchísima gente. Si tienes posibilidad de crear contenido para esta red social, hazlo.</p>

<p><strong>Los foros son también un lugar importante para interactuar con usuarios</strong>, busca categorias afines a tu negocio e interacciona y comparte información en ellos. Por supuesto, cada vez que hagas esto comparte en redes sociales que has participado en tal foro, etc.</p>

<h5>2.2.1.3 Guest blogging</h5>

<p>Una buena forma de conseguir enlaces hacia tu sitio, <strong>es participar en otros blogs como invitado</strong>. Busca blogs de temática similar y haz una propuesta de colaboración, y sobre todo, prepara un gran artículo. Es importante que sea de calidad y que los visitantes del blog vean que si te siguen van a obtener contenidos de calidad.</p>

<p><strong>Lo ideal sería encontrar blogs con una buena autoridad y hablar de contenidos novedosos</strong>, y sobre todo, no tengas miedo en contactar con otros blogs. Lo peor que pueden decirte es que no, y en este caso, tampoco pasa nada... lo vuelves a intentar con otro. Eso si, estable contacto con otros blogs de forma educada y amigable, y no seas insistente. Si te dicen que no, aceptalo y no dejalo estar.</p>

<h5>2.2.1.4 ¿Cómo conseguir backlinks?</h5>

<blockquote>
  <p>Un backlink es un enlace hacia tu sitio web, desde un sitio externo, es decir, las referencias hacia tu web desde otras webs.</p>
</blockquote>

<p>Es importante que estos enlaces hacia tu sitio sean de webs con contenido similar, y a ser posible, con una buena autoridad. Vamos a ser sinceros, conseguir que un web relevante te enlace no es nada fácil, pero hay varias formas de conseguirlo:</p>

<ul>
<li>Cuando tienes contenidos originales y de calidad, suelen aparecer backlinks naturales hacia tu web.</li>
<li>Puedes colocar enlaces desde los perfiles de tus redes sociales hacia tu web. Estos enlaces no siempre son válidos.</li>
<li>Igualmente puedes hacer lo mismo desde foros. El resultado es el mismo, algunos enlaces serán válidos y otros no... o incluso ninguno válido.</li>
<li>Directorios de calidad... supongo que en función de cada temática, será posible encontrar algo decente. Personalmente no soy muy optimista.</li>
<li>Agregadores de noticias o sociales. Existen diversos agregadores de noticias, como por ejemplo <a href="https://www.meneame.net/" class="link-out">https://www.meneame.net/</a>. Pueden llegar a ser útliles. Ten cuidado con hacer spam, no les gusta que solo envies contenido tuyo...</li>
<li>Si observas algún error en alguna web de temática similar a la tuya o que han plagiado su contenido, no dudes en contactar con su dueño para informarle del problema. Quizas sea generoso y hable de tu web.</li>
<li>Mira los backlinks de tu competencia... igual puedes ver como consiguiero ellos el enlace.</li>
</ul>

<blockquote>
  <p>Referring domain: cuando un web añade un backlink hacia tu sitio, ese web es considerado un dominio de referencia, independientemente del número de enlaces que apunten hacia tu web (podemos tener un referring domain con cinco backlinks).</p>
</blockquote>

<h2>2.3 Mira que hacen tus competidores.</h2>

<p>A veces observando que hacen los demás puedes mejorar lo que haces tu. Aprende de ellos.</p>

<p>Como punto y final, recomiendo leer todo lo que escriben en <a href="https://www.ciudadano2cero.com" class="link-out">Ciudadano 2.0</a>, que me ha parecido increible la cantidad de información que ofrecen y lo bien que lo cuentan.</p>

<p><strong>Recopilación de fuentes que he usado para documentarme:</strong></p>

<ul>
<li><a href="https://www.maunamedia.com/contenido-de-calidad-seo/" class="link-out">https://www.maunamedia.com/contenido-de-calidad-seo/</a></li>
<li><a href="https://www.ciudadano2cero.com/como-aumentar-visitas-pagina-web/" class="link-out">https://www.ciudadano2cero.com/como-aumentar-visitas-pagina-web/</a></li>
<li><a href="https://www.oberlo.es/blog/como-aumentar-trafico-web" class="link-out">https://www.oberlo.es/blog/como-aumentar-trafico-web</a></li>
<li><a href="https://www.javiercarmonabenitez.es/contenido-de-calidad-que-posiciona/" class="link-out">https://www.javiercarmonabenitez.es/contenido-de-calidad-que-posiciona/</a></li>
<li><a href="https://arturogarcia.com/aumentar-visitas-web/" class="link-out">https://arturogarcia.com/aumentar-visitas-web/</a></li>
<li><a href="https://blog.seoadsformula.com/aumentar-las-visitas-web-rapido-gratis-seo-fb-ads/" class="link-out">https://blog.seoadsformula.com/aumentar-las-visitas-web-rapido-gratis-seo-fb-ads/</a></li>
<li><a href="https://es.semrush.com/blog/checklist-para-seo/" class="link-out">https://es.semrush.com/blog/checklist-para-seo/</a></li>
<li><a href="https://domains.google/intl/es_es/learn/how-to-get-people-to-visit-your-website/" class="link-out">https://domains.google/intl/es_es/learn/how-to-get-people-to-visit-your-website/</a></li>
<li><a href="https://rubenmanez.com/aumentar-trafico-web-visitas/" class="link-out">https://rubenmanez.com/aumentar-trafico-web-visitas/</a></li>
<li><a href="https://www.ttandem.com/blog/5-claves-para-conseguir-una-experiencia-de-usuario-positiva-en-tu-sitio-web/" class="link-out">https://www.ttandem.com/blog/5-claves-para-conseguir-una-experiencia-de-usuario-positiva-en-tu-sitio-web/</a></li>
<li><a href="https://aulacm.com/aumentar-trafico-web-visitas/" class="link-out">https://aulacm.com/aumentar-trafico-web-visitas/</a></li>
<li><a href="https://developers.google.com/search/docs/advanced/crawling/overview" class="link-out">https://developers.google.com/search/docs/advanced/crawling/overview</a></li>
<li><a href="https://kinsta.com/es/blog/envio-sitio-web-motores-busqueda/" class="link-out">https://kinsta.com/es/blog/envio-sitio-web-motores-busqueda/</a></li>
<li><a href="https://es.godaddy.com/blog/que-es-posicionamiento-seo/" class="link-out">https://es.godaddy.com/blog/que-es-posicionamiento-seo/</a></li>
<li><a href="https://miposicionamientoweb.es/guia-seo-para-principiantes" class="link-out">https://miposicionamientoweb.es/guia-seo-para-principiantes</a></li>
<li><a href="https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=es" class="link-out">https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=es</a></li>
<li><a href="https://www.doblemente.com/que-meta-tags-debo-colocar-para-posicionar-mi-web/" class="link-out">https://www.doblemente.com/que-meta-tags-debo-colocar-para-posicionar-mi-web/</a></li>
<li><a href="https://www.seoalcuadrado.es/seo-h1-h2-y-h3-etiquetas-de-encabezado/" class="link-out">https://www.seoalcuadrado.es/seo-h1-h2-y-h3-etiquetas-de-encabezado/</a></li>
<li><a href="https://www.impress-group.com/como-utilizar-correctamente-las-etiquetas-de-encabezado-de-html/" class="link-out">https://www.impress-group.com/como-utilizar-correctamente-las-etiquetas-de-encabezado-de-html/</a></li>
<li><a href="https://www.rdstation.com/es/blog/url-amigable/" class="link-out">https://www.rdstation.com/es/blog/url-amigable/</a></li>
<li><a href="https://es.semrush.com/blog/seo-para-imagenes/" class="link-out">https://es.semrush.com/blog/seo-para-imagenes/</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Cinco claves para ser mejor programador. Principios SOLID]]></title>
                <link>https://daguilar.dev/blog/programacion_5_consejos_para_ser_un_gran_programador</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/programacion_5_consejos_para_ser_un_gran_programador</guid>
                <description><![CDATA[Principales consejos para ser un gran programador. Todo ello aplicando los principios SOLID, consiguiendo código más eficaz, sencillo de mantener y fácil de ampliar.]]></description>
                <content:encoded><![CDATA[<p>Una de las principales herramientas para hacer código de mayor calidad, más fácil de mantener, y sobre todo, que te permita crecer como programador, es la de <strong>implementar en nuestro código los principios SOLID</strong>:</p>

<ul>
<li><strong>S</strong>. <em>Single responsibility principle</em>: Principio de responsabilidad única.</li>
<li><strong>O</strong>. <em>Open-Closed principle</em>: Principio abierto-cerrado.</li>
<li><strong>L</strong>. <em>Liskov substitution principle</em>: Principio de sustitución de Liskov.</li>
<li><strong>I</strong>. <em>Interface segregation principle</em>: Principio de segregación de interfaces.</li>
<li><strong>D</strong>. <em>Dependency Inversion Principle</em>: Principio de inversión de dependiencia.</li>
</ul>

<p>Antes de empezar, es importante indicar que los ejemplos que se van a utilizar, están basados en PHP y LARAVEL. Veamos estos principios uno a uno, y con ejemplos:</p>

<h2>1) <strong>Single responsibility</strong>.</h2>

<p>Cada clase debe de tener una sola función o responsabilidad. Veamos un simple controlador de <strong>Laravel</strong>:</p>

<pre><code class="language-php">class PostController extends Controller
{
    public function index() {
        // Cargamos los posts de la base de datos
        $posts = DB::table('posts')
            -&gt;latest()
            -&gt;get();

        // Renderizamos la vista y enviamos los posts a ella
        return view('dashboard.posts', compact('posts'));
    }
}
</code></pre>

<p>En este caso, estamos llamando por un lado a la base de datos y por otro lado, generando la vista. Esta clase tiene dos responsabilidades. Lo normal sería que la llamada a la base de datos se hiciera en otra clase, por ejemplo desde el modelo, de forma que nuestra clase quedaría así:</p>

<pre><code class="language-php">class PostController extends Controller
{
    public function index() {
        // Renderizamos la vista y enviamos los posts a ella
        return view('dashboard.posts')
            -&gt;withPosts(Post::allThePosts());
    }
}
</code></pre>

<p>Y nuestro modelo quedaría así:</p>

<pre><code class="language-php">class Post extends Models
{
    public function scopeAllThePosts($query) {
        return $query
            -&gt;latest()
            -&gt;get();
    }
}
</code></pre>

<p>Podemos imaginar que un controlador puede llegar a complicarse mucho más, por ejemplo, con validación. En este caso, sería necesario extraerla a un <code>FormRequest</code> dejando toda la operación fuera del controlador (por ejemplo).</p>

<h2>2) <strong>Open-closed principle</strong>.</h2>

<p>Los objetos deben de estar abiertos a extensión pero cerrados a modificación. Es decir, si queremos añadir funcionalidades nuevas a una clase, debemos hacerlo añadiendo métodos y no modificando la clase. La clase solo debería modificarse para solucionar errores.</p>

<p>En este principio introducimos el concepto de <code>interface</code>, ya que nos va a ayudar a generar una estructura homogenea. El ejemplo típico que se suele utilizar aquí es el del cálculo de las áreas, de diferentes figuras geométicas. Veamos un ejemplo de como no debería hacerse:</p>

<p>Lo que queremos hacer es calcular el area total de una serie de rectángulos. Para ello, definimos la clase rectángulo:</p>

<pre><code class="language-php">class Rectangulo
{
    private $ancho;
    private $alto;

    public function __construct($ancho, $alto) {
        $this-&gt;ancho = $ancho;
        $this-&gt;alto = $alto;
    }
}
</code></pre>

<p>Ahora necesitamos una clase que calcule la suma del area de todos los rectángulos:</p>

<pre><code class="language-php">class CalculoDelArea
{
    public area = 0;

    public function areaTotal(array $rectangulos) {
        foreach($rectangulos as $rectangulo) {
            $this-&gt;area += $rectangulo-&gt;ancho * $rectangulo-&gt;largo;
        }

        return $this-&gt;area;
    }
}
</code></pre>

<p>Pues ya estaría, tenemos una clase que calcula el area total de nuestros rectángulos. El problema biene cuando queremos añadir nuevas figuras geométricas, como cuadrados o circulos... ahora tendríamos que añadir a nuestra clase CalculoDelArea cada uno de estos casos, mediante condicionales:</p>

<pre><code class="language-php">class CalculoDelArea
{
    public area = 0;

    public function areaTotal(array $figuras) {
        foreach($figuras as $figura) {
            // Llegan los condicionales 
            if($figura instanceof Rectangulo) {
                $this-&gt;area += $rectangulo-&gt;ancho * $rectangulo-&gt;largo;
            }

            // Añadimos condicionales para otras formas....
        }

        return $this-&gt;area;
    }
}
</code></pre>

<p>Esto es un desastre si tenemos que empezar a añadir modificaciones cada vez que nos surge una necesidad nueva. Para solucionarlo, vamos a utilizar las <code>interfaces</code>, y cumplir el <strong>Open-closed principle</strong>:</p>

<pre><code class="language-php">// Lo primero es crear una interface, que obligue a las clases a tener un método área
interface Operaciones {
    public function area();
}

// Ahora generamos una clase para cada figura geomética, y que debe implementar la interface
class Rectangulo implements Operaciones
{
    private $ancho;
    private $alto;

    public function __construct($ancho, $alto) {
        $this-&gt;ancho = $ancho;
        $this-&gt;alto = $alto;
    }

    public function area() {
        return $this-&gt;ancho * $this-&gt;alto;
    }
}

// Ahora generamos una para un cuadrado 
class Cuadrado implements Operaciones {

    private $lado;

    public function __construct($lado) {
        $this-&gt;lado = $lado;
    }

    public function area() {
        return $this-&gt;lado * $this-&gt;lado;
    }
}
</code></pre>

<p>Con esta estructura, cada clase de cada figura es la que se ocupa de realizar el cálculo del area, y la clase que realiza la suma, no tiene por qué saber como se realiza dicha operación:</p>

<pre><code class="language-php">class CalculoDelArea {

    protected $figuras;

    public function __construct($figuras = array()) {
        $this-&gt;figuras = $figuras;
    }

    public function sum() {
        $area = [];

        foreach($this-&gt;figuras as $figura) {
            $area[] = $figura-&gt;area();
        }

        return array_sum($area);
    }
}
</code></pre>

<h2>3) <strong>Liskov Substitution Principle</strong>.</h2>

<p>El principio, dice algo así: <em>"Let q(x) be a property provable about objects x of type T. Then q(y) should be provable for objects y of type S, where S is a subtype of T"</em>, que básicamente viene a decir: <em>"Cada clase que hereda de otra puede usarse como su padre sin necesidad de conocer las diferencias entre ellas"</em> <a href="https://es.wikipedia.org/wiki/Principio_de_sustituci%C3%B3n_de_Liskov" class="link-out">wikipedia</a>. Básicamente, podemos decir que al extender una clase padre desde un hijo, nos sobran métodos, o hay métodos que no funcionan con nuestra clase hija. Este principio fue propuesto por <a href="https://es.wikipedia.org/wiki/Barbara_Liskov" class="link-out">Barbara Liskov</a></p>

<p>Volvamos al ejemplo de antes: la clase para calcular el area, y le añadimos un método nuevo:</p>

<pre><code class="language-php">class CalculoDelArea
{
    protected $figuras;

    public function __construct($figuras = array()) {
        $this-&gt;figuras = $figuras;
    }

    public function sum() {
        $area = [];

        foreach($this-&gt;figuras as $figura) {
            $area[] = $figura-&gt;area();
        }

        return array_sum($area);
    }

    public function output()
    {
        return 'La suma total es: ' . $this-&gt;sum();
    }
</code></pre>

<p>Ahora añadimos una nueva clase para calcular el volumen, y para ello vamos a extender la case del <code>CalculoDelArea</code>:</p>

<pre><code class="language-php">class CalculoDelVolumen extends CalculoDelArea
{
    public function __construct($shapes = array())
    {
        parent::__construct($shapes);
    }

    public function sum()
    {
        // Calculoa el volumen... da igual como lo haga
        return $volumen;
    }
}
</code></pre>

<p>Ahora imaginemos que creamos una clase para impimir el resultado:</p>

<pre><code class="language-php">class Resultado {

    protected $operacion;

    // Si cumpliesemo el principio de sustitución de Liskov, daría igual si en vez de CalculoDelVolumen, usamos CalculoDelArea
    public function __construct(CalculoDelVolumen $operacion)
    {
        $this-&gt;operacion = $operacion;
    }

    public function toJson()
    {
        $data = array (
          'sum' =&gt; $this-&gt;operacion-&gt;sum()
        );

        return json_encode($data);
    }
}
</code></pre>

<p><strong>El principio de sustitución de Liskov</strong>, dice que si lo hemos hecho bien, daría igual que usásemos la clase <code>CalculoDelArea</code> o su clase hija <code>CalculoDelVolumen</code>, es decir, cualquier clase hija debería poder ser sustituida por la clase padre. Si se producen errores, entonces no se cumple el <strong>principio de sustitución de Liskov</strong>.</p>

<h2>4) <strong>Interface segretation principle</strong>.</h2>

<p>Una clase nunca debe ser forzada a implementar una <code>interface</code> que no usa, o emplear métodos que no tiene por qué usar. Veamos el típico ejemplo sobre pájaros y perros. Lo primero es crear una <code>interface</code> con las acciones que pueden hacer:</p>

<pre><code class="language-php">interface Comportamiento
{
    public function correr();
    public function volar();
}
</code></pre>

<p>Ahora creemos la clase <code>Perro()</code>:</p>

<pre><code class="language-php">class Perro implements Comportamiento
{
    public function correr()
    {
        return 'perro corriendo';
    }

    public function volar()
    {
        null;
    }
}
</code></pre>

<p>El método <code>volar()</code>, están rompiendo el principio actual, ya que está obligando a la clase <code>Perro()</code> a tener un método que no usa o necesita. La solución es separar las <code>interfaces</code>:</p>

<pre><code class="language-php">interface ComportamientoTerrestre
{
    public function correr();
}

interface ComportamientoAereo
{
    public function volar();
}

class Perro implements ComportamientoTerrestre
{
    public function correr()
    {
        return 'perro corriendo';
    }
}

class Pajaro implements ComportamientoAereo
{
    public function volar()
    {
        return 'pajaro volando';
    }
}
</code></pre>

<h2>5) <strong>Dependency inversion principle</strong>.</h2>

<p>Los módulos de alto nivel no deberían depender de los de bajo nivel. Ambos deberían depender de abstracciones. Las abstracciones no deberían depender de los detalles. Son los detalles los que deberían depender de abstracciones. <a href="https://es.wikipedia.org/wiki/Robert_C._Martin">Robert C. Martin</a>[.link-out].</p>

<p>El ejemplo que suele ponerse es el de un proceso de pago, donde se pueden utilizar diversos métodos de pago, pero vayamos paso por paso. Primero vamos a hacerlo directamente, definiendo un método de pago:</p>

<pre><code class="language-php">class PayPal 
{
    public function hacerPago()
    {
        return 'hacemos el pago con paypal...';
    }
}
</code></pre>

<p>Y ahora la clase que los llama, en este caso a la clase <code>Paypal()</code>:</p>

<pre><code class="language-php">class Pago
{
    protected $metodoDePago;

    public function __construct(Paypal $paypal)
    {
        $this-&gt;metodoDePago = $paypal;
    }

    public function pagar()
    {
        $this-&gt;metodoDePago-&gt;hacerPago();
    }
}
</code></pre>

<p>Y ahora realizamos el pago:</p>

<pre><code class="language-php">$operacion = new Pago(
    new Paypal();
);

$operation-&gt;pagar();
</code></pre>

<p>El problema radica en que la clase <code>Pago()</code> no tiene por qué saber que método de pago vamos a usar, y por tanto, debe de funcionar con cualquiera. Es aquí donde vienen en nuestra ayuda las <code>interfaces</code>, permitiendo que podamos utilizar abstracciones. Lo primero será crear la <code>interface</code> para hacer el pago:</p>

<pre><code class="language-php">interface MetodoDePagoInterface
{
    public function hacerPago();
}
</code></pre>

<p>Ahora los métodos de pago deben implementarla:</p>

<pre><code class="language-php">class PayPal implements MetodoDePagoInterface
{
    public function hacerPago()
    {
        return 'hacemos el pago con paypal...';
    }
}

class CreditCard implements MetodoDePagoInterface
{
    public function hacerPago()
    {
        return 'hacemos el pago con tarjeta de crédito...';
    }
}
</code></pre>

<p>Y por último hacemos que la clase <code>Pago()</code> llame directamente a la <code>interface</code> en vez de al método de pago:</p>

<pre><code class="language-php">class Pago
{
    protected $metodoDePago;

    public function __construct(MetodoDePagoInterface $metodo)
    {
        $this-&gt;metodoDePago = $metodo;
    }

    public function pagar()
    {
        $this-&gt;metodoDePago-&gt;hacerPago();
    }
}
</code></pre>

<p>Y ahora ejecutamos el código:</p>

<pre><code class="language-php">$operacion = new Pago(
    new Paypal();
);

$operation-&gt;pagar();
</code></pre>

<p>Y podemos cambiar el sistema de pago:</p>

<pre><code class="language-php">$operacion = new Pago(
    new CreditCard();
);

$operation-&gt;pagar();
</code></pre>

<p>Implementando todo esto en tu código vas a conseguir proyectos más optimizados, sencillos de mantener y facil de ampliar. Y tal y como he comentado antes, serás <strong>un mejor programador</strong>.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Novedades de PHP 8.1]]></title>
                <link>https://daguilar.dev/blog/php_novedades_de_php_81</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/php_novedades_de_php_81</guid>
                <description><![CDATA[Actualizando a PHP 8.1. Con todas las novedades y mejoras del mejor lenguaje de programación del momento.]]></description>
                <content:encoded><![CDATA[<p>Soy consciente de que llego un poco tarde, sobre todo porque en pocos meses sale la versión 8.2, pero más vale tarde que nunca.</p>

<p>1) Lo primero de todo, se han producido mejoras en <em>opchache</em> que han generado una <strong>ligera mejora en el rendimiento</strong>, respecto a la versión de PHP 7.4.</p>

<p>2) <strong>Una de las funcionalidades más esperadas eran las de <code>Emumns</code>, que <code>frameworks</code> como **Laravel</strong> ya han integrado en su última versión (la 9). Veamos un ejemplo:</p>

<pre><code class="language-php">enum Status {
  case Pending;
  case Active;
  case Archived;
}

function cambioDeEstado(Status $status): void {
    ...
}
</code></pre>

<p>3) El tipo <em>never</em> para los métodos. Nos permite definir un retorno tipo <code>void</code>, pero cuando queremos que el programa no continue más. Por ejemplo, puede ser útil para las redirecciones o para métodos que interrumpan la ejecuación:</p>

<pre><code class="language-php">function stop(): never
{    
    // Detenemos los procesos

    exit;
}
</code></pre>

<p>4) <strong>Fibers</strong>. Consiste en gestionar los threads o hilos en PHP. Creo que es algo que no voy a utilizar mucho, por lo que he leido, algunos frameworks o sistemas complejos son los principales beneficiarios de esta funcionalidad.</p>

<p>5) <strong>Propiedad readonly</strong>. Algo que he utilizado mucho con <strong>TypeSCript</strong>, y que <strong>PHP</strong> aún no había implementado. Básicamente, inicializas una propiedad, y una vez hecho esta, su valor no puede cambiar:</p>

<pre><code class="language-php">class MyClass {
    public readonly string $attribute;

    public function __construct(string $attribute) {
        $this-&gt;attribute = $attribute;
    }
}
</code></pre>

<p>6) Lo mismo con las <strong>constantes finales</strong>:</p>

<pre><code class="language-php">class MyClass1 {
    final public const VALUE = 'hello';
}

// Dará error... no se puede cambiar
class MyClass2 extends MyClass1 {
    final public const VALUE = 'hello world';
}
</code></pre>

<p>7) <strong>Mejora en la unión de arrays</strong>, facilitando las operaciones entre <code>arrays</code>. Desde ahora, el funcionamiento del "<em>array unpacking</em>" es parecido al de <code>array_merge()</code>:</p>

<pre><code class="language-php">$array_1 = ['elemento 1', 'elemento 2'];
$array_2 = ['elemento 3', 'elemento 4'];
</code></pre>

<p>Lo normal para unir esto arrays, y añadirle otro más, sería usar <code>array_merge()</code>:</p>

<pre><code class="language-php">$array_3 = array_merge($array_1, $array_2, ['elemento 5']);
var_dump($array_3)

// Devolvería 
// ['elemento 1', 'elemento 2', 'elemento 3', 'elemento 4', 'elemento 5']
</code></pre>

<p>Ahora, podemos hacerlo directamente:</p>

<pre><code class="language-php">$array_4 = [...$array_1, ...$array_2, ...['elemento 5']];
var_dump($array_4)

// Devolvería 
// ['elemento 1', 'elemento 2', 'elemento 3', 'elemento 4', 'elemento 5']
</code></pre>

<p><strong>Desde PHP 7.4 está implmentada esta funcionalidad</strong>, pero solo funcionaba con números.</p>

<p>8) <strong>Nuevos algoritmos de Hashing</strong>. Desde ahora se da soporte para <code>xxHash</code> y <code>MurMurHash3</code>. Parecen ser algoritmos muchos más rápidos y seguros...</p>

<p>9) <strong>Nueva función <code>array_is_list()</code></strong>. Sirve para determinar si un array es una lista perfecta, incluyendo claves y valores. Es decir, si usamos sólo claves, determinará si la sucesión es correcta. Veamos algunos ejemplos:</p>

<pre><code class="language-php">array_is_list([1, 2, 3]); // Es correcto, se sigue el orden correlativo, y no importa que no empiece por 0, ya que son valores.
array_is_list([1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3]); // En este caso daría FALSE, porque la clave debe empezar en 0, y no en 1.
array_is_list([0 =&gt; 1, 1 =&gt; 2, 2 =&gt; 'hello']); // Es correcto, las claves son correlativas y empiezan en 0, los valores da igual... son valores.
array_is_list(['a', 1 =&gt; 'b', 'c']); // Solo hay una clave, en segunda posición y con el valor 1, que es correcto, por lo que todo correcto.
</code></pre>

<p>Existen muchas más novedades que pueden consultarlas aquí:</p>

<ul>
<li><a href="https://www.php.net/releases/8.1/es.php" class="link-out">Nuevo en php</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Programando con Python, Java y Angular.]]></title>
                <link>https://daguilar.dev/blog/programacion_programando_con_pyton_java_y_angular</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/programacion_programando_con_pyton_java_y_angular</guid>
                <description><![CDATA[Me siento cómodo trabajando con PHP y Laravel, ahora es el momento de enfrentarse a Java, Python y Angular. Mi experiencia empezando con estos lenguajes de programación.]]></description>
                <content:encoded><![CDATA[<p>Toda mi carrera como programador, la he basado en el <strong>desarrollo con PHP</strong>, centrándome en los últimos años en el <strong>desarrollo con Laravel</strong>. En este artículo voy a hablar de como ha sido la experiencia de salirse de la zona de confort y enfrentarse a nuevos retos, con nuevos lenguajes de programación.</p>

<h2>Python</h2>

<p>Hace cosa de un año, necesité integrar un pequeño script en <strong>Phyton</strong> en un proyecto Laravel. Decidí que era un buen momento para aprender a programar en <strong>Python</strong>, y decidí tomarme dos semanas de tiempo para sumergirme en la experiencia. La verdad es que solo puedo hablar cosas buenas de <strong>Phyton</strong>. Me pareció un lenguaje muy intuitivo y sencillo, sobre todo si ya dispones de una buena base de programación orientada a objetos. En cualquier caso, es un lenguaje al que mantengo vigilado y al que espero poder volver pronto.</p>

<p>Después de aquello, surgió la oportunidad de trabajar en una empresa multinacional del mundo de la programación. Una de esas empresas que aparecen en las primeras posiciones en los rankings de empresas en las que trabajar. Me pareció una experiencia muy interesante, y encima me ofrecieron la opción de participar en dos <em>Bootcamps</em>, uno basado en <strong>Java</strong> y otro en <strong>Angular</strong>. No había trabajado nunca con estos lenguajes, y me ofrecieron formación durante la jornada laboral... lo cual me parecío genial.</p>

<h2>Java</h2>

<p>Empecemos por <strong>Java</strong>... no se ha convertido en mi lenguaje favorito. Quizas el problema es que el ecosistema de desarrollo, en este caso <strong>Spring</strong> y <strong>Spring boot</strong>, no eran demasiado intuitivos. Tengo la impresión de que al venir de <strong>Laravel</strong>, cualquier otro <em>framework</em> siempre va a parecer más complejo y sobre todo, poco claro. Parecía interminable la cantidad de cosas que había que configurar, que si archivos <code>XML</code>, que si las librerías, las anotaciones, los <code>getter</code> y <code>setters</code>, y lo complejo que es todo el tema de gestión de modelos y bases de datos...</p>

<p>En resumen, he aprendido a gestionar el <em>backend</em> de un servicio mediante <strong>Java</strong>, pero no es algo que escogería de forma voluntaria como primera opción para un proyecto. A modo de anécdota, pregunté en la empresa por qué se optaba siempre por <strong>Java</strong> para el <em>backend</em>, y al final la respuesta era: <em>"es lo que pide el cliente"</em>...</p>

<h2>Angular</h2>

<p>Angular me pareció más interesante. Venía de trabajar con <strong>VueJS</strong>, y al fin de cuentas, para mi fue más asequible que <strong>Java</strong>. Lo primero que me llamó la atención fue que utilizara <strong>TypScript</strong>. Nunca lo había usado, y admito que fue un gran descubrimiento. Una vez termine el <em>Bootcamp</em> me pasé cerca de cuatro meses desarrollando una libería en <strong>TypeScript</strong> desde cero, para utilizarla con <strong>Angular</strong>, y admito que fue una experiencia genial, y sobre todo, aprendí muchísimo.</p>

<p>En cuanto a <strong>Angular</strong>, no terminó de gustarme del todo, sobre todo por lo encorsetado que está... intentar generar estructuras dependientes unas de otras, era una pesadilla, y básicamente se limitaba a clase padre y clase hijo, y como vincularlas entre sí. Cuando querías hacer algo más complejo, tenías que buscarte la vida para implementar algo parecido a lo que tenías en mente... pero sin terminar de conseguirlo...</p>

<p>En general, es un buen <strong>framework</strong>, pero creo que <strong>React</strong> es mucho mejor, incluso <strong>VueJS</strong> es mucho mejor si sólo tenemos que gestionar el <em>front-end</em>.</p>

<p>Como punto final, decir que la experiencia de haber trabajado en una empresa importate del sector, ha sido en general muy positiva, y me he llevado muchas enseñanzas importantes, sobre todo, en cuanto a trabajo en equipo, y lo complejo que es a veces gestionar un proyecto. Por ejemplo, en uno de los proyectos que trabajé, mi equipo sólo trabajaba con <strong>Angular</strong> (si, yo trabajando toda la vida en <em>back-end</em>, termine en <em>front-end</em>), y no teníamos acceso al <em>back-end</em>, por lo que a veces era casi más complicado intentar adivinar como funcionaba un sistema que añadir la funcionalidad que había pedido el cliente... En fin, cosas que pasan cuando se divide el trabajo en equipos.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Novedades en Laravel 9]]></title>
                <link>https://daguilar.dev/blog/laravel_novedades-en-laravel-9</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_novedades-en-laravel-9</guid>
                <description><![CDATA[Todas las novedades del framework Laravel, en la nueva versión 9. Todo lo nuevo que viene en el Framework PHP, explicado en profundidad y con muchísimas nuevas características.]]></description>
                <content:encoded><![CDATA[<p><strong>Laravel</strong> es probablemente el <strong>Framework PHP</strong> más utilizado del momento, y cada vez que sale una nueva versión, revoluciona un poco a la comunidad de desarrolladores, y no es para menos, ya que las decisiones que se tomen en torno a su desarrollo, va a afectar directamente a todos los que desarrollamos proyectos mediante este Framework.</p>

<p>Actualmente, <strong>Laravel</strong> sigue un ciclo de actualizaciones anual (en cuanto a versiones principales), por lo que es previsible que cada año, <strong>en torno a Febrero, se libere una nueva versión</strong>. En cuanto a versiones menores, lo normal es que se actualice cada semana, corrigiendo errores, actualizando packages, etc...</p>

<p>Empecemos por las novedades de esta nueva actualización:</p>

<p>1) <strong>Laravel ahora requiere php 8</strong> como versión mínima para funcionar, modernizando considerablemente el funcionamiento interno del framework, utilizando las nuevas características como la compilación JIT, o la nueva sistaxis de los constructores,...</p>

<p>2) Se ha sustituido <strong>Swift Mailer</strong> (la librería usada para enviar emails por parte de Laravel desde los primeros tiempos), por <strong>Symfony Mailer</strong>.</p>

<p>3) Migraciones anónimas. A partir de ahora (realmente desde la versión 8.37) Laravel puede realizar migraciones anónimas, evitando así el problema de migraciones con el mismo nombre, que puedan colisionar entre sí:</p>

<pre><code class="language-php">&lt;?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration {
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::table('mi_tabla', function (Blueprint $table)
        {
            $table-&gt;string('name')-&gt;nullable();
        });
    }
};
</code></pre>

<p>4) Nueva forma de añadir rutas agrupadas en los controladores:</p>

<pre><code class="language-php">Route::controller(PhotoController::class)
    -&gt;group(function () {
        Route::get('/photo/{id}', 'show');
        Route::post('/photo', 'store');
    });
</code></pre>

<p>Teniendo un mayor control sobre las rutas que queremos añadir, ya que no siempre vamos a necesitar utilizar <code>Route::resource('photos', PhotoController::class);</code></p>

<p>5) Laravel ha incorporado en su código los retornos de tipos, en sus métodos. En principio esto es solo una mejora interna, pero es importante tenerlo en cuenta:</p>

<pre><code class="language-php">count(): int
getIterator(): Traversable
getSize(): int
jsonSerialize(): array
offsetExists($key): bool
offsetGet($key): mixed
offsetSet($key, $value): void
offsetUnset($key): void
</code></pre>

<p>6) <strong>Cambio en la gestión de los accessors y mutators en los modelos</strong>. Ahora podemos utilizar las mejoras de PHP 8, para gestionar de forma más sencilla estos campos:</p>

<pre><code class="language-php">use Illuminate\Database\Eloquent\Casts\Attribute;

public function username(): Attribute
{
  return new Attribute(
    get: fn ($value) =&gt; strtoupper($value),
    set: fn ($value) =&gt; $this-&gt;field_1 . ' - ' . $this-&gt;field_2,
  );
}
</code></pre>

<p>Ahora podemos usar <code>get</code>y <code>set</code> para definir si es un accessor o un mutator, simplificando considerablemente el código en nuestros modelos.</p>

<p>7) <strong>Nuevas funciones Helper</strong> en Laravel: <code>str()</code> y <code>to_route()</code>.</p>

<p>Empecemos por el primer método, que no es otra cosa que un alias para <code>Str::of($string)</code>, pero que sin lugar a dudas puede ser de gran utilidad:</p>

<pre><code class="language-php">// Sin helper 
Str::of('hola mundo')-&gt;upper();

// Con helper 
str('hola mundo')-&gt;upper();
</code></pre>

<p>El otro helper, nos ayudará con las redirecciones:</p>

<pre><code class="language-php">// Sin helper 
return redirect()-&gt;route('dashboard');

// Con helper 
return to_route('dashboard');
</code></pre>

<p>8) Integración de las busquedas FULLTEXT en la base de datos.</p>

<p>Ahora podemos definir un índice <code>fulltext</code> en nuestra migración:</p>

<pre><code class="language-php">$table-&gt;text('description')-&gt;fullText();
</code></pre>

<p>Para posteriormente utilizarlo en nuestras consultas:</p>

<pre><code class="language-php">DB::table('posts')
    -&gt;whereFullText('description', 'lo que sea')
    -&gt;get();
</code></pre>

<p>9) <strong>Posibilidad de añadir las enumeraciones como <code>cast</code>en nuestros modelos</strong>.</p>

<p>Añadimos la opción en el modelo:</p>

<pre><code class="language-php">use App\Enums\UserStatus;

/**
 * The attributes that should be cast.
 *
 * @var array
 */
protected $casts = [
    'status' =&gt; UserStatus::class,
];
</code></pre>

<p>Y generamos la clase:</p>

<pre><code class="language-php">enum UserStatus: string
{
    case success = 'validate';
    case error = 'no_validate';
}
</code></pre>

<p>10) Siguiendo con los <code>Enums</code>, ahora podemos utilizarlos directamente desde las rutas (<strong>implicit route bindings</strong>):</p>

<pre><code class="language-php">enum Category: string
{
    case Fruits = 'fruits';
    case People = 'people';
}
</code></pre>

<p>Ahora podemos llamar directamente a las categorias:</p>

<pre><code class="language-php">Route::get('/categories/{category}', function (Category $category) {
    return $category-&gt;value;
});
</code></pre>

<p>11) Resolver relaciones entre modelos padre e hijo, directamente desde una ruta:</p>

<pre><code class="language-php">use App\Models\Article;
use App\Models\User;

Route::get('/users/{user}/articles/{article}', function (User $user, Article $article) {
    return $article;
})-&gt;scopeBindings();
</code></pre>

<p>En este caso, directamente mostrará los artículos de el usuario seleccionado.</p>

<p>12) Laravel 9 llega con el nuevo <strong>motor de búsqueda Laravel Scout, que permite realizar búsquedas <code>fullText</code> en Eloquent</strong>. Simplemente hay que añadir un <em>Trait</em> a nuestro modelo para que funcione:</p>

<pre><code class="language-php">namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Laravel\Scout\Searchable;

class Article extends Model
{
    use Searchable;
}
</code></pre>

<p>Este sistema es una alternativa a <strong>Angolia</strong> o <strong>MeiliSearch</strong>, para bases de datos pequeñas o medianas, y con una carga pequeña.</p>

<p>13) <strong>Renderizar Blade directamente desde código</strong>.</p>

<p>Ahora podemos ejecutar directamente blade desde nuestro controlador, o desde una ruta. Para ello, simplemente tendremos que utilizar el método <code>render()</code>.</p>

<pre><code class="language-php">return Blade::render('Hello, {{ $name }}', ['name' =&gt; 'Julian Bashir']);
</code></pre>

<p>14) <strong>Mejoras en Blade</strong>.</p>

<p>Ahora se pueden usar simplificaciones a la hora de generar <code>@slots</code> en los <strong>Componentes</strong> de *<strong>Blade</strong>. Veamos un ejemplo de cómo se hacía hasta ahora:</p>

<pre><code class="language-html">&lt;x-slot name="title"&gt;
    Server Error
&lt;/x-slot&gt;
</code></pre>

<p>Ahora veamos la forma simplificada:</p>

<pre><code class="language-html">&lt;x-slot:title&gt;
    Server Error
&lt;/x-slot&gt;
</code></pre>

<p>También se han integrado dos nuevas directivas, para simplificar los formularios: <code>@checked</code> y <code>@selected</code>. Veamos como funcionan:</p>

<pre><code class="language-html">&lt;input 
    type="checkbox"
    name="active"
    value="active"
    @checked(old('active', $user-&gt;active)) 
/&gt;

&lt;select name="version"&gt;
    @foreach ($product-&gt;versions as $version)
        &lt;option value="{{ $version }}" @selected(old('version') == $version)&gt;
            {{ $version }}
        &lt;/option&gt;
    @endforeach
&lt;/select&gt;
</code></pre>

<p>Personalmente, una implementación que voy a utilizar.</p>

<p>15) Paginación de resultados usando <strong>Bootstrap 5</strong>. En el caso que no utilices <code>tailwindcss</code> ahora puedes integrar también bootstrap. Simplemente hay que definirlo en el <strong>Service Provider</strong>:</p>

<pre><code class="language-php">use Illuminate\Pagination\Paginator;

/**
 * Bootstrap any application services.
 *
 * @return void
 */
public function boot()
{
    Paginator::useBootstrapFive();
}
</code></pre>

<p>Y mucho más, simplemente puedes consultar esta la guia oficial de <a href="https://laravel.com/docs/9.x/releases" class="link-out">Laravel</a></p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Verificar resultados con Laravel Dusk y el navegador]]></title>
                <link>https://daguilar.dev/blog/test_validando-resultados-con-laravel-dusk-sin-consultar-la-base-de-datos</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/test_validando-resultados-con-laravel-dusk-sin-consultar-la-base-de-datos</guid>
                <description><![CDATA[Verificar resultados con Laravel Dusk utilizando técnicas basadas en los resultados que se muestran en el navegador]]></description>
                <content:encoded><![CDATA[<p><strong>Laravel dusk</strong> nos ofrece la opción de verificar si los cambios se han realizado en la base de datos después de realizar el test. El primer paso, sería realizar el test y con ello, los cambios en la base de datos, y puesteriormente, comprobar que los nuevos resultados (o la ausencia de ellos), se encuentran en la base de datos:</p>

<pre><code class="language-php">$this-&gt;assertDatabaseHas('users', [
    'email' =&gt; 'email@example.com',
    ...
]);
</code></pre>

<p>Esta sería una forma de hacerlo, pero me parece que es mejor hacerlo en base a los resultados mostrados en pantalla. Por ejemplo, podemos buscar directamente si el email se muestra en pantalla, o por ejemplo, si mostramos los resultados de la base de datos mediante una tabla, lo que podríamos comprobar es si el resultado se muestra en la fila adecuada, es decir, podemos buscar en la fila X a ver si encontramos el email Y. En este caso, vamos a buscar en la fila <strong>3</strong> el email <strong>email@example.com</strong>.</p>

<pre><code class="language-php">$browser-&gt;with('.table', function ($table) {
    $table-&gt;assertSeeIn(
        'table &gt; tbody &gt; tr:nth-child(3)', 
        'email@example.com'
    );
});
</code></pre>

<p>Otra situación que se nos puede presentar es verificar el número total de resultados que se obtienen en el navegador. Por ejemplo, <strong>si hacemos una busqueda y esperamos 5 resultados, lo que podemos hacer es contar las filas de la tabla, y ver que efectivamente son 5 filas</strong>. Podemos hacerlo de la siguiente forma:</p>

<pre><code class="language-php">$totalResults = $browser
    -&gt;driver
    -&gt;findElements(WebDriverBy::cssSelector('table &gt; tbody &gt; tr'));

$this-&gt;assertEquals($totalResults, 5);
</code></pre>

<p>Básicamente utilizo estas técnicas cuando tengo que probar una aplicación basada en <code>Datatables</code>, y necesito testear las búsquedas, filtros, paginación, etc...</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.devlaravel-dusk-html-count.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Lenguajes de programación de bajo nivel VS alto nivel]]></title>
                <link>https://daguilar.dev/blog/programacion_lenguajes-de-bajo-nivel-frente-a-los-lenguajes-de-alto-nivel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/programacion_lenguajes-de-bajo-nivel-frente-a-los-lenguajes-de-alto-nivel</guid>
                <description><![CDATA[En este artículo se muestran las diferencias principales entre los lenguajes de programación de alto nivel, frente a los lenguajes de programación de bajo nivel o código máquina]]></description>
                <content:encoded><![CDATA[<p>Los <strong>lenguajes de programación</strong> pueden clasificarse en función de si son lenguajes de programación de bajo nivel o de alto nivel. Aunque también se puede establecer una opción intermedia, definiendo a los lenguajes de medio nivel, aunque no es algo sobre lo que recaiga demasiado consenso, por lo que vamos a quedarnos con la clasificación de: <strong>bajo nivel y alto nivel</strong>.</p>

<h2>Lenguajes de bajo nivel</h2>

<blockquote>
  <p>Un lenguaje de programación de características de bajo nivel o de primera generación, es aquel en el que sus instrucciones ejercen un control directo sobre el hardware y están condicionados por la estructura física de las computadoras que lo soportan... <a href="https://es.wikipedia.org/wiki/Lenguaje_de_bajo_nivel" class="link-out">Wikipedia</a></p>
</blockquote>

<p>Basicamente, un lenguaje de bajo nivel es un lenguaje de programación pensado para interactuar directamente con la máquina, por lo que está íntimamente relacionado con su estructura y funcionamiento, utilizando instrucciones básicas que la máquina interpreta directamente, siendo por tanto dificil de interpretar o entender por el programador. En definitiva, cada <strong>CPU</strong> va a tener su propio <strong>código máquina</strong>, el cual va a estar controlado (en general) por 
el <em>firmware</em>.</p>

<p>En el <strong>código máquina</strong> puro, se utiliza código binario por lo que el código está repleto de ceros y unos. Esta situación deriva en que el código binario se convertierta en hexadecimal (u otras variantes) para simplificar el trabajo del programador, principalmente, reduciendo las cadenas de código. Por ejemplo, el código binario <code>1001111000001010</code> se convierte en <code>9E0A</code>.</p>

<p>Veamos un ejemplo del cálculo del <strong>número de Fibonacci</strong> mediante código maquina, utilizando una representación hexadecimal:</p>

<pre><code>8B542408 83FA0077 06B80000 0000C383
FA027706 B8010000 00C353BB 01000000
B9010000 008D0419 83FA0376 078BD989
C14AEBF1 5BC3
</code></pre>

<p>El siguiente paso es el <strong>Ensamblador</strong>, un primer intento de hacer el <strong>código máquina</strong> más legible para humanos:</p>

<pre><code>ORG 100h
MOV AL, 200 ; AL = 0C8h
MOV BL, 4
MUL BL ; AX = 0320h (800)

RET
</code></pre>

<p>Aunque como puede verse, está lejos de los lenguajes de alto nivel a lo hora de entender lo que hace... no se ve demasiada lógica en el código. A no ser que te dediques a realizar compiladores de código, desarrollar lenguajes de programación o sistemas operativos, esto igual no lo ves nunca.</p>

<p>A nivel personal, hace muchos años me compré un libro de programación con ensamblador. Al principio me parecío algo muy interesante y me volqué en su lectura, pero no tardó en convertise en algo demasiado complejo, tedioso y poco interesante... y terminé por abandonarlo.</p>

<h3>Principales lenguajes de bajo nivel</h3>

<ul>
<li>Código máquina.</li>
<li>Ensamblador.</li>
<li>C/C++ (Es un lenguaje de alto nivel que puede programar a bajo nivel... este sería el que podríamos considerar como intermedio, y por tanto voy a ponerlo en las dos listas, aunque siendo estrictos, es un lenguaje de alto nivel).</li>
</ul>

<h2>Lenguajes de alto nivel</h2>

<p>Los <strong>lenguajes de alto nivel</strong> son aquellos que son entendibles por humanos de forma directa sin necesidad de tener que interpretarlos, es decir, se adaptan a las capacidades congnitivas humanas.</p>

<blockquote>
  <p>En lugar de tratar con registros, direcciones de memoria y las pilas de llamadas, lenguajes de alto nivel se refieren a las variables, objetos [...], subrutinas, funciones, bucles, hilos y otros conceptos de la informática abstracta <a href="https://es.wikipedia.org/wiki/Lenguaje_de_alto_nivel" class="link-out">Wikipedia</a></p>
</blockquote>

<p>Veamos el ejemplo de antes, un número de <strong>Fibonacci</strong> pero con <strong>PHP</strong>:</p>

<pre><code class="language-php">&lt;?php

function fibonacci($n)
{
    $fibonacci  = [0, 1];

    for($i = 2; $i &lt;= $n; $i++)
    {
        $fibonacci[] = $fibonacci[$i - 1] + $fibonacci[$i - 2];
    }

    echo $fibonacci[$n];
}

fibonacci(10);
</code></pre>

<p>Por lo menos aquí <strong>se ve la lógica del código</strong> y puede entenderse lo que hace. Podemos decir, que un <strong>lenguaje de programación de alto nivel</strong>, pretende emular nuestra forma de pensar y razonar, evitando al programador los detalles técnicos de cómo hacerlo.</p>

<p>Estos lenguajes de <strong>programación de alto nivel</strong>, deben de ser posteriormente comprendidos y ejecutados por la máquina, para ello es necesario convertir la lógica del lenguaje a <strong>código máquina</strong>. Este proceso se puede hacer de dos formas:</p>

<ol>
<li><strong>Compiladores</strong>. Lo que hace es traducir completamente el programa en <strong>código fuente</strong>, generando un programa compilado y que puede ser ejecutado directamente por la máquina. <strong>Por ejemplo C/C++ o Go</strong>.</li>
<li><strong>Intérpretes</strong>. Van traduciendo sentencia a sentencia el código del programa conforme se va utilizando. <strong>Por ejemplo JavaScript, Python o PHP.</strong></li>
</ol>

<p>Por lo general, el ciclo de desarrollo en un lenguaje interpretado es bastante más rápido que en uno compilado, mientras que un código compilado es mucho más rápido que uno interpretado, ya que no requiere del proceso de traducción que el programa interpretado necesita.</p>

<h3>Principales lenguajes de alto nivel</h3>

<ul>
<li>Python (probablemente el de más alto nivel)</li>
<li>C/C++ (Es un lenguaje de alto nivel que puede programar a bajo nivel... este sería el que podríamos considerar como intermedio, y por tanto voy a ponerlo en las dos listas).</li>
<li>C#</li>
<li>Java</li>
<li>Javascript</li>
<li>PHP</li>
<li>Visual Basic</li>
<li>Erlang</li>
<li>Basic (mi primer lenguaje de programación)</li>
<li>Cobol</li>
<li>...</li>
</ul>

<h3>Fuentes</h3>

<ul>
<li><a href="https://es.wikipedia.org/wiki/Lenguaje_de_bajo_nivel" class="link-out">https://es.wikipedia.org/wiki/Lenguaje_de_bajo_nivel</a></li>
<li><a href="https://techterms.com/definition/low-level_language" class="link-out">https://techterms.com/definition/low-level_language</a></li>
<li><a href="https://karmany.net/ingenieria-inversa/19-ingenieria-inversa-novatos/7-codigo-maquina-lenguaje-ensamblador" class="link-out">https://karmany.net/ingenieria-inversa/19-ingenieria-inversa-novatos/7-codigo-maquina-lenguaje-ensamblador</a></li>
<li><a href="https://whatis.techtarget.com/definition/machine-code-machine-language" class="link-out">https://whatis.techtarget.com/definition/machine-code-machine-language</a></li>
<li><a href="https://stackoverflow.com/questions/21571709/difference-between-machine-language-binary-code-and-a-binary-file" class="link-out">https://stackoverflow.com/questions/21571709/difference-between-machine-language-binary-code-and-a-binary-file</a></li>
<li><a href="https://es.wikipedia.org/wiki/Lenguaje_de_alto_nivel" class="link-out">https://es.wikipedia.org/wiki/Lenguaje_de_alto_nivel</a></li>
<li><a href="https://programacionconphp.com/serie-fibonacci-en-php/" class="link-out">https://programacionconphp.com/serie-fibonacci-en-php/</a></li>
<li><a href="https://ccia.ugr.es/~jfv/ed1/c/cdrom/cap1/f_cap12.htm" class="link-out">https://ccia.ugr.es/~jfv/ed1/c/cdrom/cap1/f_cap12.htm</a></li>
<li><a href="http://cv.uoc.edu/moduls/XW02_79049_00373/web/main/m4/v2_3.html" class="link-out">http://cv.uoc.edu/moduls/XW02_79049_00373/web/main/m4/v2_3.html</a></li>
<li><a href="https://blog.makeitreal.camp/lenguajes-compilados-e-interpretados/" class="link-out">https://blog.makeitreal.camp/lenguajes-compilados-e-interpretados/</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.devprogramming-languages-low-hight-level.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Principales errores con Laravel Dusk]]></title>
                <link>https://daguilar.dev/blog/tests_identificando-los-principales-errores-con-laravel-dusk</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/tests_identificando-los-principales-errores-con-laravel-dusk</guid>
                <description><![CDATA[Algunos ejemplos prácticos del como solucionar los más recurrentes errores con Laravel Dusk y orchestral/testbench-dusk.]]></description>
                <content:encoded><![CDATA[<p>Este artículo, es al final un pequeño recordatorio para cuando me pongo a hacer tests con <strong>Laravel Dusk</strong> y empiezan a surgir los errores al hacer las pruebas.</p>

<p>He intentado recopilar los principales errores que me he encontrado, y como los he terminado por solucionar. Empecemos por los errores generados por el <em>driver</em> de <strong>Chrome</strong>:</p>

<pre><code>Facebook\WebDriver\Exception\SessionNotCreatedException: session not created: Chrome version must be between 70 and 73
</code></pre>

<pre><code>Facebook\WebDriver\Exception\WebDriverCurlException: Curl error thrown for http POST to /session with params: {"capabilities":{"firstMatch":[{"browserName":"chrome","goog:chromeOptions":{"w3c":false}}]},"desiredCapabilities":{"browserName":"chrome","platform":"ANY","chromeOptions":{"w3c":false}}}
</code></pre>

<pre><code>Failed to connect to localhost port 9515: Connection refused
</code></pre>

<p>En función de si estamos trabajando directamente con <strong>Laravel Dusk</strong>, o si estamos creando un <em>package</em> para <strong>Laravel</strong>, tenemos las siguiente soluciones:</p>

<h4> Con <strong>Laravel Dusk</strong>:</h4>

<pre><code class="language-bash">php artisan dusk:chrome-driver
</code></pre>

<h4>Con <strong>orchestral/testbench-dusk</strong>:</h4>

<pre><code class="language-bash">./vendor/bin/dusk-updater update
</code></pre>

<p>Otro error que suele suceder cuando estamos utilizando <strong>orchestral/testbench-dusk</strong>, es el siguiente:</p>

<pre><code>Illuminate\Contracts\Container\BindingResolutionException: Target class [livewire] does not exist.
</code></pre>

<p>En este caso el error ocurre al no encontrar la clase <strong>Livewire</strong>, pero puede suceder con cualquier clase que se nos olvide añadir. Sucede debido a que en la clase <em>TestCase</em>, nos ha faltado añadir el <em>Service Provider</em> para la clase <strong>Livewire</strong>:</p>

<pre><code class="language-php">/**
 * Load the service providers.
 */
protected function getPackageProviders($app)
{
    return [
        LivewireServiceProvider::class,
        ExcelServiceProvider::class,
    ];
}
</code></pre>

<p>No hay que olvidar el <em>Service Provider</em> del propio <em>package</em> que estamos probando (en el ejemplo anterior no lo he incluido).</p>

<p>Otro problema que sucede a veces, es que no se defina correctamente el archivo <code>phpunit.xml.dist</code>, por lo que no se debe olvidar añadir los diferentes directorios utilizados para las pruebas:</p>

<pre><code class="language-html">&lt;testsuites&gt;
    &lt;testsuite name="Browser"&gt;
        &lt;directory suffix="Test.php"&gt;./tests/Browser&lt;/directory&gt;
    &lt;/testsuite&gt;
    &lt;testsuite name="Feature"&gt;
        &lt;directory suffix="Test.php"&gt;./tests/Feature&lt;/directory&gt;
    &lt;/testsuite&gt;
    &lt;testsuite name="Unit"&gt;
        &lt;directory suffix="Test.php"&gt;./tests/Unit&lt;/directory&gt;
    &lt;/testsuite&gt;
&lt;/testsuites&gt;
</code></pre>

<h3> Referencias:</h3>

<ul>
<li><a href="https://github.com/orchestral/testbench-dusk" class="link-out">https://github.com/orchestral/testbench-dusk</a></li>
<li><a href="https://github.com/livewire/livewire/blob/master/tests/Unit/TestCase.php" class="link-out">https://github.com/livewire/livewire/blob/master/tests/Unit/TestCase.php</a></li>
<li><a href="https://github.com/livewire/livewire/blob/master/tests/Browser/TestCase.php" class="link-out">https://github.com/livewire/livewire/blob/master/tests/Browser/TestCase.php</a></li>
<li><a href="https://github.com/laravel/dusk/issues/649" class="link-out">https://github.com/laravel/dusk/issues/649</a></li>
<li><a href="https://barryvanveen.nl/blog/61-how-to-fix-common-laravel-dusk-problems">https://barryvanveen.nl/blog/61-how-to-fix-common-laravel-dusk-problems</a></li>
<li><a href="https://laravel.com/docs/8.x/dusk#introduction" class="link-out">https://laravel.com/docs/8.x/dusk#introduction</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.devlaravel-dusk-errors.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Package de selects dependientes multinivel para Laravel]]></title>
                <link>https://daguilar.dev/blog/laravel_select-dependiente-multinivel-combobox-para-laravel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_select-dependiente-multinivel-combobox-para-laravel</guid>
                <description><![CDATA[Package para la gestión de selects dependientes multinivel para Laravel utilizando Livewire y TailwindCSS.]]></description>
                <content:encoded><![CDATA[<p>Estoy trabajando en un nuevo proyecto y necesitaba un sistema de <code>selects</code> dependientes y con niveles de dependencia infinitos. Revisando <code>packages</code> para <strong>Laravel</strong> ya desarrollados me he encontrado con herramientas parecidas a <a href="https://select2.org/" class="link-out">https://select2.org/</a>, que son geniales, pero me sobraban gran parte de las funcionalidades que tenían, además, quería que estuviera basado en <code>back-end</code> en vez de en <code>front-end</code>.</p>

<p>Encontré soluciones, pero supongo que soy un maniático con el código y quería que además fuese fluido y fácilmente entendible, utilizando métodos encadenados. <strong>Al final me puse a desarrollar mi propio <code>package</code>, porque no encontraba nada que me gustase</strong>:</p>

<ul>
<li><a href="https://github.com/daguilarm/livewire-combobox" class="link-out">https://github.com/daguilarm/livewire-combobox</a></li>
</ul>

<p><img src="/assets/img/projects/liveware-combobox.gif" alt="Laravel Livewire combobox - selects dependientes" /></p>

<p>Básicamente, tenemos que crear un componente <strong>Livewire</strong>, como el siguiente:</p>

<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace App\Http\Livewire;

use App\Models\Car;
use App\Models\Extra;
use App\Models\Option;
use Daguilarm\LivewireCombobox\Components\ComboboxLivewireComponent;
use Daguilarm\LivewireCombobox\Components\Fields\Select;
use Daguilarm\LivewireCombobox\Contracts\Combobox;

class ComboboxCars extends ComboboxLivewireComponent implements Combobox
{
    public function elements(): array
    {
        return [
            Select::make('Vehículos', Car::class)
                -&gt;uriKey('key-for-car')
                -&gt;options(function($model) {
                    return $model
                        -&gt;pluck('name', 'id')
                        -&gt;toArray();
                }),
            Select::make('Opciones de vehículos', Option::class)
                -&gt;uriKey('key-for-options')
                -&gt;dependOn('key-for-car')
                -&gt;foreignKey('car_id')
                -&gt;selectRows('id', 'option')
                -&gt;hideOnEmpty(),
            Select::make('Extras de vehículos', Extra::class)
                -&gt;uriKey('key-for-extras')
                -&gt;dependOn('key-for-options')
                -&gt;foreignKey('option_id')
                -&gt;selectRows('id', 'extra')
                -&gt;hideOnEmpty(),
        ];
    }
}
</code></pre>

<p>Y añadir el componente a la vista, tal y como se muestra a continuación:</p>

<pre><code class="language-html">&lt;div&gt;
    &lt;livewire::combobox-cars /&gt;
&lt;/div&gt;
</code></pre>

<p>Y automáticamente tendremos 3 campos <code>select</code> dependientes unos de otros, sin tener que hacer nada mas. Y desde mi punto de vista, de forma clara, fluida y con métodos encadenados, tal y como a mi me gusta.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 02 May 2021 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Configurando un package para hacer tests.]]></title>
                <link>https://daguilar.dev/blog/package_configurando-un-package-de-laravel-y-livewire-para-hacer-tests</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/package_configurando-un-package-de-laravel-y-livewire-para-hacer-tests</guid>
                <description><![CDATA[Configurando un package de Laravel, que utiliza la librería Livewire, para poder realizar en él pruebas y tests.]]></description>
                <content:encoded><![CDATA[<p>Me he visto por primera vez ante la situación de tener que testear un <em>package</em> para <strong>Laravel</strong> que además estaba basado en <strong>Livewire</strong>. No ha sido fácil, y me ha llevado algo de tiempo tenerlo todo preparado, sobre todo porque no hay mucha información al respecto.</p>

<p>Lo primero ha sido crear el archivo <code>TestCase.php</code> en la carpeta <code>./tests</code>. Dejo el archivo completo (que es del package <a href="https://github.com/daguilarm/belich-tables" class="link-out">Belich Tables</a>):</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\BelichTables\Tests;

use Daguilarm\BelichTables\BelichTablesServiceProvider;
use Daguilarm\BelichTables\Tests\TestSeed;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\File;
use Livewire\LivewireServiceProvider;
use Orchestra\Testbench\TestCase as BaseTestCase;

class TestCase extends BaseTestCase
{
    use TestSeed;

    /**
     * Setup the test environment.
     */
    public function setUp(): void
    {

        parent::setUp();

        // Seed the database
        $this-&gt;seedUsers();
        $this-&gt;seedProfiles();
    }

    /**
     * Load the service providers
     */
    public function getPackageProviders($app)
    {
        return [
            BelichTablesServiceProvider::class,
            LivewireServiceProvider::class,
        ];
    }

    /**
     * Setup the testing environment
     */
    public function getEnvironmentSetUp($app)
    {
        // Setup the application
        $app['config']-&gt;set('view.paths', [
            __DIR__.'/views',
            resource_path('views'),
        ]);
        $app['config']-&gt;set('auth.providers.users.model', User::class);
        $app['config']-&gt;set('app.key', 'base64:Hupx3yAySikrM2/edkZQNQHslgDWYfiBfCuSThJ5SK8=');
        $app['config']-&gt;set('database.default', 'testbench');
        $app['config']-&gt;set('database.connections.testbench', [
            'driver'   =&gt; 'sqlite',
            'database' =&gt; ':memory:',
            'prefix'   =&gt; '',
        ]);

        // Populate the DB
        include_once __DIR__.'/../database/migrations/create_test_tables.php.stub';
        (new \CreateTestTables())-&gt;up();
    }

    /**
     * Swap HTTP Kernel for application bootstrap
     */
    public function resolveApplicationHttpKernel($app)
    {
        $app-&gt;singleton('Illuminate\Contracts\Http\Kernel', 'Daguilarm\BelichTables\Tests\HttpKernel');
    }
}
</code></pre>

<p>Antes de empezar tengo que aclarar que he tenido dos fuentes principales de información hasta llegar aquí:</p>

<ul>
<li><a href="https://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php" class="link-out">https://github.com/spatie/laravel-permission/blob/master/tests/TestCase.php</a></li>
<li><a href="https://github.com/livewire/livewire/blob/master/tests/Unit/TestCase.php" class="link-out">https://github.com/livewire/livewire/blob/master/tests/Unit/TestCase.php</a></li>
</ul>

<p>La clave para conseguir que funcionara, ha estado aqui:</p>

<pre><code class="language-php">/**
 * Load the service providers
 */
protected function getPackageProviders($app)
{
    return [
        BelichTablesServiceProvider::class,
        LivewireServiceProvider::class,
    ];
}
</code></pre>

<p>El problema era que cada vez que hacía un test, me daba el mismo error:</p>

<pre><code>Illuminate\Contracts\Container\BindingResolutionException: Target class [livewire] does not exist.
</code></pre>

<p>La solución la encontré aqui:</p>

<ul>
<li><a href="https://laracasts.com/discuss/channels/livewire/package-development-target-class-livewire-does-not-exist" class="link-out">https://laracasts.com/discuss/channels/livewire/package-development-target-class-livewire-does-not-exist</a></li>
</ul>

<p>Al principio sólo incluía el <strong>Service Provider</strong> de <code>BelichTablesServiceProvider::class</code> hasta que he decubierto que había que incluir también el de <code>LivewireServiceProvider::class</code>. Esto me ha llevado casi una hora delante del ordenador...</p>

<p>Sin olvidar el <strong>Trait</strong> <code>TestSeed::class</code>, que solo sirve para rellenar la base de datos:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\BelichTables\Tests;

use Daguilarm\BelichTables\Tests\Models\Profile;
use Daguilarm\BelichTables\Tests\Models\User;

trait TestSeed
{
    protected function seedUsers()
    {
        return User::insert([
            [ 
                'id' =&gt; 1, 
                'name' =&gt; 'Damián Aguilar', 
                'email' =&gt; 'damian.aguilar@email.com', 
                'active' =&gt; 1, 
                'date' =&gt; '2021-04-22 00:00:01'
            ],
            [/* ... */],
        ]);
    }

    protected function seedProfiles()
    {
        return Profile::insert([
            [
                'id' =&gt; 1, 
                'user_id' =&gt; 1, 
                'profile_telephone' =&gt; '000000001'
            ],
            [/* ... */],
        ]);
    }
}
</code></pre>

<p>Otro aspecto importante si quieres utilizar los test que tiene <strong>Livewire</strong> disponibles, es tener en cuenta que hay que añadir todo el <code>middleware</code>, tal y como indicamos en el método <code>resolveApplicationHttpKernel($app)</code>:</p>

<pre><code class="language-php">/**
 * Swap HTTP Kernel for application bootstrap
 */
protected function resolveApplicationHttpKernel($app)
{
    $app-&gt;singleton('Illuminate\Contracts\Http\Kernel', 'Daguilarm\BelichTables\Tests\HttpKernel');
}
</code></pre>

<p>Recuerdo que en nuestro <code>TestCase</code> hemos incluido este archivo, asi que tenemos que crearlo en la ruta que hemos especificado en el <code>singleton</code>. El archivo lo podemos encontrar en:</p>

<ul>
<li><a href="https://github.com/livewire/livewire/blob/master/tests/HttpKernel.php" class="link-out">https://github.com/livewire/livewire/blob/master/tests/HttpKernel.php</a></li>
</ul>

<p>Y en caso que cambie de ubicación, lo copio aquí:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\BelichTables\Tests;

use Illuminate\Foundation\Http\Kernel;

class HttpKernel extends Kernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array
     */
    protected $middleware = [
        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \Illuminate\Foundation\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];

    /**
     * The application's route middleware groups.
     *
     * @var array
     */
    protected $middlewareGroups = [
        'web' =&gt; [
            \Illuminate\Cookie\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \Illuminate\Foundation\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' =&gt; [
            'throttle:60,1',
            'bindings',
        ],
    ];

    /**
     * The application's route middleware.
     *
     * These middleware may be assigned to groups or used individually.
     *
     * @var array
     */
    protected $routeMiddleware = [
        'auth' =&gt; \Illuminate\Auth\Middleware\Authenticate::class,
        'auth.basic' =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'bindings' =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,
        'cache.headers' =&gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' =&gt; \Illuminate\Auth\Middleware\Authorize::class,
        'guest' =&gt; \Orchestra\Testbench\Http\Middleware\RedirectIfAuthenticated::class,
        'signed' =&gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' =&gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
    ];

    /**
     * The priority-sorted list of middleware.
     *
     * This forces non-global middleware to always be in the given order.
     *
     * @var array
     */
    protected $middlewarePriority = [
        \Illuminate\Session\Middleware\StartSession::class,
        \Illuminate\View\Middleware\ShareErrorsFromSession::class,
        \Illuminate\Auth\Middleware\Authenticate::class,
        \Illuminate\Session\Middleware\AuthenticateSession::class,
        \Illuminate\Routing\Middleware\SubstituteBindings::class,
        \Illuminate\Auth\Middleware\Authorize::class,
    ];
}
</code></pre>

<p>Como recordatorio... no olvides cambiar los <code>namespaces</code> y adaptarlos a tu proyecto.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Package para Laravel, para la gestión de Tablas de Datos]]></title>
                <link>https://daguilar.dev/blog/laravel_nuevo-package-para-laravel-para-la-gestion-de-tablas-de-datos</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_nuevo-package-para-laravel-para-la-gestion-de-tablas-de-datos</guid>
                <description><![CDATA[Nuevo package para la gestión de Tablas de Datos (Tipo DataTables) usando Laravel, Livewire, AlpinJS y TailwindCSS. Una versión del famoso DataTables usando librerías más modernas y mucho más ligero.]]></description>
                <content:encoded><![CDATA[<p>Hace algún tiempo, me plantee el reto de desarrollar un sistema de administración igual que <strong>Laravel Nova</strong>, pero sin usar <code>Vuejs</code>, una autentica locura de la que aprendí muchísimo.</p>

<p>Esta idea loca, se debía a dos situaciones diferentes: por un lado, buscaba mejorar mis habilidades como programador sumergiéndome en un proyecto de este calibre, y por otro lado, por aquel entonces odiaba (de forma inexplicable) <code>vueJS</code>, y necesitaba una alternativa que no utilizara este <code>framework</code>. La solución fue escribir todo utilizando solo <em>vanilla <code>javascript</code></em>.</p>

<p>Esta experiencia me llevó a entender mejor el funcionamiento de <code>javascript</code> como lenguaje y a <a href="https://daguilar.dev/blog/javascript_mis-problemas-con-javascript/">terminar por apreciarlo</a>.</p>

<p>Después de aquello, me planteé hacer una segunda versión del proyecto, pero basado en <code>Livewire</code>, <code>AlpineJS</code> y <code>TailwindCSS</code>, y después de varias semanas trabajando en él, me di cuenta que tal vez sería más interesante dividir el proyecto en varios packages independientes, y que <strong>Belich</strong>, fuera más bien un entorno de desarrollo donde se utilizaban en conjunto todos estos packages.</p>

<p>Cuento todo esto, porque ya se puede utilizar el primer <code>package</code> que he desarrollado. Se llama: <strong>Belich Tables</strong>.</p>

<p><img src="/assets/img/projects/belich-tables.png" alt="Belich Tables desarrollado con Livewire" /></p>

<p>Todo empezó cuando decidí empezar a desarrollar el sistema de <em>tablas de datos</em>, emulando a <a href="https://datatables.net/" class="link-out">datatables</a>, y en el camino me encontré un package que a primera vista funcionaba muy bien:</p>

<ul>
<li><a href="https://github.com/rappasoft/laravel-livewire-tables" class="link-out">https://github.com/rappasoft/laravel-livewire-tables</a></li>
</ul>

<p>La verdad es que ofrecía una estructura básica muy interesante, pero vi que puediera llegar hasta donde yo necesitaba para poder integrarlo en el proyecto, por lo que procedí a crear un <strong>fork</strong> en <code>github</code> y empecé a añadir mejoras:</p>

<ul>
<li>El código se ha rediseñado desde prácticamente 0, mejorando la estructura y el rendimiento.</li>
<li>Se ha dado soporte para <code>TailwindCSS</code>, ya que estaba diseñado para ser utilizado con <code>Bootstrap</code>.</li>
<li>Se ha integrado un sistema de mensajes, utilizando la funcionalidad de <em>flash messages</em> the <code>Livewire</code>.</li>
<li>Implementación de los campos de accion en la tabla, de forma que se pudieran: <em>editar, mostrar y eliminar campos</em>.</li>
<li>Filtrado de resultados por columnas, utilizando un sistema similar a <strong>Laravel Nova</strong>.</li>
<li>Se ha cambiado la paginación por una paginación simple.</li>
<li>Se han añadido <code>checkboxes</code> para seleccionar filas y realizar acciones masivas sobre los elementos seleccionados.</li>
<li>Se ha habilitado un sistema que permite configurar y personalizar estas acciones masivas.</li>
<li>Se ha mejorado la personalización y adaptabilidad del <code>package</code> a cualquier proyecto.</li>
<li>Se ha desarrollado una documentación completa sobre su funcionamiento.</li>
</ul>

<p>Y muchas más funcionalidades menores, que han añadido al <code>package</code> mucha mayor flexibilidad y adaptabilidad.</p>

<p>Puedes ver el <code>package</code> en:</p>

<ul>
<li><a href="https://github.com/daguilarm/belich-tables" class="link-out">https://github.com/daguilarm/belich-tables</a></li>
</ul>

<p>Y su documentación en:</p>

<ul>
<li><a href="https://daguilarm.github.io/belich-tables/" class="link-out">https://daguilarm.github.io/belich-tables/</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Refactorizando condicionales con PHP]]></title>
                <link>https://daguilar.dev/blog/php_simplificando-condicionales-en-php-parte-2-refactoring</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/php_simplificando-condicionales-en-php-parte-2-refactoring</guid>
                <description><![CDATA[Refactoring condicionales con PHP. Simplificando condicionales y bucles con PHP, buscando un código más legible, procesional y claro]]></description>
                <content:encoded><![CDATA[<p>En este artículo, se van a ver diversas técnicas de reducción de condicionales y simplificación de código, para versiones de <strong>php8</strong>.</p>

<p>Este artículo es continuación del ya publicado <a href="https://daguilar.dev/blog/php_simplificando-condicionales-en-php-parte-1-refactoring/">Simplificando condicionales con PHP (parte I)</a>. Aquí veremos otras técnicas de simplificación de condicionales, utilizando <strong>php</strong> en su versión 8.</p>

<p>Empecemos con la nueva función <code>match()</code>, que nos permite simplificar los <code>switch</code> de forma muy importante. Veamos un ejemplo de como se hacía antes:</p>

<pre><code class="language-php">public function showOn(string $value): self
{
    switch ($value) {
        case 'sm':
            $show = 'visible';
            break;
        case 'md':
            $show = 'hidden md:visible';
            break;
        case 'lg':
            $show = 'hidden lg:visible';
            break;
        case 'xl':
            $show = 'hidden xl:visible';
            break;
    }

    $this-&gt;show = $show;

    return $this;
}
</code></pre>

<p>La nueva función <code>match()</code> nos va a permitir añadir el resultado a una variable de forma directa:</p>

<pre><code class="language-php">public function showOn(string $value): self
{
    $this-&gt;show = match ($value) {
        'sm' =&gt; 'visible',
        'md' =&gt; 'hidden md:visible',
        'lg' =&gt; 'hidden lg:visible',
        'xl' =&gt; 'hidden xl:visible',
    };

    return $this;
}
</code></pre>

<p>Y por supuesto que podemos seguir añadiendo un valor por defecto:</p>

<pre><code class="language-php">public function showOn(string $value): self
{
    $this-&gt;show = match ($value) {
        'sm' =&gt; 'visible',
        default =&gt; 'hidden',
    };

    return $this;
}
</code></pre>

<p>Hasta ahora, era poco amigo de la función <code>switch()</code> y la verdad es que la he utilizado muy poco, principalmente por lo poco amigable que era, y la cantidad de basura repetitiva que había que utilizar: <code>case</code>, <code>break</code>,... ahora la cosa ha cambiado, la nueva sintaxis de <code>match()</code> me ha convencido.</p>

<p>La otra ventaja para lidiar con condicionales que podemos encontrar en <code>php</code> 8, la encontramos en el nuevo operador <strong>nullsafe</strong>. El ejemplo que pone la página oficial de <a href="https://www.php.net/releases/8.0/es.php" class="link-out">php</a>, me parece de lo más descriptivo:</p>

<pre><code class="language-php">$country =  null;

if ($session !== null) {
  $user = $session-&gt;user;

  if ($user !== null) {
    $address = $user-&gt;getAddress();

    if ($address !== null) {
      $country = $address-&gt;country;
    }
  }
}
</code></pre>

<p>Con el nuevo operador se queda en:</p>

<pre><code class="language-php">$country = $session?-&gt;user?-&gt;getAddress()?-&gt;country;
</code></pre>

<p>Parece increible... si en cualquiera de las conexiones se rompe la cadena, el sistema automáticamente devolverá <code>NULL</code> y se detiene el proceso. Es un poco similar a lo que en <strong>Laravel</strong> podemos hacer con la función <code>optional()</code>:</p>

<pre><code class="language-php">$address = optional(optional($user)-&gt;address)-&gt;street;
</code></pre>

<p>Un saludo y espero que sea de utilidad.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 11 Apr 2021 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Simplificando condicionales con PHP]]></title>
                <link>https://daguilar.dev/blog/php_simplificando-condicionales-en-php-parte-1-refactoring</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/php_simplificando-condicionales-en-php-parte-1-refactoring</guid>
                <description><![CDATA[Refactoring condicionales con PHP. Simplificando condicionales y bucles con PHP utilizando diversas técnicas para reducir la complejidad del código]]></description>
                <content:encoded><![CDATA[<p>En este artículo, se van a ver diversas técnicas de reducción de condicionales y simplificación de código, para versiones de <strong>php7</strong>.</p>

<p>Es fácil dejarse llevar por un grupo de condicionales anidados y complicar el código muy facilmente, convirtiéndolo en algo complejo y dificil de seguir.</p>

<p>La idea, no es solo simplificarlo, sino también conseguir que sea fácil de seguir con facilidad, por lo tanto, <strong>no se trata sólo de reducir el código a la mínima expresión, también hay que conseguir que el código sea simple de entender, aunque esto implique no reducirlo al máximo</strong>.</p>

<p>Desde mi punto de vista, el código primero tiene que ser muy sencillo de interpretar, y después, conseguir reducirlo a la mínima expresión.</p>

<p>Veamos un ejemplo de un código que podemos encontrarnos fácilmente:</p>

<pre><code class="language-php">function users($usuarios) {
    if($usuarios &gt; 10) {
        return 'Son muchos usuarios';
    } else {
        return 'Son pocos usuarios';
    }
}
</code></pre>

<p>Este código se entiende con facilidad, pero se puede simplificar más, no hay necesidad del <code>else</code>:</p>

<pre><code class="language-php">function users($usuarios) {
    if($usuarios &gt; 10) {
        return 'Son muchos usuarios';
    } 

    return 'Son pocos usuarios';
}
</code></pre>

<p>El mismo código, pero más complejo. Veamos el ejemplo:</p>

<pre><code class="language-php">function users($usuarios, $edad) {
    if($usuarios &gt; 10 &amp;&amp; $edad &gt;= 18) {
        return 'Son muchos usuarios. Son mayores de edad.';
    } elseif($usuarios &gt; 10 &amp;&amp; $edad &lt; 18) {
        return 'Son muchos usuarios. Son menores de edad';
    } elseif($usuarios &lt; 10 &amp;&amp; $edad &gt;= 18) {
        return 'Son pocos usuarios. Son mayores de edad';
    } else {
        return 'Son pocos usuarios.';
    }
}
</code></pre>

<p>A simple vista, podemos usar la técnica anterior para optimizar un poco esto:</p>

<pre><code class="language-php">function users($usuarios, $edad) {
    if($usuarios &gt;= 10 &amp;&amp; $edad &gt;= 18) {
        return 'Son muchos usuarios. Son mayores de edad.';
    } 

    if($usuarios &gt;= 10 &amp;&amp; $edad &lt; 18) {
        return 'Son muchos usuarios. Son menores de edad.';
    } 

    if($usuarios &lt; 10 &amp;&amp; $edad &gt;= 18) {
        return 'Son pocos usuarios. Son mayores de edad.';
    } 

    return 'Son pocos usuarios.';
}
</code></pre>

<p>Eliminamos los <code>elseif</code> y los <code>else</code> del código, los cuales, desde mi punto de vista solo complican la legibilidad del código. Lo siguiente que podemos hacer es dividir el código en más funciones y <strong>darle a estas funciones un nombre descriptivo, el cual indique que hace la función exactamente</strong>. Esto último es algo importante, porque luego perdemos demasiado tiempo investigando que hace cada función.</p>

<pre><code class="language-php">function usersAndAge($usuarios, $edad) {
    sprintf('%s %s', totalUsers($usuarios), isUserAdult($edad));
}

function totalUsers($usuarios) {
    if($usuarios &gt;= 10) {
        return 'Son muchos usuarios.';
    } 

    return 'Son pocos usuarios.';
}

function isUserAdult($edad) {
    if($edad &gt;= 18) {
        return 'Son mayores de edad.';
    } 

    return 'Son menores de edad.';
}
</code></pre>

<p>La idea es simplificar el código en unidades más pequeñas y con una sola responsabilidad, así cada función hace solo una cosa. Con esto conseguiremos un código más sencillo, entendible y práctico.</p>

<p>El siguiente ejemplo, es el resultado de plantear condiciones sin pararse a pensar un minuto:</p>

<pre><code class="language-php">public function example1()  
{
    if ($condition1) {
        $response = 'response 1';
    } else {
        if ($condition2) {
            $response = 'response 2';
        } else {
            $response = 'response 3';
        }
    }

    return $response;
}
</code></pre>

<p>Si lo pensamos un poco, podría quedarse así:</p>

<pre><code class="language-php">public function example1()  
{
    if ($condition1) {
        return 'response 1';
    } 

    if ($condition2) {
        return 'response 2';
    } 

   return 'response 3';
}
</code></pre>

<p><strong>A veces, el problema del código es que no se ha pensado lo suficiente, y termina por ser redundante</strong>.</p>

<p>Un ejemplo más complejo, un <code>middleware</code> para <strong>Laravel</strong>:</p>

<pre><code class="language-php">&lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class MinifyHtml
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next)
    {
        /** @var Response $response */
        $response = $next($request);

        if (config('option.enable') &amp;&amp; $this-&gt;isHtml($response)) {
            //Filter by exclusionary action
            if (in_array($this-&gt;action(), $this-&gt;exceptedActions())) {
                return $response;
            }
            //Filter by url path
            if (in_array(trim($request-&gt;path(), '/'), config('option.except.paths'))) {
                return $response;
            }

            //Minify
            $response-&gt;setContent($this-&gt;html($response-&gt;getContent()));
        }

        return $response;
    }
}
</code></pre>

<p>Es un <code>middleware</code> para minimizar el código <code>HTML</code>. Después de pensarlo un poco, ha quedado así:</p>

<pre><code class="language-php">&lt;?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class MinifyHtml
{
    /**
     * Handle an incoming request.
     */
    public function handle(Request $request, Closure $next): Request
    {
        /** @var Response $response */
        $response = $next($request);

        // If the minify is disabled
        if (! config('option.enable')) {
            return $response;
        }

        // If the headers are incorrents
        if (! $this-&gt;isHtml($response)) {
            return $response;
        }

        // If the current action is excluded
        if ($this-&gt;filterByActionExcluded()) {
            return $response;
        }

        //Filter by url path
        if ($this-&gt;filterByUrl()) {
            return $response;
        }

        //Minify
        return $response-&gt;setContent(
            $this-&gt;html($response-&gt;getContent())
        );
    }

    private function filterByActionExcluded() 
    {
        return in_array(
            $this-&gt;action(), 
            $this-&gt;exceptedActions()
        );
    }

    private function filterByUrl(Request $request) 
    {
        return in_array(
            $this-&gt;requestUrl($request), 
            config('option.except.paths')
        );
    }

    private function requestUrl(Request $request) 
    {
        return trim($request-&gt;path(), '/');
    }
}
</code></pre>

<p>El objetivo aquí era que el código fuese más legible, y por ello, no me ha importado demasiado que aumentasen las líneas de código. Personalmente, me parece una mejora, ya que se entiende muy facilmente, y se han evitado condicionales complejos y todo parece más fluido y simplificado.</p>

<p>Al final, esto es lo que busco en el código que genero. Básicamente lo que quiero es que cuando vuelva a este código dentro de unos meses, sea capaz de seguirlo sin problemas, y sin tener que perder demasiado tiempo en descrifrar la lógica del código.</p>

<p>Para profundizar más en el tema, aquí tienes un vídeo (en inglés), de <a href="https://freek.dev" class="link-out">Freek Van der Herten</a> (todo un referente en la comunidad <strong>Laravel</strong> y <strong>PHP</strong>) sobre como mejorar el diseño de condicionales complejos:</p>

<ul>
<li><a href="https://freek.dev/1578-how-to-refactor-complex-if-statements" class="link-out">How to refactor complex if statements</a></li>
</ul>

<p>También os dejo un artículo que escribí hace tiempo, en el que explico como usar las <code>Pipelines</code> de <strong>Laravel</strong> para simplificar los condicionales utilizando este patrón de diseño:</p>

<ul>
<li><a href="https://daguilar.dev/blog/laravel_patrones-de-diseno-y-uso-de-pipelines-con-laravel/">Patrones de diseño y uso de Pipelines con Laravel</a></li>
</ul>

<p>Un saludo y espero que sirva de algo.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Vuelta al trabajo, terminé la Tesis Doctoral]]></title>
                <link>https://daguilar.dev/blog/personal_vuelta-al-trabajo</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/personal_vuelta-al-trabajo</guid>
                <description><![CDATA[Por fin vuelvo al trabajo después de muchos meses volcado en la finalización de la Tesis Doctoral... algo que parecía que no iba a terminar nunca. Mi experiencia trabajando en la Tesis Doctoral.]]></description>
                <content:encoded><![CDATA[<p><strong>Llevo bastante tiempo sin subir nada nuevo aquí, y ha sido principalmente por la Tesis Doctoral</strong>. La empecé en el curso 2015-2016 y después de cinco años por fin realicé la defensa pública la semana pasada.</p>

<p>En los últimos seis meses, mi vida a girado al 100% en torno a la Tesis. Primero tuve que publicar un artículo científico en la revista <a href="https://www.mdpi.com/2073-4395/10/9/1352" class="link-out">Agronomy</a> que fue todo un reto, a parte de un requisito para terminar la Tesis.</p>

<p>El siguiente paso fue escribir la Tesis en sí (basada en el artículo), y pasar por la eterna burocracia que hay tras ella... una pesadilla, casi peor que la propia Tesis.</p>

<p>Y por último llegó la defensa... que no resultó ser tan terrible como me temía. Ha sido probablemente la parte del proceso que más horas de sueño me ha quitado, y como he comentado, terminó siendo un proceso bastante llevadero y no tan terrible como esperaba.</p>

<p>Al final, he obtenido el Doctorado en <strong>Recursos y Tecnologías Agrarias, Agroambientales y Alimentarias</strong>. Una especialidad curiosa para un programador, pero justificada en mi caso, ya que mi tesis giró en torno al desarrollo de <em>software</em> para agricultura.</p>

<p>Y pensando en el futuro... tal vez le de alguna vuelta a la idea que hay tras la Tesis y haga algún tipo de <em>software</em> para agricultura... ¿quién sabe? igual hasta tiene éxito...</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Mis problemas con JavaScript]]></title>
                <link>https://daguilar.dev/blog/javascript_mis-problemas-con-javascript</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/javascript_mis-problemas-con-javascript</guid>
                <description><![CDATA[Historia de mi relación amor / odio con JavaScript, y como gracias a NodeJS y las librerías que surgiero bajo su sombra, como VueJS, Angular, AlpineJS o React.]]></description>
                <content:encoded><![CDATA[<p><strong>Nunca me ha gustado <code>JavaScript</code></strong>, ya que siempre lo he encontrado un lenguaje de programación <em>"mágico"</em>, es decir, siempre he tenido la sensación que a veces funcionaba y otras veces no... <strong>se que esto ha sido siempre culpa mía, principalmente por no llegar a comprender realmente el funcionamiento del lenguaje</strong>.</p>

<p>Esta situación al final me ha llevado siempre por el camino de ir esquivando <code>JavaScript</code> cada vez que he tenido la opción de hacerlo. De hecho, no entendía como a alguien podía gustarle programar con este lenguaje.</p>

<p>Volviendo la vista a cuando empecé a programar con <code>JavaScript</code>, creo que tal vez el problema fue empezar directamente con <code>Jquery</code>, obviando <code>JavaScript</code>, y por tanto aprendiendo de la peor manera posible. En el aquel momento pensaba que si sabía <code>Jquery</code> sabía <code>JavaScript</code>... que equivocado estaba...</p>

<p>Entonces llega <code>NodeJS</code> y todas las librerias que surgieron a partir de él: <code>AngularJS</code>, <code>VueJS</code>, <code>ReactJS</code>,... y lo cambiaron todo. En mi caso, ya que programaba con <code>Laravel</code> terminé utilizando <code>VueJS</code>. Admito que al principio estaba totalmente perdido, y entonces, me ví involucrado en un proyecto basado en <code>VueJS</code> y lo pasé muy mal (realmente mal), sobre todo porque este proyecto era mi <em>Tesis Doctoral</em>... el caso es que tuve que ponerme las pilas y aprender a marchas forzadas a programar, y fue aquí cuando empecé a no odiar <code>JavaScript</code>, lo cual fue un paso importante en mi proceso de aceptación del lenguaje.</p>

<p>Simultáneamente a la <em>Tesis</em>, empecé otro proyecto en el que intenté hacer un panel de administrador completo utilizando sólo puro y duro <code>JavaScript</code>, y fué aquí donde por primera vez empecé a apreciar el lenguaje, sin utilizar librerías y enfrentándome directamente a él. Fue lo mejor que pude hacer en aquel momento.</p>

<p>Admito que ahora con la llegada de <code>Livewire</code> y <code>AlpineJS</code> estoy totalmente volcado en el desarrollo con <code>JavaScript</code>, y en este punto, puedo decir que ahora si que disfruto programando con este lenguaje, algo que hace unos años me hubiera parecido ciencia ficción.</p>

<p>Y entonces llegó <strong>Angular</strong> y <strong>TypeScript</strong>, y entonces me planteé por primera vez en mi vida la opción de trabajar como programador <code>front-end</code>, y lo hice... una gran experiencia.</p>

<p>En definitiva, la intención de este <em>post</em> no es otra que la de exponer mi fracaso al intentar aprender un lenguaje de programación empezando por el final... <strong>el camino correcto es siempre empezar por lo básico y después ir a lo específico</strong>, o si quereis arriesgaros, vais a cometer los mismos errores que yo.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Usando funcionalidad Pages de Laravel Dusk]]></title>
                <link>https://daguilar.dev/blog/tests_simplificando-tests-utilizando-la-funcionalidad-pages-de-laravel-dusk</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/tests_simplificando-tests-utilizando-la-funcionalidad-pages-de-laravel-dusk</guid>
                <description><![CDATA[Laravel Dusk permite la creación de clases tipo Page, para simplificar y automatizar procesos durante la realización de test de navegador]]></description>
                <content:encoded><![CDATA[<p>Últimamente estoy haciendo muchos <code>tests</code> con <code>Laravel Dusk</code>, y he encontrado en la opción de generar <code>Pages</code> una forma de simplificarlos, y además, de una forma muy considerable.</p>

<p>La idea es no repetir código y crear métodos personalizados. En mi caso sigo una estructura de código claramente basada en <code>CRUD</code>, es decir: Crear, Editar, Eliminar,... por lo que todo mi código es (en general) muy parecido, y por tanto, las pruebas de <code>test</code> suelen ser muy similares. Como siempre, hay excepciones, pero una parte importante del código funciona siguiendo este patrón.</p>

<p>La idea ahora, es la de sacarle partido a esta situación para simplificar los <code>tests</code>. Para ello lo que he hecho ha sido crear una página para cada acción del sistema <code>CRUD</code>, por ejemplo, veamos el caso de <code>CREAR</code>.</p>

<p>Lo primero es crear esta página con <code>artisan</code>:</p>

<pre><code class="language-bash">php artisan dusk:page Create
</code></pre>

<p>Ahora empecemos a simplificar código:</p>

<pre><code class="language-php">&lt;?php

namespace Tests\Browser\Pages;

use Laravel\Dusk\Browser;

class Create extends Page
{
    protected $section;

    /**
     * Create a new Create instance.
     */
    public function __construct(string $section)
    {
        $this-&gt;section = $section;
    }

    /**
     * Get the URL for the page.
     *
     * @return string
     */
    public function url()
    {
        return route('dashboard.' . $this-&gt;section . '.create');
    }

    /**
     * Assert that the browser is on the page.
     *
     * @param  Browser  $browser
     * @return void
     */
    public function assert(Browser $browser)
    {
        $browser-&gt;assertUrlIs($this-&gt;url());
    }

    // /**
    //  * Get the element shortcuts for the page.
    //  *
    //  * @return array
    //  */
    // public function elements()
    // {
    //     return [
    //         '@element' =&gt; '#selector',
    //     ];
    // }

    /**
     * Select Date
     */
    public function selectDate(Browser $browser, string $selector, int $day, int $month, int $year): void
    {
        $browser
            -&gt;keys($selector, $day, $month, $year)
            -&gt;pause(200)
            -&gt;assertInputValue($selector, sprintf('%s-%s-%s', $year, $month, $day));
    }

    /**
     * Select Field
     *
     * @param mixed $value
     */
    public function selectField(Browser $browser, string $selector, $value): void
    {
        $browser
            -&gt;select($selector, $value)
            -&gt;assertValue($selector . '-hidden', $value);
    }

    /**
     * Submit
     */
    public function buttonSubmit(Browser $browser): void
    {
        $browser
            -&gt;assertMissing('.message-alert-green')
            -&gt;click('@form-button-create')
            -&gt;waitFor('.message-alert-green')
            -&gt;assertUrlIs(route('dashboard.' . $this-&gt;section . '.index'));
    }
}

</code></pre>

<p>En este caso he añadido tres métodos: <code>selectDate()</code>, <code>selectField</code> y <code>buttonSubmit()</code>. Por supuesto, cuanto más répitas el código a lo largo de tu <code>test</code> más optimizado quedará todo.</p>

<p><code>selectDate()</code> es una forma de simplificar el proceso de añadir fechas a campos <code>input</code> con el <code>type</code> en <code>date</code>, lo cual es un poco engorroso y con este método se simplifica.</p>

<p>El segundo método <code>selectField()</code>, selecciona un campo <code>select</code> y verifica que al hacerlo se dispare un evento, el cual añada el valor seleccionado del campo a un segundo campo oculto.</p>

<p>El tercero <code>buttonSubmit()</code> envía el formulario al Controlador y verifica que se ha redireccionado (una vez se ha añadido el elemento a la base de datos) y que aparece el mensaje de que se ha realizado la operación con éxito.</p>

<p>Ahora veamos como transladar esto a un <code>test</code>:</p>

<pre><code class="language-php">// dusk --filter=test_can_create_a_post
public function test_can_create_a_post()
{
    $this-&gt;browse(function ($browser) {
        $browser
            -&gt;loginAs($this-&gt;user)
            -&gt;visit(new Create('posts'))
            -&gt;selectDate('@posts-date', 10, 10, 2019)
            -&gt;selectField('@posts-mode', 1)
            -&gt;buttonSubmit();
});
</code></pre>

<p>Y podemos reutilizar este código en otros <code>tests</code>:</p>

<pre><code class="language-php">// dusk --filter=test_can_create_a_profile
public function test_can_create_a_profile()
{
    $this-&gt;browse(function ($browser) {
        $browser
            -&gt;loginAs($this-&gt;user)
            -&gt;visit(new Create('profiles'))
            -&gt;type('@name', 'Damián Aguilar')
            -&gt;type('@email', 'email@email.com')
            -&gt;selectDate('@birthday', 10, 10, 2019)
            -&gt;selectField('@role', 1)
            -&gt;buttonSubmit();
});
</code></pre>

<p>Si en vez de utilizar todo esto escribiéramos el <code>test</code> directamente, quedaría así:</p>

<pre><code class="language-php">// dusk --filter=test_can_create_a_post
public function test_can_create_a_post()
{
    $this-&gt;browse(function ($browser) {
        $browser
            -&gt;loginAs($this-&gt;user)
            -&gt;visit(route('dashboard.posts.create'))
            -&gt;keys('@posts-date', 10, 10, 2019)
            -&gt;pause(200)
            -&gt;assertInputValue('@posts-date', sprintf('%s-%s-%s', $year, $month, $day))
            -&gt;select('@posts-mode', 1)
            -&gt;click('@form-button-create')
            -&gt;waitFor('.message-alert-green')
            -&gt;assertUrlIs(route('dashboard.posts.index'));
});
</code></pre>

<p>Cuando más complicado es el <code>test</code> más beneficios se obtienen de esta técnica. Otra técnica que utilizo para reutilizar aún más el código, es extraer todo los métodos repetidos en todas las acciones <code>CRUD</code> que he creado a un <code>trait</code>. Así solo tengo que ir llamando al <code>trait</code> si el <code>test</code> lo necesita.</p>

<p>Por ejemplo, el método <code>selectDate()</code> se puede utilizar en las páginas <code>Create</code> y <code>Update</code>, por lo que extraerlo a un <code>trait</code> va a evitar que repitamos código.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Haciendo pruebas con la librería javascript AlpinJS]]></title>
                <link>https://daguilar.dev/blog/alpinejs_accediendo-a-componentes-alpinejs-desde-el-exterior-y-modificando-parametros</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/alpinejs_accediendo-a-componentes-alpinejs-desde-el-exterior-y-modificando-parametros</guid>
                <description><![CDATA[En este artículo se muestra como acceder a componentes AlpineJS desde fuera de ellos, a la vez que se es capaz de modificar sus propiedades desde fuera]]></description>
                <content:encoded><![CDATA[<p>Me he encontrado en la situación de tener que cambiar un componente <code>AlpineJS</code>desde otro componente, veamos un ejemplo de la situación:</p>

<pre><code class="language-html">&lt;div x-data="component_1()" id="component_1"&gt;
    &lt;div x-text="text_1"&gt;&lt;/div&gt;
&lt;/div&gt;   

&lt;div x-data="component_2()" id="component_2"&gt;
    &lt;div x-text="text_2"&gt;&lt;/div&gt;
&lt;/div&gt;  
</code></pre>

<p>Y el código <code>JavaScript</code>:</p>

<pre><code class="language-javascript">function component_1() {
    return {
        text_1: 'texto 1',
    }
}

function component_2() {
    return {
        text_2: text_1 + ' junto con texto 2',
    }
}
</code></pre>

<p>Todo junto:</p>

<pre><code class="language-html">&lt;div x-data="component_1()" id="component_1"&gt;
    &lt;div x-text="text_1"&gt;&lt;/div&gt;
&lt;/div&gt;   

&lt;div x-data="component_2()" id="component_2"&gt;
    &lt;div x-text="text_2"&gt;&lt;/div&gt;
&lt;/div&gt; 

&lt;script&gt;
    function component_1() {
        return {
            text_1: 'texto 1',
        }
    }

    function component_2() {
        return {
            text_2: text_1 + ' junto con texto 2',
        }
    }
&lt;/script&gt; 
</code></pre>

<p>Para acceder a la información de un componente de <code>AlpineJS</code>, se puede hacer así:</p>

<pre><code class="language-javascript">    var component_1 = document.getElementById('component_1');
    console.log(component_1.__x.getUnobservedData().text_1)
</code></pre>

<p>Mediante <code>__x.getUnobservedData()</code> accedemos a todos los datos del componente 1. Esto es debido a que toda la información se guarda en los <code>DOM nodes</code> y por tanto se puede acceder a ella en cualquier momento mediante la propiedad <code>__x.$data</code> a la cual puedemos acceder mediante el método <code>getUnobservedData()</code>.</p>

<p>Si por otro lado, lo que queremos es acceder a los datos y poder modificarlos, debemos hacerlo directamente mediante <code>__x.$data</code>:</p>

<pre><code class="language-javascript">    var component_1 = document.getElementById('component_1');
    component_1.__x.$data.text_1 = 'nuevo texto...';
</code></pre>

<p>Al final he llegado a este este artículo:</p>

<ul>
<li><a href="https://codewithhugo.com/alpinejs-inspect-component-data-from-js/" class="link-out">https://codewithhugo.com/alpinejs-inspect-component-data-from-js/</a></li>
</ul>

<p>A partir de este artículo, he sentido curiosidad y me he ido al código fuente de <code>AlpineJS</code>, donde me he pasado un buen rato dándole vueltas y viendo como funciona. Ha sido bastante denso, creo que ha merecido la pena ver su funcionamiento interno (o intuirlo, porque me he perdido en muchas ocasiones).</p>

<p>En el artículo también me he encontrado con una herramienta para desarrolladores para trabajar con <code>AlpineJS</code> y que se integra tanto en <code>Chrome</code> como en <code>Firefox</code>:</p>

<ul>
<li><a href="https://github.com/amaelftah/alpinejs-devtools" class="link-out">https://github.com/amaelftah/alpinejs-devtools</a></li>
</ul>

<p>Existe una librería que nos permite añadir esta funcionalidad a <code>AlpineJS</code>:</p>

<ul>
<li><a href="https://github.com/alpine-collective/alpine-magic-helpers" class="link-out">https://github.com/alpine-collective/alpine-magic-helpers</a></li>
</ul>

<p>En cualquier caso, parece que la próxima versión de <code>AlpineJS</code> (versión 3), incluirá esta característica. Esperemos que sea así.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Usar elemento datalist como select mediante JavaScript]]></title>
                <link>https://daguilar.dev/blog/html_utilizar-un-elemento-datalist-como-si-fuera-un-select-con-la-ayuda-de-javascript</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/html_utilizar-un-elemento-datalist-como-si-fuera-un-select-con-la-ayuda-de-javascript</guid>
                <description><![CDATA[Convertir un elemento datalist en un elemento select avanzado, es decir, añadiendo valores y claves, permitiendo lo mejor de ambos elementos html.]]></description>
                <content:encoded><![CDATA[<p>Un elemento <code>datalist</code> tiene el siguiente aspecto:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example"
  id="example"
&gt;
&lt;datalist id="datalist-example"&gt;
  &lt;option&gt;Elemento 1&lt;/option&gt;
  &lt;option&gt;Elemento 2&lt;/option&gt;
  &lt;option&gt;Elemento 3&lt;/option&gt;
  &lt;option&gt;Elemento 4&lt;/option&gt;
  &lt;option&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
</code></pre>

<p>El problema radica en que queremos que se comporte como un elemento <code>select</code>, es decir, queremos que funcione con el siguiente planteamiento:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example"
  id="example"
&gt;
&lt;datalist id="datalist-example"&gt;
  &lt;option value="1"&gt;Elemento 1&lt;/option&gt;
  &lt;option value="2"&gt;Elemento 2&lt;/option&gt;
  &lt;option value="3"&gt;Elemento 3&lt;/option&gt;
  &lt;option value="4"&gt;Elemento 4&lt;/option&gt;
  &lt;option value="5"&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
</code></pre>

<p>El problema es que no va a funcionar, ya que va a considerar tanto al valor como al texto como un todo, y va a mostrar en pantalla <code>1 Elemento 1</code>, <code>2 Elemento 2</code>,...</p>

<p>Para solucionar esta situación tenemos que añadir el campo con el valor dentro de un campo personalizado <code>data</code>:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example"
  id="example"
&gt;
&lt;datalist id="datalist-example"&gt;
  &lt;option data-value="1"&gt;Elemento 1&lt;/option&gt;
  &lt;option data-value="2"&gt;Elemento 2&lt;/option&gt;
  &lt;option data-value="3"&gt;Elemento 3&lt;/option&gt;
  &lt;option data-value="4"&gt;Elemento 4&lt;/option&gt;
  &lt;option data-value="5"&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
</code></pre>

<p>Ahora nos muestra los resultados como queremos, y vincula a cada elemento un valor. El siguiente paso es añadir un campo de formulario oculto que será el que envie la información y no el campo vinculado al <code>datalist</code>:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example"
  id="visible-example"
&gt;
&lt;datalist id="datalist-example"&gt;
  &lt;option data-value="1"&gt;Elemento 1&lt;/option&gt;
  &lt;option data-value="2"&gt;Elemento 2&lt;/option&gt;
  &lt;option data-value="3"&gt;Elemento 3&lt;/option&gt;
  &lt;option data-value="4"&gt;Elemento 4&lt;/option&gt;
  &lt;option data-value="5"&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
&lt;input
  type="hidden"
  id="example"
&gt;
</code></pre>

<p>Ahora el campo con el atributo <code>id="example"</code>, será el que envie la información al <code>Controlador</code> o donde sea que enviemos la información. Pero a pesar de los cambios, esto sigue sin funcionar. Hay que utilizar un poco de <code>JavaScript</code> para conseguirlo.</p>

<p>Lo ideal sería añadir algo así con <code>AlpineJS</code>:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example"
  id="visible-example"
  x-on:change="$refs.hiddenAttribute.value = this.value"
&gt;
&lt;datalist id="datalist-example"&gt;
  &lt;option data-value="1"&gt;Elemento 1&lt;/option&gt;
  &lt;option data-value="2"&gt;Elemento 2&lt;/option&gt;
  &lt;option data-value="3"&gt;Elemento 3&lt;/option&gt;
  &lt;option data-value="4"&gt;Elemento 4&lt;/option&gt;
  &lt;option data-value="5"&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
&lt;input
  type="hidden"
  id="example"
  x-ref="hiddenAttribute"
&gt;
</code></pre>

<p>Obviamente no funciona. La idea del ejemplo anterior es solo mostrar como los eventos en un <code>datalist</code> no funcionan como lo harían en cualquier otro elemento. Para conseguirlo hay que hacer algunas trampas.</p>

<p>En este hilo de <strong>Stackoverflow</strong> en encontrado varias propuestas interesantes, y las he mezclado un poco para obtener una solución global y que funcione en todos los navegadores:</p>

<ul>
<li><a href="https://stackoverflow.com/questions/23647359/how-do-i-get-the-change-event-for-a-datalist" class="link-out">https://stackoverflow.com/questions/23647359/how-do-i-get-the-change-event-for-a-datalist</a></li>
</ul>

<p>El resultado ha sido este:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example"
  id="visible-example"
&gt;
&lt;datalist id="datalist-example"&gt;
  &lt;option data-value="1"&gt;Elemento 1&lt;/option&gt;
  &lt;option data-value="2"&gt;Elemento 2&lt;/option&gt;
  &lt;option data-value="3"&gt;Elemento 3&lt;/option&gt;
  &lt;option data-value="4"&gt;Elemento 4&lt;/option&gt;
  &lt;option data-value="5"&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
&lt;input
  type="hidden"
  id="example"
&gt;

&lt;script&gt;
  var timer;
  var dropdown = document.getElementById('visible-example');

  dropdown
      .addEventListener('change', function(event) {
          var target = event.target.value;
          var datalist = document.getElementById('datalist-example').childNodes;
          timer = setTimeout(function() {
              for (var i = 0; i &lt; datalist.length; i++) {
                  if (datalist[i].value === target) {
                      document.getElementById('example').value = datalist[i].dataset.text;
                      break;
                  }
              }
          }, 1);
      });

  dropdown.addEventListener('blur', function(e) {
      clearTimeout(timer);
  });
&lt;/script&gt;
</code></pre>

<p>En mi caso como esto va a ser un componente de <code>Laravel</code> y como no quiero lios al añadir varios en una página, he optado por añadir una clave única a las variables. Primero he creado la clave:</p>

<pre><code class="language-blade">// Por ejemplo...
@php 
  $key = md5(Str::random());
@endphp
</code></pre>

<p>Y después he cambiado el código así:</p>

<pre><code class="language-html">&lt;input
  list="datalist-example-{{ $key }}"
  id="visible-example-{{ $key }}"
&gt;
&lt;datalist id="datalist-example-{{ $key }}"&gt;
  &lt;option data-value="1"&gt;Elemento 1&lt;/option&gt;
  &lt;option data-value="2"&gt;Elemento 2&lt;/option&gt;
  &lt;option data-value="3"&gt;Elemento 3&lt;/option&gt;
  &lt;option data-value="4"&gt;Elemento 4&lt;/option&gt;
  &lt;option data-value="5"&gt;Elemento 5&lt;/option&gt;
&lt;/datalist&gt;
&lt;input
  type="hidden"
  id="example-{{ $key }}"
&gt;

&lt;script&gt;
  var timer{{ $key }};
  var dropdown{{ $key }} = document.getElementById('visible-example-{{ $key }}');

  dropdown{{ $key }}
      .addEventListener('change', function(event) {
          var target = event.target.value;
          var datalist = document.getElementById('datalist-example-{{ $key }}').childNodes;
          timer = setTimeout(function() {
              for (var i = 0; i &lt; datalist.length; i++) {
                  if (datalist[i].value === target) {
                      document.getElementById('example-{{ $key }}').value = datalist[i].dataset.text;
                      break;
                  }
              }
          }, 1);
      });

  dropdown{{ $key }}.addEventListener('blur', function(e) {
      clearTimeout(timer{{ $key }});
  });
&lt;/script&gt;
</code></pre>

<p>Imagino que esto es mejorable... pero por el momento funciona perfectamente. También quiero comentar que utilizo esto sólo cuando los campos <code>select</code> tienen muchas opciones, y es más práctico buscar que listar.</p>

<p>Lo que hago es crear dos componentes en <code>Laravel</code>, uno para los campos <code>select</code> y otro para los campos <code>datalist</code>, y entonces creo un tercer componente llamado <code>selector</code>, que tiene el siguiente código:</p>

<pre><code class="language-php">@isset($options)
    @if(count($options) &gt;= 12)
        @include('components.fields.datalist')
    @else
        @include('components.fields.select')
    @endif
@endisset
</code></pre>

<p>Lo que hace es contar los resultados a mostrar y en función de estos, muestra el resultado como si fuera un <code>select</code> o un <code>datalist</code>.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Trucos, consejos y sitaciones extrañas con Laravel Dusk]]></title>
                <link>https://daguilar.dev/blog/tests_trucos-consejos-y-situaciones-extranas-con-laravel-dusk</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/tests_trucos-consejos-y-situaciones-extranas-con-laravel-dusk</guid>
                <description><![CDATA[Realizando test para Laravel Dusk me he encontrado consituaciones muy extrañas, y he aprendido algunos trucos.]]></description>
                <content:encoded><![CDATA[<p>Llevo varios días liado con las pruebas de una plantilla para panel de administración realizada con <code>Laravel</code>, <code>Livewire</code> y <code>AlpineJS</code>, y la verdad es que <code>Laravel Dusk</code> se ha convertido en la base de las pruebas, junto con algunos test unitarios y algunos test con <code>Livewire</code>, pero básicamente están basadas en <code>Laravel Dusk</code>.</p>

<p>Me he puesto a probar algunos campos de formulario tipo <code>date</code> y me he encontrado con la siguiente situación:</p>

<pre><code class="language-php">$browser
    -&gt;loginAs($this-&gt;user)
    -&gt;visit(route('dashboard.section.index'))
    // Verifico que existe el formulario
    -&gt;assertPresent('.form')
    // Escribo la fecha que quiero buscar
    -&gt;type('@form-date', '10/10/2020')
    -&gt;click('@form-button')
    // Verifico que se ve la fecha en la pantalla
    -&gt;assertSee('10/10/2020')
</code></pre>

<p>Y como era de esperar no ha funcionado... Buscando en internet he encontrado esto:</p>

<ul>
<li><a href="https://medium.com/@stefanledin/testing-a-date-input-field-with-laravel-dusk-d6ae2a13d207" class="link-out">https://medium.com/@stefanledin/testing-a-date-input-field-with-laravel-dusk-d6ae2a13d207</a></li>
</ul>

<p>Así que he cambiado mi test por:</p>

<pre><code class="language-php">$browser
    -&gt;loginAs($this-&gt;user)
    -&gt;visit(route('dashboard.section.index'))
    // Verifico que existe el formulario
    -&gt;assertPresent('.form')
    // Escribo la fecha que quiero buscar
    -&gt;keys('#birthday', '10', '{tab}', '10', '2020')
    -&gt;click('@form-button')
    // Verifico que se ve la fecha en la pantalla
    -&gt;assertSee('10/10/2020')
</code></pre>

<p>Y sigue sin funcionar, y la fecha no se escribe correctamente debido al tabulador. Segundo intento:</p>

<pre><code class="language-php">$browser
    -&gt;loginAs($this-&gt;user)
    -&gt;visit(route('dashboard.section.index'))
    // Verifico que existe el formulario
    -&gt;assertPresent('.form')
    // Escribo la fecha que quiero buscar
    -&gt;keys('#birthday', '10', '10', '2020')
    -&gt;click('@form-button')
    // Verifico que se ve la fecha en la pantalla
    -&gt;assertSee('10/10/2020')
</code></pre>

<p>Sigue sin funcionar, pero ahora la fecha si se muestra correctamente. Tercer intento y definitivo:</p>

<pre><code class="language-php">$browser
    -&gt;loginAs($this-&gt;user)
    -&gt;visit(route('dashboard.section.index'))
    // Verifico que existe el formulario
    -&gt;assertPresent('.form')
    // Escribo la fecha que quiero buscar
    -&gt;keys('#birthday', '10', '10', '2020')
    -&gt;pause(200)
    -&gt;click('@form-button')
    // Verifico que se ve la fecha en la pantalla
    -&gt;assertSee('10/10/2020')
</code></pre>

<p>Haciendo pruebas, parece que añadiendo una pausa de <code>200</code> es el menor espacio de tiempo para que funcione. Cosas curiosas que pasan.</p>

<p>Otro truco que he empezado a utilizar por todas partes en mis pruebas, es la de la utilización de los elementos <code>wait</code>, sobre todo estos cuatro:</p>

<ul>
<li>waitFor()</li>
<li>waitUntilMissing()</li>
<li>waitForText()</li>
<li>waitUntilMissingText()</li>
</ul>

<p>Principalmente porque al añadir efectos de transición y eventos mediante <code>Livewire</code> y <code>AlpineJS</code>, la utilización de <code>pause()</code> puede hacer que nuestras pruebas sean bastante más lentas (o tarden un tiempo innecesario).</p>

<p>Por ejemplo, esta es una prueba real de un proyecto anterior (básicamente es una plataforma para la gestión agrícola):</p>

<pre><code class="language-php">$browser
    -&gt;loginAs($this-&gt;farmer)
    -&gt;visit(route('dashboard.fertilizations.index'))
    -&gt;assertUrlIs(route('dashboard.fertilizations.index'))
    -&gt;assertSelectHasOptions('@search-filter-worker', [1, 2])
    -&gt;assertSelectMissingOption('@search-filter-worker', 3)
    -&gt;click('@table-filter-button')
    // Esperamos al elemento
    -&gt;waitFor('@search-filter-worker')
    -&gt;select('@search-filter-worker', 1)
    // Esperamos a que se cargue la información - es un indicador de loading...
    -&gt;waitUntilMissing('.pulse');
</code></pre>

<p>El código original era este:</p>

<pre><code class="language-php">$browser
    -&gt;loginAs($this-&gt;farmer)
    -&gt;visit(route('dashboard.fertilizations.index'))
    -&gt;assertUrlIs(route('dashboard.fertilizations.index'))
    -&gt;assertSelectHasOptions('@search-filter-worker', [1, 2])
    -&gt;assertSelectMissingOption('@search-filter-worker', 3)
    -&gt;click('@table-filter-button')
    // Esperamos al elemento
    -&gt;pause(500)
    -&gt;select('@search-filter-worker', 1)
    // Esperamos a que se cargue la información - es un indicador de loading...
    -&gt;pause(500);
</code></pre>

<p>El primer código es más rápido. En cuanto a ganar velocidad en las pruebas con <code>Laravel Dusk</code>, un truco que me funciona es el de utilizar multiples instancias de <code>$browser</code> a la vez. Por ejemplo:</p>

<pre><code class="language-php">$this-&gt;browse(function ($browser) {
    $browser
        -&gt;loginAs($this-&gt;farmer)
        -&gt;visit(route('dashboard.section1.index'))
        -&gt;assertUrlIs(route('dashboard.section1.index'));
});

$this-&gt;browse(function ($browser) {
    $browser
        -&gt;loginAs($this-&gt;farmer)
        -&gt;visit(route('dashboard.section2.index'))
        -&gt;assertUrlIs(route('dashboard.section1.index'));
});
</code></pre>

<p>Si queremos que la prueba sea más rápida, debemos hacerla así:</p>

<pre><code class="language-php">$this-&gt;browse(function ($browser1, $browser2) {
    $browser1
        -&gt;loginAs($this-&gt;farmer)
        -&gt;visit(route('dashboard.section1.index'))
        -&gt;assertUrlIs(route('dashboard.section1.index'));
    $browser2
        -&gt;loginAs($this-&gt;farmer)
        -&gt;visit(route('dashboard.section2.index'))
        -&gt;assertUrlIs(route('dashboard.section1.index'));
});
</code></pre>

<p>El incremento de velocidad es considerable, o al menos, a mi me lo está pareciendo...</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Utilizando el formato de fechas europeo en Laravel]]></title>
                <link>https://daguilar.dev/blog/database_utilizando-el-formato-de-fechas-europeo-en-los-modelos-de-laravel-con-custom-cast</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/database_utilizando-el-formato-de-fechas-europeo-en-los-modelos-de-laravel-con-custom-cast</guid>
                <description><![CDATA[Para la gestión de fechas automáticas con Laravel, utilizaremos un CAST personalizado desde el modelo, para utilizar tanto el formato de fechas europeo, como el formato de fechas de la base de datos.]]></description>
                <content:encoded><![CDATA[<p>La gestión de las fechas con <code>Laravel</code> puede ser un poco complicado, sobre todo, porque el formato de fechas en Europa es diferente al formato estadounidense y diferente al formato utilizado por las bases de datos.</p>

<p>Por ejemplo en Europa utilizados el formato <code>d/m/Y</code>, en Estados Unidos utilizan el formato <code>m/d/Y</code> y las bases de datos utilizan el formato <code>Y-m-d</code>...</p>

<p>Por defecto <code>Laravel</code> va a utilizar el formato de la base de datos (<code>timestamp</code>), es decir el formato <code>Y-m-d H:i:s</code>, por lo que tendremos que adaptarlo si queremos que en nuestro proyecto se muestren en formato europeo.</p>

<p>Para ello tenemos varias opciones. La primera sería mediante <code>Accessors</code> y <code>Mutators</code>, los cuales tenemos que añadir en el modelo:</p>

<pre><code class="language-php">/**
 * Fecha en formato europeo
 *
 * @param  string  $value
 * @return string
 */
public function getDateAttribute($value)
{
    return $value-&gt;format('d/m/Y');
}

/**
 * Fecha en formato base de datos
 *
 * @param  string  $value
 * @return string
 */
public function setDateAttribute($value)
{
    $this-&gt;attributes['date'] = $value-&gt;format('Y-m-d');
}
</code></pre>

<p>Así saldríamos del paso, pero tendríamos que hacer esto en cada modelo... no es una solución práctica para un proyecto medio.</p>

<p>Lo ideal será utilizar un <code>CAST</code> personalizado, como los que vienen por defecto en <code>Laravel</code>:</p>

<pre><code class="language-php">/**
 * The attributes that should be cast.
 *
 * @var array
 */
protected $casts = [
    'is_admin' =&gt; 'boolean',
];
</code></pre>

<p>Y automáticamente <code>Laravel</code> gestionará el campo como boleano. Ahora se trata de hacer lo mismo pero para fechas, y lo primero será crear una clase nueva (yo las guardo en la carpeta <code>App\Models\Casts</code>):</p>

<pre><code class="language-php">&lt;?php

namespace App\Models\Casts;

use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
use Carbon\Carbon;

class DateFormat implements CastsAttributes
{
    /**
     * private @var format
     */
    private string $getFormat = 'd/m/Y';
    private string $setFormat = 'Y-m-d';

    /**
     * Cast the given value.
     *
     * @param  \Illuminate\Database\Eloquent\Model  $model
     * @param  string  $key
     * @param  mixed  $value
     * @param  array  $attributes
     * @return array
     */
    public function get($model, $key, $value, $attributes)
    {
        return strlen($value)
            ? Carbon::parse($value)-&gt;format($this-&gt;dateFormat)
            : null;
    }

    /**
     * Prepare the given value for storage.
     *
     * @param  \Illuminate\Database\Eloquent\Model  $model
     * @param  string  $key
     * @param  array  $value
     * @param  array  $attributes
     * @return string
     */
    public function set($model, $key, $value, $attributes)
    {
        return strlen($value)
            ? Carbon::parse($value)-&gt;format($this-&gt;setFormat)
            : null;
    }
}
</code></pre>

<p>Y la utilización en el modelo sería:</p>

<pre><code class="language-php">/**
 * The attributes that should be cast.
 *
 * @var array
 */
protected $casts = [
    'my_date' =&gt; \App\Models\Casts\DateFormat::class,
];
</code></pre>

<p>Espero que sea útil.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.devlaravel-date-format.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Librerías JavaScript - creación de mapas con LeafletJS]]></title>
                <link>https://daguilar.dev/blog/javascript_librerias-javascript-creacion-de-mapas-con-leafletjs</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/javascript_librerias-javascript-creacion-de-mapas-con-leafletjs</guid>
                <description><![CDATA[Utilización de la librería JavaScript LeafletJS para la creación de mapas a través de servicios WMS.]]></description>
                <content:encoded><![CDATA[<p>Según wikipedia<sup>1</sup> un servicio WMS produce mapas de datos referenciados espacialmente, de forma dinámica a partir de información geográfica. Es decir, estamos hablando de servicios como GoogleMaps, OpenStreetMap o similares. <strong>Se trata entonces de capas de información que se muestran superpuestas y en forma de mapa</strong>.</p>

<p>Podemos integrar estos servicios en nuestro proyecto web, mediante la librería <a href="https://leafletjs.com/" class="link-out">LeafletJS</a></p>

<p>Lo primero que tenemos que hacer es instalarla en nuestro proyecto. En el <code>&lt;head&gt;</code> de nuestra web, añadimos el código <code>css</code> y <code>JavaScript</code>:</p>

<pre><code class="language-html">&lt;link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
   integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
   crossorigin=""/&gt;
&lt;!-- Make sure you put this AFTER Leaflet's CSS --&gt;
&lt;script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
  integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
  crossorigin=""&gt;&lt;/script&gt;
</code></pre>

<p>Advierten de que pongas primero el <code>css</code> y después el <code>JavaScript</code>, tal y como se muestra en el ejemplo.</p>

<p>Lo primero que tenemos que hacer es definir las variables por defecto:</p>

<pre><code class="language-javascript">var lat = '37.7634109';
var lng = '-0.7700499';
var maxZoom = '18';
var zoom = '12';
var map;
</code></pre>

<p>Tenemos que definir la latitud y la longitud donde queremos que se centre el mapa que vamos a generar. Continuamos con el <em>zoom</em> máximo que vamos a permitir (y que permite el sistema WMS) y con el <em>zoom</em> por defecto que se mostrará al cargar el mapa. Por último, hay que definir la variable donde se creará el mapa. <strong>Ahora ya podemos crear el mapa</strong>:</p>

<pre><code class="language-javascript">this.map = L.map('mapContainer').setView([lat, lng], this.zoom);

L.tileLayer.wms( '//www.ign.es/wms-inspire/pnoa-ma', {
    attribution: '&lt;a href="http://www.ign.es" target="_blank"&gt;© Instituto Geográfico Nacional&lt;/a&gt;',
    layers: 'OI.OrthoimageCoverage',
    format: 'image/jpeg',
    transparent: false,
    version: '1.3.0',
    crs: L.CRS.EPSG4326,
    maxZoom: this.maxZoom
}).addTo( this.map );
</code></pre>

<p>En principio ya estaría terminado, ahora tenemos que crear un <code>div</code> con el identificador <code>mapContainer</code> (por ejemplo) donde se mostrará el mapa:</p>

<pre><code class="language-html">&lt;div id="mapContainer" style="width: 400px; height: 400px;"&gt;&lt;/div&gt;
</code></pre>

<p>Obviamente, pudes poner el nombre que quieras al contenedor:</p>

<pre><code class="language-javascript">this.map = L.map('elNombreQueQuieras').setView([lat, lng], this.zoom);
</code></pre>

<p>Es importante definir el ancho y el alto del contenedor, o no se mostrará nada, ya que si no indicamos nada nos creará un contenedor de ancho 0 y alto 0.</p>

<p>Ahora podemos refinarlo on poco:</p>

<pre><code class="language-javascript">var lat = '37.7634109';
var lng = '-0.7700499';
var maxZoom = '18';
var zoom = '12';
var map;

this.createMap('mapContainer');

function createMap(mapID) {
    this.map = L.map(mapID).setView([lat, lng], this.zoom);

    L.tileLayer.wms( '//www.ign.es/wms-inspire/pnoa-ma', {
        attribution: '&lt;a href="http://www.ign.es" target="_blank"&gt;© Instituto Geográfico Nacional&lt;/a&gt;',
        layers: 'OI.OrthoimageCoverage',
        format: 'image/jpeg',
        transparent: false,
        version: '1.3.0',
        crs: L.CRS.EPSG4326,
        maxZoom: this.maxZoom
    }).addTo( this.map );
}
</code></pre>

<p><strong>Vale, expliquemos un poco el código</strong>. Lo primero es buscar un servicio WMS gratuito, en este caso es del Instituto Geográfico Nacional<sup>2</sup> de España, pero existen cientos... ya es cuestión de que busques el que más te interesa. En mi caso, suelo utilizar este WMS para mostrar mapas de España.</p>

<p>Los campos que deben indicarse para conectar con el servicio WMS son:</p>

<ul>
<li><strong>attribution</strong>: Sirve para mostrar la autoria del servicio. Es obligatorio indicarlo según la mayoría de condiciones de uso de estos servicios.</li>
<li><strong>layers</strong>: las capas que queremos mostrar. Los servicios WMS tienen una dirección donde se muestra todas las características, incluidas las capas disponibles, esta funcionalidad se llama <em>GetCapabilities</em> y por ejemplo en el caso del servicio utilizado en el ejemplo, lo puedes encontrar aquí:

<ul>
<li><a href="https://www.ign.es/wms-inspire/pnoa-ma?request=GetCapabilities&amp;service=WMS" class="link-out">PNOA GetCapabilities</a></li>
</ul></li>
<li><strong>format</strong>: el formato de visualización del mapa. En el servicio <em>GetCapabilities</em> se encuentran todos los que están disponibles.</li>
<li><strong>transparent</strong>: si queremos que la capa sea transparente. A veces puede interesarnos.</li>
<li><strong>versión</strong>: es la versión del servicio WMS. También se puede ver en <em>GetCapabilities</em>.</li>
<li><strong>crs</strong>: es el Sistema de referencia de coordenadas. También se puede ver los disponibles en <em>GetCapabilities</em>. Este tema es complejo, y sinceramente, si solo buscas mostrar un mapa tampoco te compliques demasiado la vida y selecciona uno al azar... aunque el EPSG4326 es una buena elección, ya que es la equivalencia en EPSG del sistema WGS84<sup>3</sup> que es un estándar utilizado en cartografía, geodesia y navegación.</li>
<li><strong>maxZoom</strong>: el <em>zoom</em> máximo que vamos a permitir. Sin olvidar que el servicio WMS también tendrá un máximo y no podremos sobrepasarlo.</li>
</ul>

<p><strong>¿Y si queremos añadir un marcador al mapa indicando el punto exacto de las coordenadas?</strong></p>

<p>Pues creamos un marcador y lo añadimos al mapa:</p>

<pre><code class="language-javascript">var marker = L.marker( new L.LatLng( this.lat, this.lng ) ).addTo( this.map );
</code></pre>

<p>En este caso estoy indicando que use las mismas coordenadas de latitud y longitud, pero se puden poner otras... o incluso varias. Para esto tendremos que añadir un marcador por cada punto.</p>

<p>Un último consejo, sobre todo si vamos a incluir el mapa con librerías reactivas tipo VueJS o AplineJS. En estos casos es preferible añadir una recarga del mapa una vez generada la página... por si acaso:</p>

<pre><code class="language-javascript">function reloadMap() {
    setTimeout(function(){ this.map.invalidateSize() }, 200);
}
</code></pre>

<p>Todo junto quedaría así:</p>

<pre><code class="language-javascript">var lat = '37.7634109';
var lng = '-0.7700499';
var maxZoom = '18';
var zoom = '12';
var map, marker;

this.createMap('mapContainer');

this.marker = L.marker( new L.LatLng( this.lat, this.lng ) ).addTo( this.map );

function createMap(mapID) {
    this.map = L.map(mapID).setView([lat, lng], this.zoom);

    L.tileLayer.wms( '//www.ign.es/wms-inspire/pnoa-ma', {
        attribution: '&lt;a href="http://www.ign.es" target="_blank"&gt;© Instituto Geográfico Nacional&lt;/a&gt;',
        layers: 'OI.OrthoimageCoverage',
        format: 'image/jpeg',
        transparent: false,
        version: '1.3.0',
        crs: L.CRS.EPSG4326,
        maxZoom: this.maxZoom
    }).addTo( this.map );

    this.reloadMap();
}

function reloadMap() {
    setTimeout(function(){ this.map.invalidateSize() }, 200);
}
</code></pre>

<p>Esto último método <code>reloadMap()</code>, es básico si el proyecto utiliza <code>Livewire</code>, <code>AlpineJS</code>, <code>Laravel Nova</code>, <code>VueJS</code>...</p>

<p>En la web oficial de <code>Leaflet</code> vas a encontrar muchos ejemplos:</p>

<ul>
<li><a href="https://leafletjs.com/examples.html" class="link-out">https://leafletjs.com/examples.html</a></li>
</ul>

<h3>Referencias</h3>

<ol>
<li>https://es.wikipedia.org/wiki/Web_Map_Service</li>
<li>http://www.ign.es/web/ign/portal</li>
<li>https://ingecivilcusco.blogspot.com/2009/09/sistema-geodesico-mundial-1984-wgs84.html</li>
</ol>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Tue, 20 Oct 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Componentes dinámicos y condicionales con Livewire y AlpineJS]]></title>
                <link>https://daguilar.dev/blog/livewire_cargar-componentes-de-forma-condicional-con-livewire-y-alpinejs</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/livewire_cargar-componentes-de-forma-condicional-con-livewire-y-alpinejs</guid>
                <description><![CDATA[Código para cargar componentes de Laravel Livewire de forma dinámica mediante AlpineJS, y todo ello, de forma condicional con window.Livewire.rescan()]]></description>
                <content:encoded><![CDATA[<p>Me he encontrado en la situación de querer cargar componentes de <strong>Laravel Livewire</strong> de forma condicional, y todo ello, en función de un campo <code>select</code> o de un simple <em>click</em> en un enlace (en mi caso se trataba de un sistema de pestañas y contenedores).</p>

<p>La idea era no cargar nada de inicio y en función de la selección, ir cargando de forma dinámica un componente determinado tal y como se hubiera hecho con <code>Jquery</code>. Terminando con la carga del resultado de la consulta <code>AJAX</code> en un contenedor <code>div</code>:</p>

<pre><code class="language-javascript">$("button").on('click', function(){
    $("#div").load("ajaxResponse.php");
});
</code></pre>

<p>El sistema que planteo tiene un reto más, y es el de reutilizar componentes <code>Livewire</code> que ya he utilizado en otra parte del proyecto, y por tanto, no tener que repetir código. Esto tiene un problema (realmente tiene varios), y es que no puedo modificar (ni adaptar) el componente original que voy a cargar en el contenedor, ya que al hacerlo, podría dejar de funcionar en su ubicación original, y al final la solución se convierte en problema.</p>

<p>El planteamiento era más o menos así:</p>

<pre><code class="language-html">&lt;span x-data="{load: 0}"
    &lt;div id="selectors"&gt;
        &lt;a href="#" x-click="load = 1"&gt;Cargar contenido 1&lt;/a&gt;
        &lt;a href="#" x-click="load = 2"&gt;Cargar contenido 2&lt;/a&gt;
        &lt;a href="#" x-click="load = 3"&gt;Cargar contenido 3&lt;/a&gt;
    &lt;/div&gt;
    &lt;div id="rootContainer"&gt;
        &lt;template x-if="load === 1"&gt;
            &lt;livewire:component1 /&gt;
        &lt;/template&gt;
        &lt;template x-if="load === 2"&gt;
            &lt;livewire:component2 /&gt;
        &lt;/template&gt;
        &lt;template x-if="load === 3"&gt;
            &lt;livewire:component3 /&gt;
        &lt;/template&gt;
    &lt;/div&gt;
&lt;/span&gt;
</code></pre>

<p>Y obviamente no funcionaba. Obtenía el siguiente mensaje de error:</p>

<p><code>Uncaught TypeError: Cannot read property '$wire' of undefined</code></p>

<p>Así que estaba empezando a pensar que tendría que hacer algo así:</p>

<pre><code class="language-html">&lt;span x-data="{load: 0}"
    &lt;div id="selectors"&gt;
        &lt;a href="#" x-click="load = 1"&gt;Cargar contenido 1&lt;/a&gt;
        &lt;a href="#" x-click="load = 2"&gt;Cargar contenido 2&lt;/a&gt;
        &lt;a href="#" x-click="load = 3"&gt;Cargar contenido 3&lt;/a&gt;
    &lt;/div&gt;
    &lt;div id="rootContainer"&gt;
        &lt;div x-show="load === 1"&gt;
            &lt;livewire:component1 /&gt;
        &lt;/div&gt;
        &lt;div x-show="load === 2"&gt;
            &lt;livewire:component2 /&gt;
        &lt;/div&gt;
        &lt;div x-show="load === 3"&gt;
            &lt;livewire:component3 /&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/span&gt;
</code></pre>

<p>Lo cual está bien si vamos a trabajar con componentes simples. No era el caso  y encima son muchos componentes (doce en total). Donde te puedes encontrar perfectamente con 87 llamadas a la base de datos (en este caso particular)... una situación poco ideal.</p>

<p>El error de mi primera aproximación al problema, se debía a que cuando utilizas <code>x-if</code> tienes que utilizar la equiqueta <code>template</code>, o da error. Esta etiqueta, te obliga a tener un solo componente <code>root</code>, es decir, tienes que meter todo tu código en un contenedor <code>div</code> principal.</p>

<p>El ejemplo siguiente va a dar error, ya que no dispone de un contenedor principal:</p>

<pre><code class="language-html">//component1.blade.php

&lt;h1&gt;Title&lt;/h1&gt;
&lt;h4&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Impedit sapiente pariatur error illo. Veniam, sunt reprehenderit libero rerum nobis doloribus ex error alias laudantium ipsum sit, eius mollitia necessitatibus vitae?&lt;/h4&gt;
</code></pre>

<p>Se debe cambiar por:</p>

<pre><code class="language-html">//component1.blade.php
&lt;div&gt;
    &lt;h1&gt;Title&lt;/h1&gt;
    &lt;h4&gt;Lorem, ipsum dolor sit amet consectetur adipisicing elit. Impedit sapiente pariatur error illo. Veniam, sunt reprehenderit libero rerum nobis doloribus ex error alias laudantium ipsum sit, eius mollitia necessitatibus vitae?&lt;/h4&gt;
&lt;/div&gt;
</code></pre>

<p>Después de revisar media internet en busca de soluciones, llegué a este comentario en <code>github</code> sobre un problema que parecía similar:</p>

<ul>
<li><a href="https://github.com/livewire/livewire/pull/1534" class="link-out">https://github.com/livewire/livewire/pull/1534</a></li>
</ul>

<p>Y proponía una solución parecida a esta:</p>

<pre><code class="language-html">&lt;span x-data="{load: 0}"
    &lt;div id="selectors"&gt;
        &lt;a href="#" x-click="load = 1"&gt;Cargar contenido 1&lt;/a&gt;
        &lt;a href="#" x-click="load = 2"&gt;Cargar contenido 2&lt;/a&gt;
        &lt;a href="#" x-click="load = 3"&gt;Cargar contenido 3&lt;/a&gt;
    &lt;/div&gt;
    &lt;div id="rootContainer"&gt;
        &lt;template x-if="load === 1"&gt;
            &lt;div x-data="{}" x-init="window.Livewire.rescan($el)"&gt;
                &lt;livewire:component1 /&gt;
            &lt;/div&gt;
        &lt;/template&gt;
        &lt;template x-if="load === 2"&gt;
            &lt;div x-data="{}" x-init="window.Livewire.rescan($el)"&gt;
                &lt;livewire:component2 /&gt;
            &lt;/div&gt;
        &lt;/template&gt;
        &lt;template x-if="load === 3"&gt;
            &lt;div x-data="{}" x-init="window.Livewire.rescan($el)"&gt;
                &lt;livewire:component3 /&gt;
            &lt;/div&gt;
        &lt;/template&gt;
    &lt;/div&gt;
&lt;/span&gt;
</code></pre>

<p>Esta técnica, lo que hace es reiniciar cada elemento <code>Livewire</code>, y al hacer esto, los elementos se van visualizando conforme hacemos <em>click</em> en cada enlace, realmente es lo que estaba buscando.</p>

<p>En este punto, me puse a revisar el código <code>HTML</code> y efectivamente, todo el código se había eliminado del <code>DOM</code>... el problema lo encontré al revisar las consultas a la base de datos: seguían siendo 87.</p>

<p>Es decir, por un lado eliminaba el <code>HTML</code> del <code>DOM</code> hasta el momento en que se hace la llamada a través del <code>click</code> en el enlace, pero por otro lado, seguía realizando las consultas a la base de datos.</p>

<p>Seguía teniendo prácticamente el mismo problema que al principio, aunque con un código <code>HTML</code> más ligero...</p>

<p>Mi siguiente planteamiento fue el de crear un componente <code>Livewire</code>, de modo que cada vez que se hiciera <code>click</code> en un enlace, se enviara una variable con el componente a cargar mediante <code>Livewire</code>:</p>

<pre><code class="language-html">&lt;a wire:click="setContainer('1')"&gt;Container 1&lt;/a&gt;
</code></pre>

<p>Y dentro del nuevo componente <code>Livewire</code>:</p>

<pre><code class="language-html">&lt;span x-data="{load: 0}"
    &lt;div id="selectors"&gt;
        &lt;a href="#" x-click="load = 1" wire:click="setContainer('1')"&gt;Cargar contenido 1&lt;/a&gt;
        &lt;a href="#" x-click="load = 2" wire:click="setContainer('2')"&gt;Cargar contenido 2&lt;/a&gt;
        &lt;a href="#" x-click="load = 3" wire:click="setContainer('3')"&gt;Cargar contenido 3&lt;/a&gt;
        ...
    &lt;/div&gt;
    &lt;div id="rootContainer"&gt;
        @if($container === 1)
            &lt;livewire:component1 /&gt;
        @endif
        @if($container === 2)
            &lt;livewire:component2 /&gt;
        @endif
        @if($container === 3)
            &lt;livewire:component3 /&gt;
        @endif
        ...
    &lt;/div&gt;
&lt;/span&gt;
</code></pre>

<p>Y el nuevo archivo <code>Livewire</code></p>

<pre><code class="language-php">&lt;?php

namespace App\Http\Livewire;

use Livewire\Component;

class Tabs extends Component
{
    public $container;

    public function setContainer($container)
    {
        $this-&gt;container = $container;
    }

    public function render()
    {
        return view('dashboard.sections.view', [
            'container' =&gt; $this-&gt;container,
        ]);
    }
}
</code></pre>

<p>Ahora solo queda cargar el componente con los enlaces y el contenedor:</p>

<pre><code class="language-html">    &lt;livewire:tabs container="0" :key="Str::random()" /&gt;
</code></pre>

<p>Y lo curioso es que funciona, pero da un error de JavaScript:</p>

<pre><code class="language-javascript">Uncaught (in promise) TypeError: Cannot read property 'fingerprint' of null
</code></pre>

<p>Por lo visto este error es debido a que hay un problema con las <code>keys</code> que genera <code>Livewire</code> y por algún motivo, no he sido capaz de ver donde se han generado claves repetidas...</p>

<ul>
<li><a href="https://github.com/livewire/livewire/issues/1686" class="link-out">https://github.com/livewire/livewire/issues/1686
</a></li>
</ul>

<h3>Actualización 19/10/2020</h3>

<p>Bien, he encontrado una solución pero que parece un parche... y tengo la sensación que es un <code>bug</code> en <code>alplineJS</code>. Consiste en reiniciarlizar <code>x-data</code> y recargar el componente <code>Livewire</code>.</p>

<pre><code class="language-html">&lt;span x-data="{load: 0, error: true}"
    &lt;div id="selectors"&gt;
        &lt;a href="#" x-click="load = 1" wire:click="setContainer('1')"&gt;Cargar contenido 1&lt;/a&gt;
        ...
    &lt;/div&gt;
    &lt;div id="rootContainer"&gt;
        &lt;div x-data="{}" x-init="window.Livewire.rescan($el)"&gt;
            @if($container === 1)
                &lt;livewire:component1 /&gt;
            @endif
        &lt;/div&gt;
        ...
    &lt;/div&gt;
&lt;/span&gt;
</code></pre>

<p>Aqui es donde viene lo raro, en el componente que se carga (según el ejemplo anterior <code>resources/views/livewire/component1</code>) también hay que volver a poner el código de reinicialización:</p>

<pre><code class="language-html">&lt;div x-data="{}" x-init="window.Livewire.rescan($el)"&gt;
    ...componente
&lt;/div&gt;
</code></pre>

<p>Sinceramente, estoy desconcertado... sigue dando error pero ahora funciona correctamente, y si nos olvidamos del mensaje en la consola de <code>JavaScript</code> es como si no pasara nada.</p>

<p>Seguiré investigando...</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Buscador con Laravel Livewire y AlpineJS]]></title>
                <link>https://daguilar.dev/blog/livewire_buscador-con-laravel-livewire-y-alpinejs</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/livewire_buscador-con-laravel-livewire-y-alpinejs</guid>
                <description><![CDATA[Buscador desarrollado con el framework Laravel, el package Livewire y el framework para JavaScript AlpineJS]]></description>
                <content:encoded><![CDATA[<p><strong>El objetivo de este artículo es explicar cómo desarrollar un buscador con Livewire y complementado con AlpineJS</strong>, mi nuevo framework favorito para JavaScript.</p>

<p>Lo primero es crear el componente para Livewire:</p>

<pre><code class="language-bash">php artisan make:livewire search
</code></pre>

<p>Y nos generará dos archivos, uno ubicado en la carpeta <code>app\Http\Livewire\Search.php</code> y el otro (con las vistas) en la carpeta <code>resources/views/livewire/search.blade.php</code>. Ya tenemos todo listo para empezar (siempre que tengamos Livewire y AlpineJS configurados en nuestro proyecto). Empezaremos por el archivo de las vistas:</p>

<pre><code class="language-html">&lt;div style="position:relative" x-data="inputSearch()"&gt;
    &lt;!-- Campo de búsqueda --&gt;
    &lt;input 
        type="text" 
        x-on:keydown="iconReset = true" 
        wire:model="search" 
        placeholder="Introduzca el término a buscar..."
    &gt;
    &lt;!-- Icono para borrar el campo de búsqueda (ajústalo con tu css) --&gt;
    &lt;div style="position: absolute" x-show="iconReset"&gt;
        &lt;svg 
            class="h-5 w-5 mt-1 cursor-pointer" 
            x-on:click="iconReset = false" 
            wire:click="clearSearch" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
        &gt;
            &lt;path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M6 18L18 6M6 6l12 12"
            &gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    function inputSearch() {
        return {
            iconReset: false,
            search: '',
        }
    }
&lt;/script&gt;
</code></pre>

<p>La idea es que cuando empecemos a escribir aparezca un icono ("X") para borrar el contenido del campo y resetear la búsqueda. Yo personalmente creo en mi <code>layout.blade.php</code> un campo para ir añadiendo el código JavaScript al final de la página:</p>

<pre><code class="language-html">@stack('javascript')
</code></pre>

<p>Y el código JavaScript quedaría así:</p>

<pre><code class="language-html">@push('javascript')
    &lt;script&gt;
        function inputSearch() {
            return {
                iconReset: false,
                search: '',
            }
        }
    &lt;/script&gt;
@endpush
</code></pre>

<p>Pero esto ya depende de cada uno, y de cómo organice su proyecto. Continuemos con el archivo <code>app\Http\Livewire\Search.php</code>:</p>

<pre><code class="language-php">&lt;?php

namespace App\Http\Livewire;

use Illuminate\Support\Facades\DB;
use Livewire\Component;

class NavbarInputSearch extends Component
{
    public $search;
    public $model;
    public $fields;
    public $relationships;

    protected $queryString = [
        'search' =&gt; ['except' =&gt; ''],
    ];

    public function mount()
    {
        // Definimos los campos de la tabla en los que queremos buscar
        $this-&gt;fields = ['field1', 'field2'];
        // Si queremos añadir relaciones para evitar el N+1
        $this-&gt;relationships = ['relationship'];
        //Definimos el modelo 
        $this-&gt;model = '\App\Models\YourModel';
    }

    public function render()
    {
        return view('livewire.search', [
            'results' =&gt; empty($this-&gt;search) ? collect() : $this-&gt;query(),
        ]);
    }

    public function resetInput()
    {
        $this-&gt;reset('search');
    }

    private function query()
    {
        return $this-&gt;whereConditions()
            // Si no queremos añadir relationships lo quitamos...
            -&gt;with($this-&gt;relationships)
            // Por ejemplo...
            -&gt;take(10)
            -&gt;get();
    }

    private function whereConditions()
    {
        $query = $this-&gt;model::Query();

        foreach($this-&gt;fields as $field) {
            $query = $query-&gt;orWhere($field, 'like', '%' . $this-&gt;search . '%');
        }

        return $query;
    }
}
</code></pre>

<p>Ahora nos quedaría añadir a nuestra vista los resultados:</p>

<pre><code class="language-html">&lt;!-- Buscador --&gt;
&lt;div style="position: relative" x-data="inputSearch()"&gt;
    &lt;!-- Campo de búsqueda --&gt;
    &lt;input 
        type="text" 
        x-on:keydown="iconReset = true" 
        wire:model="search" 
        placeholder="Introduzca el término a buscar..."
    &gt;
    &lt;!-- Icono para borrar el campo de búsqueda (ajústalo con tu css) --&gt;
    &lt;div style="position: absolute" x-show="iconReset"&gt;
        &lt;svg 
            class="h-5 w-5 mt-1 cursor-pointer" 
            x-on:click="iconReset = false" 
            wire:click="clearSearch" 
            xmlns="http://www.w3.org/2000/svg" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
        &gt;
            &lt;path 
                stroke-linecap="round" 
                stroke-linejoin="round" 
                stroke-width="2" 
                d="M6 18L18 6M6 6l12 12"
            &gt;
            &lt;/path&gt;
        &lt;/svg&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Resultados --&gt;
@isset($results)
    &lt;ul&gt;
        @foreach($results as $item)
            &lt;li&gt;
                {{ $item-&gt;nombre_del_campo }}
            &lt;/li&gt;
        @endforeach
    &lt;/ul&gt;
@endisset

&lt;!-- Código JavaScript --&gt;
&lt;script&gt;
    function inputSearch() {
        return {
            iconReset: false,
            search: '',
        }
    }
&lt;/script&gt;
</code></pre>

<p>Básicamente sería así... Más información aquí:</p>

<ul>
<li><a href="https://laravel-livewire.com/docs/2.x/making-components" class="link-out">https://laravel-livewire.com/docs/2.x/making-components</a></li>
<li><a href="https://laravel-livewire.com/docs/2.x/query-string" class="link-out">https://laravel-livewire.com/docs/2.x/query-string</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Algunas ideas sobre diseño responsable (responsive design)]]></title>
                <link>https://daguilar.dev/blog/html_algunas-ideas-sobre-diseno-responsable</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/html_algunas-ideas-sobre-diseno-responsable</guid>
                <description><![CDATA[Diseño de una web responsable y adaptable a los diferentes dispositivos, pantallas de ordenador, tablets, móviles,... Una pequeña guía con conceptos básicos de HTML5 y CSS, y como optimizarlos para conseguir el mejor proyecto web posible.]]></description>
                <content:encoded><![CDATA[<p>Cuando se empieza un proyecto hay siempre que tener en cuenta dos aspectos: la usabilidad y el diseño responsable adaptado a todos los dispositivos. Esto en general es lo correcto, pero también puede llegar a convertirse en una pesadilla, sobre todo con el diseño responsable.</p>

<p>Desde mi punto de vista, y seguramente estoy equivocado, creo que la mejor estrategia para afrontar un desarrollo web es centrando el proyecto en dos componentes diferenciados, por un lado el diseño de una app para teléfono móvil y por el otro, el diseño de una web responsable que se adapte al resto de dispositivos.</p>

<p>Creo que la idea de que un web sirva para móviles, tablets, portátiles y ordenadores de sobremesa es una locura y que termina absorviendo demasiado tiempo (a veces inútil).</p>

<p>Mi planteamiento es simple, consiste en centrarse en los dispositivos de un tamaño aceptable y que permiten la experiencia completa de una web, como son el: <strong>tablet, el portatil y ordenador de sobremesa</strong>. Y para el <strong>teléfono móvil</strong>, centrarnos en el desarrollo de una aplicación para móvil o directamente una web pensada exclusivamente para las limitaciones de espacio de este dispositivo, en otras palabras: <strong>hacer un desarrollo exclusivo para móviles</strong>.</p>

<p>Vamos a ver, ya que hay que ponerse a desarrollar hojas de estilo específicas para un teléfono móvil, y que seguramente esto va a terminar convirtiéndose una hoja de estilos independiente, lo mejor es hacerlo bien y en vez de adaptar el proyecto al dispositivo, centrarse en desarrollar un poryecto exclusivo para este dispositivo. <strong>Vamos a terminar tardando lo mismo y el resultado va a ser mucho mejor</strong>.</p>

<p>Personalmente, para el desarrollo de aplicaciones estoy utilizando <a href="https://www.electronjs.org/" class="link-out">ElectronJS</a>, pero supongo que existen varias alternativas para el desarrollo de apps multi-dispositivo. En internet vas a encontrar muchos tutoriales y cursos sobre el tema.</p>

<p>Respecto a la web multidispositivo... el primer problema que te vas a encontrar es el de la gestión de los eventos. Por ejemplo, cuando en tu código HTML introduces un evento CSS tipo <code>:hover</code>, se genera un problema serio, ya que un tablet no dispone de esta opción, y por tanto, si nuestro menú de navegación funciona así, el usuario va a tener una limitación importante. Veamos un ejemplo:</p>

<pre><code class="language-html">&lt;style&gt;
  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    min-width: 200px;
    z-index: 50;
  }

  .dropdown:hover .dropdown-content {
    display: block;
  }
&lt;/style&gt;

&lt;div class="dropdown"&gt;
  &lt;span&gt;Desplegable&lt;/span&gt;
  &lt;div class="dropdown-content"&gt;
    &lt;p&gt;Contenido del desplegable&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p><strong>La solución a este problema es bastante sencilla, pero me llevó un tiempo dar con la solución correcta (al menos para mi)</strong>.Mi idea era buscar una opción que no me obligara a ir duplicando el código CSS para tablets (este ha sido el motivo principal para dividir el proyecto en una web y una app), y para ello encontré un artículo de <strong>Mezo Istvan</strong> sobre el tema <a href="https://medium.com/@mezoistvan/finally-a-css-only-solution-to-hover-on-touchscreens-c498af39c31c" class="link-out">Finally, a CSS only solution to :hover on touchscreens</a></p>

<p>En él plantea la idea de utilizar los <em>media queries</em> para no tener que repetir código.</p>

<p>Partamos del código del ejemplo anterior y uticemos los <em>media queries</em> para hacerlo funcionar en un tablet:</p>

<pre><code class="language-html">&lt;style&gt;
  .dropdown {
    position: relative;
    display: inline-block;
  }

  .dropdown-content {
    display: none;
    position: absolute;
    min-width: 200px;
    z-index: 50;
  }

  @media(hover: hover) and (pointer: fine) {
    .dropdown:hover .dropdown-content {
      display: block;
    }
  }
&lt;/style&gt;

&lt;div class="dropdown"&gt;
  &lt;span&gt;Desplegable&lt;/span&gt;
  &lt;div class="dropdown-content"&gt;
    &lt;p&gt;Contenido del desplegable&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Ahora cuando un tablet haga <em>click</em> sobre un evento <code>:hover</code>, funcionará sin problemas.</p>

<p>Tiene la limitación de que si utilizamos sistemas como <a href="https://getbootstrap.com/" class="link-out">Bootstrap</a> o <a href="https://tailwindcss.com/" class="link-out">Tailwind</a> vamos a tener que crear nuestros propios estilos, pero en cualquier caso a mi me parece una buena solución.</p>

<p>Para finalizar, creo que hay que tener en cuenta algunas cuestiones sobre el tema:</p>

<ul>
<li>Evitar los eventos <code>:hover</code> en lo posible en el web. Yo personalmente me limito a la barra de navegación y utilizo esta técnica descrita arriba.</li>
<li>Si utilizamos enlaces para el efecto <code>:hover</code> hay que evitar que tengan respuesta, es decir, un enlace <code>&lt;a href="#"&gt;enlace&lt;/a&gt;</code> no funcionará con la técnica de los <em>media queries</em>, tendríamos que cambiarlo por esto otro <code>&lt;a href="javascript:void(0)"&gt;enlace&lt;/a&gt;</code>.</li>
<li>Eliminar de la versión para tablet todas aquellas partes que sea prescindibles, tenemos menos espacio y hay que mostrar solo lo necesario.</li>
<li>El tamaño de fuentes, y sobre todo <strong>iconos</strong>, debe de ser mayor en la versión para tablet. <strong>Es muy importante que los iconos sean grandes</strong> para evitar al usuario tenga que pasar media hora intentando entrar en una sección.</li>
</ul>

<h3>Actualización 19/10/2020</h3>

<p>He encontrado este artículo sobre como gestionar imágenes en <em>responsive design</em>, la verdad es que es muy interesante. Habla de como mostrar imágenes de diferentes tamaños en función del dispositivo que se está utilizando, y sobre todo, de como hacerlo de forma dinámica mediante <code>PHP</code>:</p>

<ul>
<li><a href="https://stitcher.io/blog/responsive-images-done-right" class="link-out">https://stitcher.io/blog/responsive-images-done-right</a></li>
</ul>

<p>Mas información:</p>

<ul>
<li>https://developer.mozilla.org/es/docs/CSS/Media_queries</li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Macros personalizados para Laravel Dusk]]></title>
                <link>https://daguilar.dev/blog/tests_macros-personalizados-para-laravel-dusk</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/tests_macros-personalizados-para-laravel-dusk</guid>
                <description><![CDATA[Recopilación de los más destacados Macros para Laravel dusk, para conseguir realizar Test de navegador en Laravel de forma más sencilla y automatizada, utilizando la potencia de los Macros de Laravel.]]></description>
                <content:encoded><![CDATA[<p>A día de hoy, es imposible realizar un desarrollo (en cualquier lenguaje de programación), sin realizar pruebas. En Laravel disponemos de varias herramientas para realizar nuestras pruebas:</p>

<ul>
<li>Http tests (basados en PhpUnit).</li>
<li>Browser tests (basados en Selenium/WebDriver protocol).</li>
</ul>

<p>En este artículo, vamos a centrarnos en el segundo, el utilizado por <a href="https://laravel.com/docs/6.x/dusk" class="link-out">Laravel Dusk</a>, y que nos va a permitir testear nuestro código desde un <strong>Navegador Web</strong>, y por tanto, pudiendo probar <code>javascript</code>.</p>

<p>Laravel dusk, al igual que otras partes del código de Laravel, incluyen el <code>trait Macroable</code>, el cual nos permite crear métodos personalizados para <strong>Dusk</strong>.</p>

<p>Este <code>Trait</code>, nos permitirá hacer cosas como esta:</p>

<pre><code class="language-php">Response::macro('lower', function ($value) {
  return Response::make(strtoupper($value));
});
</code></pre>

<p>Que podremos utilizar así:</p>

<pre><code class="language-php">return response()-&gt;lower('foo');
</code></pre>

<p>Nuestros <code>Traits</code>, debemos añadirlos al método <code>boot()</code> the un <code>ServiceProvider</code>, por lo que lo mejor, es crear nuestro própio <code>ServiceProvider</code>, por ejemplo:</p>

<pre><code class="language-php">//app\Providers\DuskServiceProvider.php
namespace App\Providers;

use Facebook\WebDriver\WebDriverBy;
use Illuminate\Support\ServiceProvider;
use Laravel\Dusk\Browser;

class DuskServiceProvider extends ServiceProvider
{
    public static $except = [];

    /**
     * Register the Dusk's browser macros.
     *
     * @return void
     */
    public function boot()
    {
        // Assert a field exists
        Browser::macro('assertExists', function ($element) {
            return count($this-&gt;driver-&gt;findElements(WebDriverBy::cssSelector($element))) &gt; 0
                ? true
                : false;
        });

        // Add value to hidden field
        Browser::macro('fillHidden', function ($name , $value) {
            $this-&gt;script("document.getElementsByName('$name')[0].value = '$value'");

            return $this;
        });

        // Select a option (using its position) from a select
        Browser::macro('selectOption', function ($element, $position) {
            $this-&gt;script("$('select[name=\"{$element}\"] option:eq({$position})').attr('selected', 'selected');");

            return $this;
        });

        // Select a random option from a radio button
        Browser::macro('selectRadioOption', function ($radioElement) {
            $radio_options = $this-&gt;driver-&gt;findElements(WebDriverBy::name($radioElement));
            $radio_options[array_rand($radio_options)]-&gt;click();
        });

        // Wait until the page is reload
        Browser::macro('waitForReload', function () {
            $this-&gt;driver-&gt;executeScript('window.oldPageStillIn = {}');
            $callable();

            return $this-&gt;waitUntil("return typeof window.oldPageStillIn === 'undefined';");
        });
    }
}
</code></pre>

<p>Veamos uno a uno, los ejemplos mostrados anteriormente:</p>

<ol>
<li>assertExists</li>
</ol>

<p>Este método, se utiliza para verificar si un elemento existe o no. Es muy útil para ser utilizado como condición para ejecutar una prueba o no realizarla.</p>

<pre><code class="language-php">public function test_field_exists()
{
    $this-&gt;browse(function (Browser $browser) {
        // Testing forms
        $browser
            -&gt;loginAs(App\User::find(1))
            -&gt;visit('dashboard/user/create')
            -&gt;assertExists('.selectField');
    });
}
</code></pre>

<p>Fuente: <a href="https://www.5balloons.info/using-browser-macros-in-laravel-dusk/" class="link-out">https://www.5balloons.info/using-browser-macros-in-laravel-dusk/</a></p>

<ol start="2">
<li>fillHidden</li>
</ol>

<p>Nos permite añadir un valor por defecto a un campo oculto:</p>

<pre><code class="language-php">public function test_add_value_to_hidden_field()
{
    $this-&gt;browse(function (Browser $browser) {
        // Testing forms
        $browser
            -&gt;loginAs(App\User::find(1))
            -&gt;visit('dashboard/user/create')
            -&gt;fillHidden('#myHiddenField', 'new value');
    });
}
</code></pre>

<p>Fuente: <a href="https://dev.to/barmmie_/5-useful-tricks-for-laravel-dusk-44cm" class="link-out">https://dev.to/barmmie_/5-useful-tricks-for-laravel-dusk-44cm</a></p>

<ol start="3">
<li>selectOption</li>
</ol>

<p>Nos permite seleccionar cualquier opción de un campo de formulario select:</p>

<pre><code class="language-php">// Seleccionamos la tercera opción. La primera será la 0.
public function test_select_field()
{
    $this-&gt;browse(function (Browser $browser) {
        // Testing forms
        $browser
            -&gt;loginAs(App\User::find(1))
            -&gt;visit('dashboard/user/create')
            -&gt;selectOption('#mySelect', 2);
    });
}
</code></pre>

<p>Basado en: <a href="https://medium.com/@icheko/laravel-dusk-browser-macro-61769e3dba5f" class="link-out">https://medium.com/@icheko/laravel-dusk-browser-macro-61769e3dba5f</a></p>

<ol start="4">
<li>selectRadioOption</li>
</ol>

<p>Sirve para seleccionar un campo de formulario tipo: radio, a partir del selector del campo:</p>

<pre><code class="language-php">public function test_radio_field()
{
    $this-&gt;browse(function (Browser $browser) {
        // Testing forms
        $browser
            -&gt;loginAs(App\User::find(1))
            -&gt;visit('dashboard/user/create')
            -&gt;selectRadioOption('#myRadio');
    });
}
</code></pre>

<p>Fuente: <a href="https://www.5balloons.info/using-browser-macros-in-laravel-dusk/" class="link-out">https://www.5balloons.info/using-browser-macros-in-laravel-dusk/</a></p>

<h3>Actualización 20/10/2020</h3>

<p><strong>Este macro ya no es necesario. Laravel dusk ya dispone de <code>waitForReload()</code> de forma nativa.</strong></p>

<ol start="5">
<li>waitForReload</li>
</ol>

<p>Permite esperar a que la página actual se recargue, por ejemplo, después de una llamada <code>Ajax</code>:</p>

<pre><code class="language-php">public function test_page_reload()
{
    $this-&gt;browse(function (Browser $browser) {
        // Testing forms
        $browser
            -&gt;click('button')
            -&gt;waitForReload()
            -&gt;assertSee('Something on new page');
    });
}
</code></pre>

<p>Fuente: <a href="https://gist.github.com/calebporzio/eb5cae2064a96e4fbf8f2ecf01626305" class="link-out">https://gist.github.com/calebporzio/eb5cae2064a96e4fbf8f2ecf01626305</a></p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Nueva fuente de texto JetBrains Mono]]></title>
                <link>https://daguilar.dev/blog/tools_nueva-fuente-de-texto-jetBrains-mono</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/tools_nueva-fuente-de-texto-jetBrains-mono</guid>
                <description><![CDATA[El equipo de JetBrains, ha desarrollado una nueva fuente de texto llamada JetBrains Mono]]></description>
                <content:encoded><![CDATA[<p>El equipo de JetBrains (la gente que está detrás de proyectos como PhpStorm), ha desarrollado una nueva fuente de texto llamada <a href="https://www.jetbrains.com/lp/mono/" class="link-out">JetBrains Mono</a>.</p>

<p>Esta fuente, va ser la fuente por defecto en todos los proyectos de la marca.</p>

<p><img src="../../../assets/img/posts/jetbrains-mono.png" alt="JetBrains Mono" class="thumbnail" /></p>

<p>Esta nueva tipografía es <strong>gratuita y de código libre</strong> (bajo licencia Apache 2.0), y está especialmente desarrollada para programadores, es decir, se centra en aspectos básicos para un porgramador:</p>

<ul>
<li>Distinguir de forma sencilla la letra mayúscula <em>O</em> del número <em>0</em>.</li>
<li>Diferenciación entre la letra mayúscula <em>L</em> del número <em>1</em>.</li>
<li>La utilización de <strong>ligaduras de texto</strong>.</li>
<li>Y muchas otras opciones que simplifican la visualización del código...</li>
</ul>

<p><strong>El objetivo principal de la tipografía ha sido la de simplificar las formas al máximo</strong>, para simplificar al ojo su interpretación, permitiendo simplificar este proceso y aumentar la capacidad del cerebro para procesarlas.</p>

<p>Yo personalmente, he optado por esta nueva tipografía y estoy bastante contento con ella, y por el momento, me quedo con ella.</p>

<p>Mas información y su instalación:</p>

<ul>
<li>https://github.com/JetBrains/JetBrainsMono</li>
<li>https://www.jetbrains.com/lp/mono/</li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Crear un package para Laravel]]></title>
                <link>https://daguilar.dev/blog/laravel_crear-un-package-para-laravel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_crear-un-package-para-laravel</guid>
                <description><![CDATA[Creación de un package para Laravel desde cero. Configuración del proyecto, gestión de assets y plantillas, controladores, rutas, migraciones y comandos de consola. Un recorrido por todas las opciones de desarrollo de packages con Laravel.]]></description>
                <content:encoded><![CDATA[<p>Una buena forma de ordenar y reutilizar nuestro código de <strong>Laravel</strong>, es mediante el uso de <em>packages</em>. En este artículo, vamos a centrarnos en la creación y desarrollo de <em>packages</em> propios, pero si estás interesado en <em>packages</em> de terceros, aquí tienes una lista con los imprescindibles (por lo menos para mi...):</p>

<ul>
<li>https://daguilar.dev/blog/laravel_packages-imprescindibles-para-laravel/</li>
</ul>

<p>Lo primero es crear la carpeta para nuestro <em>package</em>. Con un Mac, entramos al terminal (yo suelo utilizar la carpeta <em>sites</em> para mis proyectos):</p>

<pre><code class="language-bash">mkdir sites/my-package
</code></pre>

<p>Si no tenemos instalado Composer, lo instalamos:</p>

<ul>
<li>https://getcomposer.org/</li>
</ul>

<p>Ahora, nos vamos al terminal y entramos en la carpeta de nuestro <em>package</em>:</p>

<pre><code class="language-bash">cd sites/my-package
</code></pre>

<p>E iniciamos <strong>Composer</strong>:</p>

<pre><code class="language-bash">composer init
</code></pre>

<p>Ahora <strong>Composer</strong> empezará a hacernos preguntas sobre el <em>package</em> y el autor... podemos saltarlas o añadir la información. El resultado final, será la de la creación del archivo <code>composer.json</code>, que tendrá un aspecto similar a este:</p>

<pre><code class="language-javascript">{
    "name": "daguilarm/belich",
    "description": "Laravel admin dashboard",
    "license": "MIT",
    "authors": [
        {
            "name": "daguilarm",
            "email": "damian.aguilarm@gmail.com"
        }
    ],
    "require": {},
    "minimum-stability": "dev"
}
</code></pre>

<p>El siguiente paso es el de crear un <em>ServiceProvider</em>. Para ello, creamos la carpeta <code>sites/my-package/src</code> y le añadimos el archivo <code>BelichServiceProvider.php</code> o como quieras llamarlo.</p>

<p>Ahora es el momento de añadir a nuestro archivo <code>composer.json</code>, nuestro <em>ServiceProvider</em> y el <em>Namespace</em>:</p>

<pre><code class="language-javascript">{
    "name": "daguilarm/belich",
    "description": "Laravel admin dashboard",
    "license": "MIT",
    "authors": [
        {
            "name": "daguilarm",
            "email": "damian.aguilarm@gmail.com"
        }
    ],
    "extra": {
        "laravel": {
            "providers": [
                "Daguilarm\\Belich\\ServiceProvider"
            ]
        }
    },
    "autoload": {
        "psr-4": {
            "Daguilarm\\Belich\\": "src/"
        }
    },
    "require": {},
    "minimum-stability": "dev"
}
</code></pre>

<p>El <em>namespace</em> del <em>package</em>, sería: <code>Daguilarm\Belich</code> y la ubicación del <em>ServiceProvider</em>: <code>Daguilarm\Belich\ServiceProvider</code>.</p>

<p>Ahora nos toca configurar nuestro <em>ServiceProvider</em>. Este archivo debe de tener la siguiente estructura básica:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\Belich;

use Illuminate\Support\ServiceProvider as Provider;

final class ServiceProvider extends Provider
{
    /**
     * Bootstrap the application services.
     *
     * @return void
     */
    public function boot(): void
    {
        //
    }

    /**
     * Register the application services.
     *
     * @return void
     */
    public function register(): void
    {
        // 
    }
}
</code></pre>

<p>Ahora vienen las preguntas importantes:</p>

<h3>¿Como configurar las rutas del package?</h3>

<p>Podemos crear un método y añadir los archivos de rutas:</p>

<pre><code class="language-php">/**
 * Register the package routes
 *
 * @return void
 */
protected function registerRoutes(): void
{
    require_once __DIR__ . '/../routes/AuthRoutes.php';
    require_once __DIR__ . '/../routes/ResolveRoutes.php';
    ...
}
</code></pre>

<p>Estos archivos, los crearemos en <code>sites/my-package/routes</code>, y son iguales que los archivos de rutas de <strong>Laravel</strong>:</p>

<pre><code class="language-php">//sites/my-package/routes/AuthRoutes.php
&lt;?php

Route::group(['middleware' =&gt; ['web']], static function (): void {

    // Authentication Routes...
    Route::get(Belich::path() . '/login', 'Daguilarm\Belich\App\Http\Controllers\Auth\LoginController@showLoginForm')-&gt;name('login');
});
</code></pre>

<p>Y luego, desde el método <code>boot()</code>, llamamos las rutas:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\Belich;

use Illuminate\Support\ServiceProvider as Provider;

final class ServiceProvider extends Provider
{
    /**
     * Bootstrap the application services.
     *
     * @return void
     */
    public function boot(): void
    {
        //Routes 
        $this-&gt;registerRoutes();
    }

    /**
     * Register the application services.
     *
     * @return void
     */
    public function register(): void
    {
        // 
    }
}
</code></pre>

<h3>¿Como configurar los recursos y las vistas?</h3>

<p>Vamos a utilizar la misma técnica de antes. A nuestro método <code>boot()</code>, le añadimos:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\Belich;

use Illuminate\Support\ServiceProvider as Provider;

final class ServiceProvider extends Provider
{
    /**
     * Bootstrap the application services.
     *
     * @return void
     */
    public function boot(): void
    {
        //Routes 
        $this-&gt;registerRoutes();

        //Resources 
        $this-&gt;registerResources();
    }

    /**
     * Register the application services.
     *
     * @return void
     */
    public function register(): void
    {
        // 
    }
}
</code></pre>

<p>Y nuestro nuevo método, sería así:</p>

<pre><code class="language-php">/**
 * Register the package resources
 *
 * @return void
 */
protected function registerResources(): void
{
    //Load the views
    $this-&gt;loadViewsFrom(__DIR__ . '/../resources/views', 'belich');
    //Load language translations...
    $this-&gt;loadTranslationsFrom(resource_path('lang/vendor/belich'), 'belich');
    $this-&gt;loadJsonTranslationsFrom(resource_path('lang/vendor/belich'), 'belich');
}
</code></pre>

<p>Lo que estamos haciendo, es indicarle a <strong>Laravel</strong>, en que rutas vamos a guardar nuestros recursos:</p>

<ul>
<li><code>sites/my-package/resources/view</code>, para nuestras vistas.</li>
<li><code>sites/laravel/resources/lang/vendor/belich</code>, para nuestros archivos de idioma (la ruta es del proyecto de Laravel, no del <em>package</em>).</li>
</ul>

<p>Ahora, para acceder a las vistas del <em>package</em>, debemos utilizar:</p>

<pre><code class="language-php">view('belich::path.to.the.view')
</code></pre>

<p>y lo mismo para los archivos de idioma:</p>

<pre><code class="language-php">trans('belich::path.to.the.file')
</code></pre>

<h3>¿Como configurar las migraciones?</h3>

<p>Seguimos la estructura anterior, y añadimos:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\Belich;

use Illuminate\Support\ServiceProvider as Provider;

final class ServiceProvider extends Provider
{
    /**
     * Bootstrap the application services.
     *
     * @return void
     */
    public function boot(): void
    {

        //Routes 
        $this-&gt;registerRoutes();

        //Resources 
        $this-&gt;registerResources();

        //Migrations 
        $this-&gt;registerMigrations();
    }

    /**
     * Register the application services.
     *
     * @return void
     */
    public function register(): void
    {
        // 
    }
}
</code></pre>

<p>Ahora, solo tenemos que indicar, en que directorio guardamos las migraciones de nuestro <em>package</em>:</p>

<pre><code class="language-php">//sites/my-package/database/migrations
/**
 * Register the package migrations
 *
 * @return void
 */
protected function registerMigrations(): void
{
    $this-&gt;loadMigrationsFrom(__DIR__.'/../database/migrations');
}
</code></pre>

<h3>¿Como configurar comandos de consola?</h3>

<p>Seguimos la estructura anterior, y añadimos:</p>

<pre><code class="language-php">&lt;?php

namespace Daguilarm\Belich;

use Illuminate\Support\ServiceProvider as Provider;

final class ServiceProvider extends Provider
{
    /**
     * Bootstrap the application services.
     *
     * @return void
     */
    public function boot(): void
    {
        //Routes 
        $this-&gt;registerRoutes();

        //Resources 
        $this-&gt;registerResources();

        //Migrations 
        $this-&gt;registerMigrations();

        //Console 
        $this-&gt;registerConsole();
    }

    /**
     * Register the application services.
     *
     * @return void
     */
    public function register(): void
    {
        // 
    }
}
</code></pre>

<p>Y creamos el método:</p>

<pre><code class="language-php">/**
 * Register the package console commands
 *
 * @return void
 */
protected function registerConsole(): void
{
    if ($this-&gt;app-&gt;runningInConsole()) {
        $this-&gt;commands([
            \Daguilarm\Belich\App\Console\Commands\CardCommand::class,
            \Daguilarm\Belich\App\Console\Commands\ComponentCommand::class,
            \Daguilarm\Belich\App\Console\Commands\MetricCommand::class,
        ]);
    }
}
</code></pre>

<h3>Extra</h3>

<p>Si quieres saber como configurar el <em>package</em> para que se pueda utilizar desde <strong>Packagist</strong>:</p>

<p><a href="https://daguilar.dev/blog/packages_configurar-github-webhooks-para-packagist/">https://daguilar.dev/blog/packages_configurar-github-webhooks-para-packagist/</a></p>

<p>Y si quieres hacer tests a un package:</p>

<p><a href="https://daguilar.dev/blog/package_configurando-un-package-de-laravel-y-livewire-para-hacer-tests/">https://daguilar.dev/blog/package_configurando-un-package-de-laravel-y-livewire-para-hacer-tests/</a></p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Packages imprescindibles para Laravel]]></title>
                <link>https://daguilar.dev/blog/laravel_packages-imprescindibles-para-laravel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_packages-imprescindibles-para-laravel</guid>
                <description><![CDATA[Recopilación de Packages básicos para ser utilizados en el Framework basado en PHP Laravel. Esta lista de packages se va a ir aumentando y actualizando conforme surjan nuevas opciones. Los packages son utilizadades de código PHP que sirven para reutilizar el código generado por otro programador, y no estar inventando la rueda continuamente.]]></description>
                <content:encoded><![CDATA[<p>Los <em>packages</em> para <strong>Laravel</strong> son sin lugar a dudas, un forma rápida de solucionar un problema de programación que ya ha sido pensado, planteado y solucionado por otro programador, y que en la mayoría de los casos, cuenta con el respaldo de la comunidad de <strong>Laravel</strong>.</p>

<p>La idea de esta entrada del blog, es un listado con los <em>packages</em> que suelo utilizar en mis proyectos, y que son imprescindibles para mi. Eso si, sin incluir los <em>packages</em> oficionales de <strong>Laravel</strong>:</p>

<h3>Laravel permission</h3>

<ul>
<li>Github: <a href="https://github.com/spatie/laravel-permission" class="link-out">https://github.com/spatie/laravel-permission</a></li>
<li>Documentación: <a href="https://freek.dev/270-a-package-to-add-roles-and-permissions-to-laravel" class="link-out">https://freek.dev/270-a-package-to-add-roles-and-permissions-to-laravel</a></li>
<li>Descripción: Gestión de roles y permisos de forma nativa.</li>
</ul>

<h3>PHP Insights</h3>

<ul>
<li>Github: <a href="https://github.com/nunomaduro/phpinsights" class="link-out">https://github.com/nunomaduro/phpinsights</a></li>
<li>Documentación: <a href="https://phpinsights.com/" class="link-out">https://phpinsights.com/</a></li>
<li>Descripción: Analisis y optimización del código PHP.</li>
</ul>

<h3>Laravel Excel</h3>

<ul>
<li>Github: <a href="https://github.com/maatwebsite/Laravel-Excel" class="link-out">https://github.com/maatwebsite/Laravel-Excel</a></li>
<li>Documentación: <a href="https://laravel-excel.com/" class="link-out">https://laravel-excel.com/</a></li>
<li>Descripción: Gestión de archivo excel para Laravel, con soporte para PDF.</li>
</ul>

<h3>Laravel Debugbar</h3>

<ul>
<li>Github: <a href="https://github.com/barryvdh/laravel-debugbar" class="link-out">https://github.com/barryvdh/laravel-debugbar</a></li>
<li>Documentación: <a href="https://github.com/barryvdh/laravel-debugbar/blob/master/readme.md" class="link-out">https://github.com/barryvdh/laravel-debugbar/blob/master/readme.md</a></li>
<li>Descripción: Herramienta de desarrollo para depurar nuestro código.</li>
</ul>

<h3>Laravel IDE Helper Generator</h3>

<ul>
<li>Github: <a href="https://github.com/barryvdh/laravel-ide-helper" class="link-out">https://github.com/barryvdh/laravel-ide-helper</a></li>
<li>Documentación: <a href="https://github.com/barryvdh/laravel-ide-helper/blob/master/README.md" class="link-out">https://github.com/barryvdh/laravel-ide-helper/blob/master/README.md</a></li>
<li>Descripción: Genera ayudas a tu IDE para mejorar la autocompletación de código. Una maravilla sobre todo si usas PhpStorm o VScode.</li>
</ul>

<h3>Laravel Backup</h3>

<ul>
<li>Github: <a href="https://github.com/spatie/laravel-backup" class="link-out">https://github.com/spatie/laravel-backup</a></li>
<li>Documentación: <a href="https://docs.spatie.be/laravel-backup/v6/introduction/" class="link-out">https://docs.spatie.be/laravel-backup/v6/introduction/</a></li>
<li>Descripción: Gestiona los backup de tu sitio de forma sencilla y rápida.</li>
</ul>

<h3>Intervention Image</h3>

<ul>
<li>Github: <a href="https://github.com/Intervention/image" class="link-out">https://github.com/Intervention/image</a></li>
<li>Documentación: <a href="http://image.intervention.io/" class="link-out">http://image.intervention.io/</a></li>
<li>Descripción: Gestion y tratamiento de imágenes.</li>
</ul>

<h3>Lada Cache</h3>

<ul>
<li>Github: <a href="https://github.com/spiritix/lada-cache" class="link-out">https://github.com/spiritix/lada-cache</a></li>
<li>Documentación: <a href="https://github.com/spiritix/lada-cache/blob/master/README.md" class="link-out">https://github.com/spiritix/lada-cache/blob/master/README.md</a></li>
<li>Descripción: Gestión del cache de forma automática mediante el driver de Redis.</li>
</ul>

<h3>Laravel log viewer</h3>

<ul>
<li>Github: <a href="https://github.com/rap2hpoutre/laravel-log-viewer" class="link-out">https://github.com/rap2hpoutre/laravel-log-viewer</a></li>
<li>Documentación: <a href="https://github.com/rap2hpoutre/laravel-log-viewer/blob/master/README.md" class="link-out">https://github.com/rap2hpoutre/laravel-log-viewer/blob/master/README.md</a></li>
<li>Descripción: Completo gestor de Logs para Laravel.</li>
</ul>

<p>Y ya para terminar, algunos <em>packages</em> propios:</p>

<ul>
<li><a href="https://github.com/daguilarm/belich-tables">https://github.com/daguilarm/belich-tables</a></li>
<li><a href="https://github.com/daguilarm/livewire-combobox">https://github.com/daguilarm/livewire-combobox</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Patrones de diseño y uso de Pipelines con Laravel]]></title>
                <link>https://daguilar.dev/blog/laravel_patrones-de-diseno-y-uso-de-pipelines-con-laravel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_patrones-de-diseno-y-uso-de-pipelines-con-laravel</guid>
                <description><![CDATA[Utilización del patrón de diseño Pipelines, incluido en Laravel por defecto. Es un patrón bastante desconocido y que puede ser muy útil para simplicar código y refactorizarlo.]]></description>
                <content:encoded><![CDATA[<p>Las <em>Pipelines</em> de <a href="https://laravel.com" class="link-out">Laravel</a>, nos van a permitir enviar un objeto a través de una serie de clases de forma sencilla y ordenada, simplificando considerablemente el código.</p>

<p>Realmente, es un <em>patrón de diseño</em> utilizado por <strong>Laravel</strong> de forma interna, pero que no vas a encontrar en su documentación, y la verdad es que no se por qué... En cualquier caso, lo puedes implementar en tu proyecto sin ningún problema.</p>

<p>Personalmente, suelo utilizarlo bastante para hacer un <em>refactoring</em> del código, consiguiendo simplificarlo considerablemente, y sobre todo, ordenándolo, algo que últimamente se está conviertiendo en una obsesión...</p>

<p>La mejor forma de comprender el funcionamiento de las <em>Pipelines</em>, y cómo esta puede ayudarnos a simplificar nuestro código, es con un ejemplo. Imaginemos la siguiente clase:</p>

<pre><code class="language-php">&lt;?php 

namespace MyNamespace;

final class Roles
{
    public function handle(int $level = 0)
    {
        if ($level === 0) {
            return 'eres un invitado';
        }

        if ($level === 1) {
            return 'eres un usuario';
        }

        if ($level === 2) {
            return 'eres un editor';
        }

        if ($level === 3) {
            return 'eres un administrador';
        }
    }
}
</code></pre>

<p>Estoy seguro que te has encontrado con clases con muchos más condicionales, y que al final, se convierten en una interminable lista de condiciones... Usemos las <em>Pipelines</em> para simplificarlo. La estructura básica es la siguiente:</p>

<pre><code class="language-php">$pipeline = app(Pipeline::class)
    -&gt;send($level)
    -&gt;through([
        \MyNamespace\Invitado::class,
        \MyNamespace\Usuario::class,
        \MyNamespace\Editor::class,
        \MyNamespace\Administrador::class,
    ])
    -&gt;then(function ($content) {
        return 'Tu nivel de acceso es: ' . $level;
    });
</code></pre>

<ol>
<li>Instanciamos a la clase <em>Pipeline</em>: <code>Illuminate\Pipeline\Pipeline</code>.</li>
<li>Definimos la variable que queremos enviar a través de la <em>Pipeline</em>, y que por tanto, será accesible a todas las clases de forma automática, a través del método <code>send()</code>.</li>
<li>El método <code>through()</code>, nos permite definir un <em>array</em> con toda la lista de clases que queremos que se ejecuten.</li>
<li>Finalmente, ejecutamos una acción final.</li>
</ol>

<p>Disponemos de otros métodos, por ejemplo, si al final simplemente queremos devolver el valor de <code>$level</code>, una vez ha pasado por todos los filtros, podemos usar el método: <code>thenReturn()</code> en vez de <code>then()</code>, y nuestra clase principal, quedará así:</p>

<pre><code class="language-php">&lt;?php 

namespace MyNamespace;

use Illuminate\Pipeline\Pipeline;

final class Roles
{
    public function handle(int $level = 0)
    {
        // Add filters to the pipeline
        return app(Pipeline::class)
            -&gt;send($level)
            -&gt;through([
                \MyNamespace\Invitado::class,
                \MyNamespace\Usuario::class,
                \MyNamespace\Editor::class,
                \MyNamespace\Administrador::class,
            ])
            -&gt;thenReturn();
    }
}
</code></pre>

<p>Lo que hemos hecho, ha sido enviar el valor <code>$level</code> a través de una serie de clases o filtros, realizando cada una de ellas, una función específica. Veamos, a modo de ejemplo, como quedaría la primera de estas clases:</p>

<pre><code class="language-php">&lt;?php 

namespace MyNamespace\Filters;

use Closure;

final class Invitado
{
    public function handle($level, Closure $next)
    {
        if ($level === 0) {
            return $next('eres un invitado');
        }

        return $next($level);
    }
}
</code></pre>

<p>Si os fijais, tiene la estructura clásica de un <em>middleware</em> de <strong>Laravel</strong>. Y por tanto, el método: <code>handle()</code>, es obligatorio y debe de incluir una <code>Closure</code>. Lo que hacemos con esto, es devolver el resultado si se cumple la condición, y si no, enviamos la variable a la clase siguiente.</p>

<p>Si por cualquier motivo queremos cambiar el método <code>handle()</code> por otro que nos interese más, disponemos del método <code>via('myNewMethod')</code> para hacerlo:</p>

<pre><code class="language-php">// Add filters to the pipeline
return app(Pipeline::class)
    -&gt;send($level)
    -&gt;via('nuevoMetodo')
    -&gt;through([
        \MyNamespace\Invitado::class,
        \MyNamespace\Usuario::class,
        \MyNamespace\Editor::class,
        \MyNamespace\Administrador::class,
    ])
    -&gt;thenReturn();
</code></pre>

<p>En el ejemplo anterior, hemos generando una estructura de directorios, similar a esta:</p>

<pre><code class="language-bash">./Roles.php 
./Filters/Invitado.php
./Filters/Usuario.php
./Filters/Editor.php
./Filters/Administrador.php
</code></pre>

<p>Toda la información y los métodos disponibles se encuentran aquí:</p>

<p><a href="https://laravel.com/api/6.x/Illuminate/Pipeline/Pipeline.html" class="link-out">https://laravel.com/api/6.x/Illuminate/Pipeline/Pipeline.html</a></p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Sistemas de gestión de servidores]]></title>
                <link>https://daguilar.dev/blog/servers_sistemas-de-gestion-de-servidores</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/servers_sistemas-de-gestion-de-servidores</guid>
                <description><![CDATA[Listado de los principales sistemas de gestión de servidores.]]></description>
                <content:encoded><![CDATA[<p>El objectivo de este artículo es el de mantener una lista (actualizada) de los principales sistemas de gestión de servidores.</p>

<p>Los servicios analizados (22/12/2019) son:</p>

<ul>
<li><a href="https://forge.laravel.com/" class="link-out">Laravel forge</a></li>
<li><a href="https://moss.sh/?ref=e9dcfd00d548" class="link-out">Moss</a></li>
<li><a href="https://runcloud.io/" class="link-out">Runcloud</a></li>
<li><a href="https://serverpilot.io/" class="link-out">ServerPilot</a></li>
</ul>

<h3> Sus características</h3>

<table>
<thead>
<tr>
  <th align="left">Servicio</th>
  <th align="left">SSL gratis</th>
  <th align="left">Bases datos</th>
  <th align="left">Workers</th>
  <th align="left">Supervisor</th>
  <th align="left">Redis</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">Forge</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">Moss</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">Runcloud</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">--</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">ServerP</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">--</td>
</tr>
</tbody>
</table>

<h3> Tipo de plan</h3>

<table>
<thead>
<tr>
  <th align="left">Servicio</th>
  <th align="left">Plan grauito</th>
  <th align="left">Planes de pago (mes)</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">Forge</td>
  <td align="left">5 días prueba</td>
  <td align="left">9$    - 19$   - 49$</td>
</tr>
<tr>
  <td align="left">Moss</td>
  <td align="left">Si</td>
  <td align="left">12$   - 19$   - 39$</td>
</tr>
<tr>
  <td align="left">Runcloud</td>
  <td align="left">Si</td>
  <td align="left">6.67$ - 12.5$ - 37.5$</td>
</tr>
<tr>
  <td align="left">ServerP(*)</td>
  <td align="left">Modo de prueba</td>
  <td align="left">5$    - 10$   - 20$</td>
</tr>
</tbody>
</table>

<p>(*) Tienen un coste adicional por cada aplicación configurada.</p>

<h3> Servicios de deploy</h3>

<table>
<thead>
<tr>
  <th align="left">Servicio</th>
  <th align="left">Github</th>
  <th align="left">Bitbucket</th>
  <th align="left">GitLab</th>
  <th align="left">Custom Git</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">Forge</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">Moss</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">Runcloud</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">ServerP</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">--</td>
</tr>
</tbody>
</table>

<h3> Servidores soportados</h3>

<table>
<thead>
<tr>
  <th align="left">Servicio</th>
  <th align="left">Digital(*)</th>
  <th align="left">Linode</th>
  <th align="left">Amazon</th>
  <th align="left">Vultr</th>
  <th align="left">Upcloud</th>
  <th align="left">Google</th>
  <th align="left">Custom</th>
</tr>
</thead>
<tbody>
<tr>
  <td align="left">Forge</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">Moss</td>
  <td align="left">Si</td>
  <td align="left">--</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
</tr>
<tr>
  <td align="left">Runcloud</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">--</td>
</tr>
<tr>
  <td align="left">ServerP</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">Si</td>
  <td align="left">--</td>
  <td align="left">--</td>
  <td align="left">Si</td>
</tr>
</tbody>
</table>

<p>(*)Digitalocean</p>

<div class="border border-blue-300 rounded bg-blue-100 shadow-lg p-4">
    Si conoces y has utilizado más servicios para la gestión de servidores, ves algún error, o falta algo... hazmelo saber!
</div>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Creando una plantilla HTML5 avanzada]]></title>
                <link>https://daguilar.dev/blog/html_componentes-avanzados-de-una-plantilla-html5</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/html_componentes-avanzados-de-una-plantilla-html5</guid>
                <description><![CDATA[Diseño y componentes avanzados para una plantilla HTML5 completa. Todas las metaetiquetas necesarias para buscadores y redes sociales. Configuración óptima de archivos CSS y Javascript, y gestión de assets desde DNS.]]></description>
                <content:encoded><![CDATA[<p>Una plantilla básica de <strong>HTML5</strong> tendría el siguiente aspecto:</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="es"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;meta http-equiv="x-ua-compatible" content="ie=edge" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;

    &lt;title&gt;&lt;/title&gt;

    &lt;link rel="stylesheet" href="css/main.css" /&gt;
    &lt;link rel="icon" href="images/favicon.png" /&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;script src="js/scripts.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Meta-etiquetas</h2>

<p>Para mejorarla, lo primero será añadir las meta-etiquetas <em>description</em> y <em>keywords</em> en el <code>&lt;head&gt;</code> del documento <code>HTML5</code>:</p>

<pre><code class="language-html">&lt;meta name="description" content=""&gt;
&lt;meta name="keywords" content=""&gt;
</code></pre>

<p>Seguido de la etiqueta <em>theme-color</em>, utilizada por los dispositivos <strong>Android</strong> para definir el color base:</p>

<pre><code class="language-html">&lt;meta name="theme-color" content="#fafafa"&gt;
</code></pre>

<p>Si utilizamos <strong>Laravel</strong>:</p>

<pre><code class="language-html">&lt;meta name="csrf-token" content="{{ csrf_token() }}"&gt;
</code></pre>

<p>Y toda una seríe de configuraciones por defecto:</p>

<pre><code class="language-html">&lt;meta name="copyright"content="Your name or company name"&gt;
&lt;meta name="language" content="Your language"&gt;
&lt;meta name="url" content="Your URL"&gt;
&lt;meta name="identifier-URL" content="Your URL"&gt;
&lt;meta name="directory" content="submission"&gt;
&lt;meta name="category" content=""&gt;
&lt;meta name="robots" content="index, follow"&gt;
&lt;meta name="coverage" content="Worldwide"&gt;
&lt;meta name="distribution" content="Global"&gt;
&lt;meta name="rating" content="General"&gt;
&lt;meta name="revisit-after" content="7 days"&gt;
&lt;meta http-equiv="Expires" content="0"&gt;
&lt;meta http-equiv="Pragma" content="no-cache"&gt;
&lt;meta http-equiv="Cache-Control" content="no-cache"&gt;
&lt;meta name="revised" content="Sunday, July 18th, 2010, 5:15 pm" /&gt;
</code></pre>

<p>Las etiquetas de <strong>open graph</strong>:</p>

<pre><code class="language-html">&lt;meta property="og:title" content="Creando una plantilla HTML5 avanzada" /&gt;
&lt;meta property="og:type" content="article" /&gt;
&lt;meta property="og:url" content="https://daguilar.dev"/&gt;
&lt;meta property="og:description" content="Diseño y componentes avanzados para una plantilla HTML" /&gt;
&lt;meta property="og:locale" content="es_ES"&gt;
&lt;meta property="og:site_name" content="https://daguilar.dev"&gt;
&lt;meta property="og:image:width" content="1200" /&gt;
&lt;meta property="og:image:height" content="630" /&gt;
&lt;meta property="og:image" content="https://daguilar.dev/blog/html_componentes-avanzados-de-una-plantilla-html5" /&gt;
&lt;meta property="og:image:alt" content="Image alt description" /&gt;
</code></pre>

<p>Las etiquetas de <strong>open graph</strong> para <strong>twitter</strong>:</p>

<pre><code class="language-html">&lt;meta name="twitter:site" content="@daguilarm"&gt;
&lt;meta name="twitter:creator" content="@daguilarm"&gt;
&lt;meta name="twitter:title" content="Creando una plantilla HTML5 avanzada"&gt;
&lt;meta name="twitter:description" content="Diseño y componentes avanzados para una plantilla HTML"&gt;
&lt;meta name="twitter:url" content="https://daguilar.dev/"&gt;
&lt;meta name="twitter:card" content="summary_large_image"&gt;
&lt;meta name="twitter:image" content="https://daguilar.dev/blog/html_componentes-avanzados-de-una-plantilla-html5"&gt;
</code></pre>

<p>También podemos añadir etiquetas personalizadas de algunos servicios:</p>

<pre><code class="language-html">&lt;!-- Custom tags --&gt;
&lt;meta name="google-analytics" content=""/&gt;
&lt;meta name="disqus" content=""/&gt;
</code></pre>

<p>Nuestros iconos:</p>

<pre><code class="language-html">&lt;!-- Icons --&gt;
&lt;link rel="shortcut icon" href="/favicons/favicon.ico"&gt;
&lt;link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png"&gt;
&lt;link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png"&gt;
</code></pre>

<p>Las etiquetas para dispositivos <em>Apple</em>:</p>

<pre><code class="language-html">&lt;!-- Apple --&gt;
&lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
&lt;meta content="yes" name="apple-touch-fullscreen" /&gt;
&lt;meta name="apple-mobile-web-app-status-bar-style" content="black"&gt;
&lt;meta name="format-detection" content="telephone=no"&gt;
&lt;meta name="apple-mobile-web-app-title" content="My Site"&gt;
&lt;link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-touch-icon.png"&gt;
&lt;link rel="mask-icon" href="/favicons/safari-pinned-tab.svg" color="grey"&gt;
</code></pre>

<p>Las etiquetas de <em>Microsoft</em>:</p>

<pre><code class="language-html">&lt;!-- Microsoft --&gt;
&lt;meta name="msapplication-TileColor" content="grey"&gt;
&lt;meta name="msapplication-config" content="/favicons/browserconfig.xml"&gt;
</code></pre>

<p>Un ejemplo del <code>browserconfig.xml</code> anteriormente descrito:</p>

<pre><code class="language-bash">&lt;? xml version = "1.0" encoding = "utf-8" ?&gt;
  &lt;browserconfig&gt;
    &lt;msapplication&gt;
      &lt;tile&gt;
        &lt;square150x150logo src="/favicons/mstile-150x150.png" /&gt;
        &lt;TileColor&gt;grey&lt;/TileColor&gt;
      &lt;/tile&gt;
    &lt;/msapplication&gt;
  &lt;/browserconfig&gt;
</code></pre>

<p>Es importante añadir un <code>manifest</code> y la etiqueta <code>application-name</code> entre tus metatags:</p>

<pre><code class="language-html">&lt;link rel="manifest" href="site.webmanifest"&gt;
&lt;meta name="application-name" content="My Site"&gt;
</code></pre>

<p>Un ejemplo del <code>site.webmanifest</code>:</p>

<pre><code class="language-javascript">{
  "name": "My Website",
  "short_name": "My Site",
  "icons": [
    {
      "src": "/favicons/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/favicons/android-chrome-384x384.png",
      "sizes": "384x384",
      "type": "image/png"
    }
  ],
  "theme_color": "#ffffff",
  "background_color": "#ffffff"
}
</code></pre>

<h2>Librerías externas css y fuentes</h2>

<p>Si vamos a utilizar <a href="https://fonts.google.com" class="link-out">Google fonts</a> o librerías externas <strong>CSS</strong>, es buena idea utilizar:</p>

<pre><code class="language-html">&lt;link rel="dns-prefetch" href="https://fonts.googleapis.com"&gt;
&lt;link rel="preconnect" href="https://fonts.googleapis.com" crossorigin&gt;
&lt;link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,800,800i,900,900i" rel="stylesheet" media="all"&gt;
</code></pre>

<ul>
<li><strong>dns-prefetch</strong>: notifica al navegador que debería resolver el DNS de un dominio específico antes de que este sea llamado explícitamente.</li>
<li><strong>preconnect</strong>: informa al navegador que vamos a establecer una conexión con un dominio externo, y que queremos hacerlo lo antes posible.</li>
</ul>

<h2>Body</h2>

<p>Idiquemos que no se soportan navegadores <em>prehistóricos</em>:</p>

<pre><code class="language-html">&lt;!--[if IE]&gt;
    &lt;p style="padding:5px; margin: 5px; border: 1px solid red;"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="https://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience and security.&lt;/p&gt;
&lt;![endif]--&gt;
</code></pre>

<p>Añadamos las etiquetas básicas para crear el cuerpo de nuestra plantilla <strong>HTML5</strong>:</p>

<pre><code class="language-html">&lt;header&gt;
    &lt;!-- My header code --&gt;
&lt;/header&gt;

    &lt;div id="app"&gt;
        &lt;!-- My application code --&gt;
    &lt;/div&gt;

&lt;footer&gt;
    &lt;!-- My footer code --&gt;
&lt;/footer&gt;
</code></pre>

<p>Pongamos el código <code>javascript</code> al final del código, y si vamos a utilizar librerías como por ejemplo: <strong>Jquery</strong>, utilicemos un CDN usando la misma técnica que con las <strong>Google Fonts</strong>:</p>

<pre><code class="language-html">&lt;!-- Javascript code --&gt;
&lt;link rel="dns-prefetch" href="//code.jquery.com"&gt;
&lt;link rel="preconnect" href="//code.jquery.com" crossorigin&gt;
&lt;script src="https://code.jquery.com/jquery-{{JQUERY_VERSION}}.min.js" integrity="{{JQUERY_SRI_HASH}}" crossorigin="anonymous"&gt;&lt;/script&gt;
</code></pre>

<blockquote>
  <p>También es importante utilizar <code>async</code> o <code>defer</code> cuando sea posible.</p>
</blockquote>

<p>Si queremos usar el código de google-analytics:</p>

<pre><code class="language-html">&lt;!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. --&gt;
&lt;script&gt;
window.ga = function () { ga.q.push(arguments) }; ga.q = []; ga.l = +new Date;
ga('create', 'UA-XXXXX-Y', 'auto'); ga('set','transport','beacon'); ga('send', 'pageview')
&lt;/script&gt;
&lt;script src="https://www.google-analytics.com/analytics.js" async&gt;&lt;/script&gt;
</code></pre>

<h2>Resumen</h2>

<p>Poniendo todo lo anterior junto:</p>

<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang="es"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;meta http-equiv="x-ua-compatible" content="ie=edge" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;
    &lt;meta name="theme-color" content="#ffffff"&gt;

    &lt;!-- Only with Laravel --&gt;
    &lt;meta name="csrf-token" content="{{ csrf_token() }}"&gt;
    &lt;!-- Only with Laravel --&gt;

    &lt;meta name="robots" content="index, follow"&gt;
    &lt;meta name="copyright"content=""&gt;
    &lt;meta name="language" content=""&gt;
    &lt;meta name="url" content=""&gt;
    &lt;meta name="identifier-URL" content=""&gt;
    &lt;meta name="directory" content="submission"&gt;
    &lt;meta name="category" content=""&gt;
    &lt;meta name="coverage" content="Worldwide"&gt;
    &lt;meta name="distribution" content="Global"&gt;
    &lt;meta name="rating" content="General"&gt;
    &lt;meta name="revisit-after" content="7 days"&gt;
    &lt;meta http-equiv="Expires" content="0"&gt;
    &lt;meta http-equiv="Pragma" content="no-cache"&gt;
    &lt;meta http-equiv="Cache-Control" content="no-cache"&gt;
    &lt;meta name="revised" content="Sunday, July 18th, 2010, 5:15 pm" /&gt;

    &lt;meta property="og:title" content="Creando una plantilla HTML5 avanzada" /&gt;
    &lt;meta property="og:type" content="article" /&gt;
    &lt;meta property="og:url" content="https://daguilar.dev"/&gt;
    &lt;meta property="og:description" content="Diseño y componentes avanzados para una plantilla HTML" /&gt;
    &lt;meta property="og:locale" content="es_ES"&gt;
    &lt;meta property="og:site_name" content="https://sitemap.php"&gt;
    &lt;meta property="og:image:width" content="1200" /&gt;
    &lt;meta property="og:image:height" content="630" /&gt;
    &lt;meta property="og:image" content="https://daguilar.dev/blog/html_componentes-avanzados-de-una-plantilla-html5" /&gt;
    &lt;meta property="og:image:alt" content="Diseño y componentes avanzados para una plantilla HTML" /&gt;

    &lt;meta name="twitter:site" content="@daguilarm"&gt;
    &lt;meta name="twitter:creator" content="@daguilarm"&gt;
    &lt;meta name="twitter:title" content="Creando una plantilla HTML5 avanzada"&gt;
    &lt;meta name="twitter:description" content="Diseño y componentes avanzados para una plantilla HTML"&gt;
    &lt;meta name="twitter:url" content="https://daguilar.dev/"&gt;
    &lt;meta name="twitter:card" content="summary_large_image"&gt;
    &lt;meta name="twitter:image" content="https://daguilar.dev/blog/html_componentes-avanzados-de-una-plantilla-html5"&gt;

    &lt;!-- Icons --&gt;
    &lt;link rel="shortcut icon" href="/favicons/favicon.ico"&gt;
    &lt;link rel="icon" type="image/png" sizes="32x32" href="/favicons/favicon-32x32.png"&gt;
    &lt;link rel="icon" type="image/png" sizes="16x16" href="/favicons/favicon-16x16.png"&gt;

    &lt;!-- Apple --&gt;
    &lt;meta name="apple-mobile-web-app-capable" content="yes"&gt;
    &lt;meta content="yes" name="apple-touch-fullscreen" /&gt;
    &lt;meta name="apple-mobile-web-app-status-bar-style" content="black"&gt;
    &lt;meta name="format-detection" content="telephone=no"&gt;
    &lt;meta name="apple-mobile-web-app-title" content="My Site"&gt;
    &lt;link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-touch-icon.png"&gt;
    &lt;link rel="mask-icon" href="/favicons/safari-pinned-tab.svg" color="grey"&gt;

    &lt;!-- Microsoft --&gt;
    &lt;meta name="msapplication-TileColor" content="grey"&gt;
    &lt;meta name="msapplication-config" content="/favicons/browserconfig.xml"&gt;

    &lt;!-- Site information --&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;meta name="description" content=""&gt;
    &lt;meta name="keywords" content=""&gt;

    &lt;!-- Load external CDN --&gt;
    &lt;link rel="dns-prefetch" href="//fonts.googleapis.com"&gt;
    &lt;link rel="preconnect" href="//fonts.googleapis.com" crossorigin&gt;
    &lt;link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,800,800i,900,900i" rel="stylesheet" media="all"&gt;

    &lt;link rel="stylesheet" href="css/main.css" /&gt;
    &lt;link rel="icon" href="images/favicon.png" /&gt;

    &lt;link rel="manifest" href="site.webmanifest"&gt;
    &lt;meta name="application-name" content=""&gt;

  &lt;/head&gt;

  &lt;body&gt;
    &lt;!--[if IE]&gt;
        &lt;p style="padding:5px; margin: 5px; border: 1px solid red;"&gt;You are using an &lt;strong&gt;outdated&lt;/strong&gt; browser. Please &lt;a href="https://browsehappy.com/"&gt;upgrade your browser&lt;/a&gt; to improve your experience and security.&lt;/p&gt;
    &lt;![endif]--&gt;

    &lt;!-- My header code --&gt;
    &lt;header&gt;
        &lt;!-- Navigation --&gt;
        &lt;nav&gt;&lt;/nav&gt;
    &lt;/header&gt;

        &lt;!-- Main code --&gt;
        &lt;div id="blog"&gt;
              &lt;article&gt;
                &lt;section id="introduction"&gt;&lt;/section&gt;      
                &lt;section id="content"&gt;&lt;/section&gt;
                &lt;section id="summary"&gt;&lt;/section&gt;
              &lt;/article&gt;    
        &lt;/div&gt;

    &lt;footer&gt;
        &lt;!-- My footer code --&gt;
    &lt;/footer&gt;

    &lt;!-- Javascript code --&gt;
    &lt;link rel="dns-prefetch" href="//code.jquery.com"&gt;
    &lt;link rel="preconnect" href="//code.jquery.com" crossorigin&gt;
    &lt;script src="https://code.jquery.com/jquery-{{JQUERY_VERSION}}.min.js" integrity="{{JQUERY_SRI_HASH}}" crossorigin="anonymous"&gt;&lt;/script&gt;
    &lt;script src="js/scripts.js"&gt;&lt;/script&gt;

    &lt;!-- Google Analytics: change UA-XXXXX-Y to be your site's ID. --&gt;
    &lt;script&gt;
    window.ga = function () { ga.q.push(arguments) }; ga.q = []; ga.l = +new Date;
    ga('create', 'UA-XXXXX-Y', 'auto'); ga('set','transport','beacon'); ga('send', 'pageview')
    &lt;/script&gt;
    &lt;script src="https://www.google-analytics.com/analytics.js" async&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Mas información:</p>

<ul>
<li><a href="https://html5boilerplate.com/" class="link-out">https://html5boilerplate.com/</a></li>
<li><a href="http://www.initializr.com/" class="link-out">https://initializr.com/</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/resource-prioritization?hl=es" class="link-out">https://developers.google.com/web/fundamentals/performance/resource-prioritization?hl=es</a></li>
<li><a href="https://developers.google.com/web/updates/2015/08/using-manifest-to-set-sitewide-theme-color" class="link-out">https://developers.google.com/web/updates/2015/08/using-manifest-to-set-sitewide-theme-color</a></li>
<li><a href="https://www.chromium.org/developers/design-documents/dns-prefetching" class="link-out">https://www.chromium.org/developers/design-documents/dns-prefetching</a></li>
<li><a href="https://ogp.me/" class="link-out">https://ogp.me/</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.devhtml5-template.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Configurar Github webhooks con Packagist]]></title>
                <link>https://daguilar.dev/blog/packages_configurar-github-webhooks-para-packagist</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/packages_configurar-github-webhooks-para-packagist</guid>
                <description><![CDATA[Configurar los webhooks de Github para que se sincronicen con Packagist]]></description>
                <content:encoded><![CDATA[<p>Crear un package con <strong><a href="https://laravel.com/" class="link-out">Laravel</a></strong>, subirlo a <strong><a href="https://github.com/" class="link-out">Github</a></strong> y publicarlo en <strong><a href="https://packagist.org/" class="link-out">Packagist</a></strong>, es bastante sencillo, el problema suele venir cuando intentamos que que se sincronicen entre ellos.</p>

<p>El primer aviso, lo dará <strong>Packagist</strong>, informando que tenemos que ir a <strong>Github</strong> y activar los <em>webhooks</em>, para que se actualice automáticamente, por lo que nuestro primer paso será ese: ir a <strong>Github</strong>.</p>

<p>Debemos entrar en nuestro repositorio, ir a <code>settings</code> y pulsar en <em>webhooks</em>. Básicamente, sería lo mismo que:</p>

<pre><code>https://github.com/github-username/my-repository-name/settings/hooks
</code></pre>

<p>Si ya existe un <em>webhook</em> hacia <strong>Packagist</strong> lo editamos, y si no, lo creamos.</p>

<p><img src="../../../assets/img/posts/github-webhooks-1.png" alt="Github webhooks" class="thumbnail" /></p>

<p>Debemos rellenar los campos como se describe a continuación:</p>

<p><img src="../../../assets/img/posts/github-webhooks-2.png" alt="Github webhooks" class="thumbnail" /></p>

<ul>
<li><strong>Payload URL</strong>: https://packagist.org/api/update-package?username=USERNAME (usando el USERNAME de <strong>Packagist</strong>).</li>
<li><strong>Content type</strong>: seleccionamos <em>application/json</em>.</li>
<li><strong>Secret</strong>: es nuestra API KEY de <strong>Packagist</strong>. Vamos a <code>profile &gt; show API Token</code> y añadimos este valor al campo de <strong>Github</strong>.</li>
<li><strong>SSL verification</strong>: activamos <em>Enable SSL verification</em>.</li>
<li><strong>Which events would you like to trigger this webhook?</strong>: seleccionamos <em>Just the push event</em>.</li>
<li>Y por último, <strong>y lo más importante</strong>, marcamos la casilla: <em>Active</em>.</li>
</ul>

<p>Guardamos los datos, y listo. Ahora solo tenemos que hacer un cambio en nuestro repositorio y esperar unos minutos a que <strong>Github</strong>, envie la notificación a <strong>Packagist</strong>.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.devgithub-webhooks-config.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Múltiples conexiones a bases de datos con Laravel]]></title>
                <link>https://daguilar.dev/blog/databases_multiples-conexiones-a-bases-de-datos-con-laravel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/databases_multiples-conexiones-a-bases-de-datos-con-laravel</guid>
                <description><![CDATA[Conexiones múltiples a bases de datos utilizando Laravel 6.0, permitiendo conectar a diferentes bases de datos. Veremos todo el proceso, desde la configuración del archivo de configuración de la conexión, la gestión de los modelos y el tratamiento que hacen de los datos los Controladores.]]></description>
                <content:encoded><![CDATA[<p><strong>Laravel</strong> permite realizar múltiples conexiones a bases de datos, independientemente del tipo de base de datos que sea (siempre que esté soportada por Laravel).</p>

<p>Lo primero que tenemos que hacer, es definir estas conexiones. Para hacer esto, debemos ir a nuestro archivo de configuración:</p>

<pre><code class="language-bash">\config\database.php 
</code></pre>

<p>Allí debemos configurar nuestras conexiones. Veamos un ejemplo con conexiones a <code>mysql</code>:</p>

<pre><code class="language-php">'connections' =&gt; [

    'testing' =&gt; [
        'driver'   =&gt; 'sqlite',
        'database' =&gt; dirname(__DIR__).'/database/database.sqlite',
        'prefix'   =&gt; '',
        'foreign_key_constraints' =&gt; env('DB_FOREIGN_KEYS', true),
    ],

    'mysql_connect_1' =&gt; [
        'driver' =&gt; 'mysql',
        'host' =&gt; '127.0.0.1',
        'port' =&gt; '3306',
        'database' =&gt; 'forge_1',
        'username' =&gt; 'forge',
        'password' =&gt; '123456789_forge_1',
        'charset' =&gt; 'utf8mb4',
        'collation' =&gt; 'utf8mb4_unicode_ci',
        'prefix' =&gt; '',
        'prefix_indexes' =&gt; true,
        'strict' =&gt; true,
        'engine' =&gt; null,
    ],

    'mysql_connect_2' =&gt; [
        'driver' =&gt; 'mysql',
        'host' =&gt; '127.0.0.1',
        'port' =&gt; '3306',
        'database' =&gt; 'forge_2',
        'username' =&gt; 'forge',
        'password' =&gt; '123456789_forge_2',
        'charset' =&gt; 'utf8mb4',
        'collation' =&gt; 'utf8mb4_unicode_ci',
        'prefix' =&gt; '',
        'prefix_indexes' =&gt; true,
        'strict' =&gt; true,
        'engine' =&gt; null,
    ],
],
</code></pre>

<p>O podemos hacerlo mediante el archivo <code>.env</code>:</p>

<pre><code class="language-bash">DB_CONNECTION_1=mysql
DB_HOST_1=127.0.0.1
DB_PORT_1=3306
DB_DATABASE_1=database_1
DB_USERNAME_1=root
DB_PASSWORD_1=123456789

DB_CONNECTION_2=mysql
DB_HOST_2=127.0.0.1
DB_PORT_2=3306
DB_DATABASE_2=database_2
DB_USERNAME_2=root
DB_PASSWORD_2=123456789
</code></pre>

<p>Y su archivo de configuración:</p>

<pre><code class="language-php">'connections' =&gt; [

    'mysql_connect_1' =&gt; [
        'driver' =&gt; env('DB_CONNECTION_1', ''),
        'host' =&gt; env('DB_HOST_1', '127.0.0.1'),
        'port' =&gt; env('DB_PORT_1', '3306'),
        'database' =&gt; env('DB_DATABASE_1', 'forge'),
        'username' =&gt; env('DB_USERNAME_1', 'forge'),
        'password' =&gt; env('DB_PASSWORD_1', ''),
        'charset' =&gt; 'utf8mb4',
        'collation' =&gt; 'utf8mb4_unicode_ci',
        'prefix' =&gt; '',
        'prefix_indexes' =&gt; true,
        'strict' =&gt; true,
        'engine' =&gt; null,
    ],

    'mysql_connect_2' =&gt; [
        'driver' =&gt; env('DB_CONNECTION_2', ''),
        'host' =&gt; env('DB_HOST_2', '127.0.0.1'),
        'port' =&gt; env('DB_PORT_2', '3306'),
        'database' =&gt; env('DB_DATABASE_2', 'forge'),
        'username' =&gt; env('DB_USERNAME_2', 'forge'),
        'password' =&gt; env('DB_PASSWORD_2', ''),
        'charset' =&gt; 'utf8mb4',
        'collation' =&gt; 'utf8mb4_unicode_ci',
        'prefix' =&gt; '',
        'prefix_indexes' =&gt; true,
        'strict' =&gt; true,
        'engine' =&gt; null,
    ],
],
</code></pre>

<h3>Migraciones</h3>

<p>Para gestionar migraciones en nuestras dos conexiones, debemos añadir <code>Schema::connection('connection_name')</code>:</p>

<pre><code class="language-php">public function up()

{
    Schema::connection('mysql_connect_1')-&gt;create('users', function (Blueprint $table) {

        $table-&gt;increments('id');
        $table-&gt;string('name');
        $table-&gt;string('email')-&gt;unique();
        $table-&gt;timestamp('email_verified_at')-&gt;nullable();
        $table-&gt;string('password');
        $table-&gt;rememberToken();
        $table-&gt;timestamps();

    });
}

</code></pre>

<p>O el otro ejemplo:</p>

<pre><code class="language-php">public function up()

{
    Schema::connection('mysql_connect_2')-&gt;create('profiles', function (Blueprint $table) {

        $table-&gt;increments('id');
        $table-&gt;integer('user_id')-&gt;unsigned()-&gt;index();
        $table-&gt;string('profile_address');
        $table-&gt;string('profile_avatar');
        $table-&gt;timestamps();

    });
}

</code></pre>

<h3>Desde el Modelo</h3>

<p>Podemos definir la base de datos que puede utilizar cada modelo:</p>

<pre><code class="language-php">namespace App;

use Illuminate\Database\Eloquent\Model;

class User extends Model
{
    protected $connection = 'mysql_connect_1';
}
</code></pre>

<h3>Utilizando el: Query Builder</h3>

<p>También podemos especificar la conexión cuando hacemos una consulta a la base de datos, mediante un <em>query</em>:</p>

<pre><code class="language-php">DB::connection('mysql_connect_2')-&gt;table('profiles')-&gt;select('profile_address')-&gt;get();
</code></pre>

<p>Veámoslo desde un <em>Controlador</em>:</p>

<pre><code class="language-php">namespace App\Http\Controllers;

use DB;
use Illuminate\Http\Request;

class UserController extends Controller
{
    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $user = DB::connection('mysql_connect_1')-&gt;find($id);

        return view('dashboard.user', compact('user'));
    }
}
</code></pre>

<p>Referencias:</p>

<ul>
<li><a href="https://fideloper.com/laravel-multiple-database-connections" class="link-out">Fideloper</a></li>
<li><a href="https://laracasts.com/discuss/channels/eloquent/laravel-5-multiple-database-connection" class="link-out">Laracast</a></li>
<li><a href="https://laraveldaily.com/multiple-database-connections-in-the-same-laravel-project/" class="link-out">Laraveldaily</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Alojando sitios estáticos en Netlify]]></title>
                <link>https://daguilar.dev/blog/servers_alojando-sitios-estaticos-en-netlify</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/servers_alojando-sitios-estaticos-en-netlify</guid>
                <description><![CDATA[Alojamiento gratuito para sitios estáticos en Netlify]]></description>
                <content:encoded><![CDATA[<p><a href="https://www.netlify.com/" class="link-out">Netlify</a>, es una plataforma que va más allá de ser un simple servicio de alojamiento estático para sitios web. Nos permite vincular nuestro repositorio (por ejemplo, de Github o Gitlab), de forma que nos permite una integración continua.</p>

<p>Es decir, cada vez que actualizamos nuestro repositorio, automáticamente, se actualiza nuestro proyecto alojado en <a href="https://www.netlify.com/">Netlify</a>.</p>

<p>Ofrece un servicio gratuito, para sitios pequeños (y estáticos), incluyendo:</p>

<ul>
<li>Dominio propio.</li>
<li>Gestión de DNS.</li>
<li>HTTPS.</li>
<li>Rollbacks.</li>
</ul>

<p>Si necesitamos bases de datos, formularios, etc... entonces vamos a tener que optar por otras soluciones.</p>

<p>A nivel personal, este blog se encuentra alojado en <a href="https://www.netlify.com/" class="link-out">Netlify</a>, y sinceramente, no tengo ninguna queja.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Creando enlaces externos con Javascript de forma dinámica]]></title>
                <link>https://daguilar.dev/blog/javascript_creando-enlaces-externos-con-javascript-de-forma-dinamica</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/javascript_creando-enlaces-externos-con-javascript-de-forma-dinamica</guid>
                <description><![CDATA[Generando enlaces externos utilizando vanilla javascript y markdown. Utilizaremos las propiedades de identificación de componentes de lenguaje Markdown para generar los enlaces externos mediante javascript.]]></description>
                <content:encoded><![CDATA[<p>En ocasiones, nos encontramos en la situación en la que necesitamos generar enlaces externos de forma dinámica. Por ejemplo, pensemos en un código <code>markdown</code>, en el que queremos que nuestro enlace tenga el attributo <code>target</code>, con el valor <em>_blank</em>.</p>

<p>La forma más sencilla de hacerlo, es añadiendo a nuestro enlace una clase <code>css</code>(siempre que tengamos la versión extendida de <code>markdown</code>):</p>

<pre><code class="language-html">[Laravel](https://laravel.com/){.link-out}
</code></pre>

<p>Con <code>markdown</code>, podemos añadir attributos con los corchetes:</p>

<pre><code class="language-html">[Laravel](https://laravel.com/){#myID .link-out}
</code></pre>

<p>Que se renderizará en:</p>

<pre><code class="language-html">&lt;a href="https://laravel.com/" id="myID" class="link-out"&gt;Laravel&lt;/a&gt;
</code></pre>

<p>Ahora, solo tenemos que añadir un poco de código <code>javascript</code> en nuestra página:</p>

<pre><code class="language-javascript">&lt;script&gt;
    document.addEventListener('DOMContentLoaded', function() {
        var linksTargetBlank = document.querySelectorAll('.link-out');
        for (var i = 0; i &lt; linksTargetBlank.length; i++) {
            linksTargetBlank[i].target = "_blank";
        }
    }, false);
&lt;/script&gt;
</code></pre>

<p>Automáticamente, una vez que se cargue la página, añadirá el atritudo <code>target</code> con el valor <em>_blank</em>, a todos los enlaces con la clase <em>.link-out</em>.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Actualizando a php 7.4 desde Mac]]></title>
                <link>https://daguilar.dev/blog/php_actualizando-a-php-74-desde-mac</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/php_actualizando-a-php-74-desde-mac</guid>
                <description><![CDATA[Actualizando un Mac a PHP 7.4 desde versiones anteriores, para utilizar las nuevas características del lenguaje de programación. Actualización mediante el gestor de librerías para Mac Brew y de forma automática utilizando Laravel Valet.]]></description>
                <content:encoded><![CDATA[<p>Ha salido la nueva versión de php: la <strong>versión 7.4</strong> con grandes novedades. Destacando las <em>arrow functions</em> que llevaban siendo (desde hace tiempo), una reivindicación por parte de la comunidad php:</p>

<pre><code class="language-php">&lt;?php

$factor = 10;
$nums = array_map(fn($n) =&gt; $n * $factor, [1, 2, 3, 4]);
// $nums = array(10, 20, 30, 40);
</code></pre>

<p>Podrás encontrar más informacion sobre las novedades, aquí: <a href="https://www.php.net/manual/es/migration74.new-features.php" class="link-out">php.net</a></p>

<p>En cualquier caso, la idea de este post era la de exponer mi experiencia al actualizar mi Mac, y explicar como lo he hecho, y sobre todo, que problemas he encontrado.</p>

<p>Partimos de la base, de que la gestión de mi servidor local la realizo a través de <a href="https://laravel.com/" class="link-out">Laravel valet</a>, y por tanto, solo he tenido que hacer esto:</p>

<pre><code class="language-bash">valet use php@7.4
</code></pre>

<p>Automáticamente me ha indicado que no tenía instalada la versión 7.4, y la ha instalado directamente.</p>

<p>Admito que no ha sido mi primera tentativa, ya que anteriormente, había intentado instalarla utilizando <code>brew</code>... y no fue la mejor de las opciones, realmente, fue un auténtico desastre y no solo porque no me ha instaló la nueva versión, sino porque que me borró el archivo de configuración de mysql:</p>

<pre><code class="language-bash">/usr/local/etc/my.cnf.d
</code></pre>

<p>Por lo que he tenido que crearlo de nuevo:</p>

<pre><code class="language-bash">mkdir /usr/local/etc/my.cnf.d
</code></pre>

<p>Importante, no olvidar actualizar <code>valet</code> antes:</p>

<pre><code class="language-bash">composer global update &amp;&amp; valet install
</code></pre>

<p>Otros usuarios, se han encontrado otros problemas, por ejemplo, <a href="https://laracasts.com/" class="link-out">Jeffrey Way</a>, ha tenido problemas con <code>ngix</code> y <code>dnsmasq</code>, y ha recomendado actualizarlos:</p>

<pre><code class="language-bash">brew upgrade nginx &amp;&amp; brew upgrade dnsmasq
</code></pre>

<p>También recomienda eliminar versiones anteriores de <code>php</code>:</p>

<pre><code class="language-bash">brew unlink php@7.2
</code></pre>

<p>En mi caso, lo hizo automáticamente <code>valet</code>...</p>

<p>En fin, creo que que si usas <strong>Mac</strong> y <strong>Laravel</strong>, lo mejor para actualizar <code>php</code> es hacerlo desde <code>valet</code>, o al menos, ha sido lo más sencillo para mi.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate>

                                <media:content
                        medium="image"
                        url="https://daguilar.dev/assets/img/posts/php74.jpg"
                        type="image/jpeg"
                        width="150"
                        height="150" />
                            </item>
                    <item>
                <title><![CDATA[Configurar helpers en Laravel]]></title>
                <link>https://daguilar.dev/blog/laravel_configurar-helpers-en-laravel</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/laravel_configurar-helpers-en-laravel</guid>
                <description><![CDATA[Configuración de un archivo helpers.php en Laravel utilizando los dos sistemas disponibles para implementarlos, por un lado mediante el gestor de librerias PHP Composer, y por otro lado, mediante la utilización de los Service Providers de Laravel.]]></description>
                <content:encoded><![CDATA[<p>En ocasiones, podemos necesitar acceder a funciones (<em>helpers</em>), desde cualquier parte de nuestro código.</p>

<p><strong>Laravel</strong> no dispone de esta funcionalidad por defecto, pero existen varias formas de configurar nuestra aplicación, para solucionar esto.</p>

<p>Antes de empezar con las diferentes opciones que tenemos, lo primero es crear un archivo donde alojar nuestras funciones o <em>helpers</em>, en mi caso, suelo tener el archivo aquí:</p>

<pre><code class="language-php">\App\Http\Helpers
</code></pre>

<p>En este nuevo archivo: <code>Helpers.php</code>, añadiremos todos los métodos que necesitemos:</p>

<pre><code class="language-php">&lt;?php

if (! function_exists('userId')) {
    function userId() {
        return auth()-&gt;user()-&gt;id;
    }
}
</code></pre>

<p>Ahora es cuando podemos elegir entre las diferentes opciones para poder tener acceso a los <em>helpers</em>.</p>

<h4>a) Mediante el archivo <code>composer.json</code></h4>

<p>Añadimos el campo <code>files</code>, con la ruta hacia nuestro archivo.</p>

<pre><code class="language-php">"autoload": {
    "psr-4": {
        "App\\": "app/"
    },
    "classmap": [
        "database/seeds",
        "database/factories"
    ],
    "files":[
        "app/Http/Helpers.php"
    ]
},
</code></pre>

<p>Ahora solo nos falta actualizar <code>composer</code>, y ya estaría:</p>

<pre><code class="language-php">composer dump
</code></pre>

<h4>b) Mediante un <em>Service Provider</em></h4>

<p>Crea un nuevo <em>Services Provider</em>, usando <code>artisan</code>:</p>

<p><code>artisan make:provider HelpersServiceProvider</code></p>

<p>El archivo se crea en la ruta:</p>

<p><code>\app\Providers\HelpersServiceProvider.php</code></p>

<p>Y en el archivo, en el método <code>register()</code>, añadimos:</p>

<pre><code class="language-php">public function register()
{
    require_once app_path() . '/Http/Helpers.php';
}
</code></pre>

<p>Es decir, la ruta a nuestro archivo <code>helpers</code>.</p>

<p>Y ahora en el archivo:</p>

<p><code>config/app.php</code></p>

<p>Debemos añadir el nuevo <em>Service Provider</em> a la lista:</p>

<pre><code class="language-php">App\Providers\HelpersServiceProvider::class,
</code></pre>

<p>De estas dos opciones, personalmente, prefiero la segunda, aunque ambas son igualmente válidas.</p>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>

                            </item>
                    <item>
                <title><![CDATA[Migrando el blog a Jigsaw]]></title>
                <link>https://daguilar.dev/blog/frameworks_migrando-el-blog-a-jigsaw</link>
                <guid isPermaLink="true">https://daguilar.dev/blog/frameworks_migrando-el-blog-a-jigsaw</guid>
                <description><![CDATA[Después de mucho tiempo utilizando blogs dinámicos con conexión a bases de datos, he actualizando el blog a Jigsaw, el framework ligero y basado en Laravel para desarrollo de sitios estáticos. Desarrolla tu blog mediante plantillas de Laravel Blade y archivos Markdown.]]></description>
                <content:encoded><![CDATA[<p>En 2015, empecé mi primer blog sobre programación. Fue en otro dominio, y con un <strong>CMS</strong>, que en aquel momento, me parecía una buena opción: <a href="https://anchorcms.com/" class="link-out">AnchorCMS</a>. No tardé mucho en cansarme de sus limitaciones, y empecé a modificarlo, y modificarlo, y terminó siendo algo totalmente distinto, y durante algún tiempo funcionó.</p>

<p>Fue entonces cuando descubrí <a href="https://laravel.com" class="link-out">Laravel</a>, y decidí crear mi propio CMS. Durante los años, llegué a realizar dos desarrollos diferentes del blog, y al final, terminé por cansarme.</p>

<p>No fue hasta hace unos meses cuando empecé a tabajar con <em>frameworks</em> de desarrollo, para sitios web estáticos.</p>

<p>Mi primer encuentro con el mundo estático, fue con <a href="https://vuepress.vuejs.org/" class="link-out">Vuepress</a>, y la verdad es que no me gustó nada... ultimamente, cada vez me gusta menos <a href="https://vuejs.org/" class="link-out">Vuejs</a>, y después de este, probé algún que otro <em>frameworks</em> mas, pero ninguno de ellos terminaron por convencerme demasiado.</p>

<p>Había desistido, hasta que un artículo sobre <a href="https://jigsaw.tighten.co/" class="link-out">Jigsaw</a>, cayó en mis manos, y me decidí a probarlo... pasé una mañana entera realizando las primeras pruebas, y aquello me gusto, era exáctamente lo que estaba buscando, y empecé a trabajar en el nuevo blog.</p>

<p><strong>A favor</strong>:</p>

<ul>
<li>Es un sistema basado en <code>php</code>, sigo sintiéndome mucho más cómodo aquí.</li>
<li>Utiliza <strong>Blade</strong> como gestor de plantillas... una maravilla, cuando llevas tanto tiempo trabajando con <strong>Laravel</strong>.</li>
<li><a href="https://tailwindcss.com/" class="link-out">Tailwindcss</a> como framework css. Ahora mismo, me parece imprescindible.</li>
<li>Compatible con <a href="https://www.netlify.com/" class="link-out">Netlify</a>, permitiendo <em>deploy</em> en tiempo real, desde <a href="https://github.com/" class="link-out">Github</a>.</li>
<li><em>Markdown</em> como formato de archivos.</li>
<li>Busqueda con <a href="https://www.algolia.com/" class="link-out">Angolia</a> integrada.</li>
<li>Desarrollo muy rápido.</li>
</ul>

<p><strong>En contra</strong>:</p>

<ul>
<li>Solo para programadores, ya que no dispone de un panel de administración para gestionar el sistema, no es un <strong>CMS</strong>.</li>
</ul>

<p>Si lo que buscas es un <strong>CMS</strong> con panel de administrador, aquí tienes algunas opciones:</p>

<ul>
<li><a href="https://wink.themsaid.com/" class="link-out">Wink</a></li>
<li><a href="https://es.wordpress.com/" class="link-out">Wordpress</a></li>
</ul>
]]></content:encoded>
                <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damián Aguilar</dc:creator>
                <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>

                            </item>
            </channel>
</rss>
